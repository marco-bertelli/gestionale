{"version":3,"file":"clipboard.js","sources":["../../../../../../src/cdk/clipboard/pending-copy.ts","../../../../../../src/cdk/clipboard/clipboard.ts","../../../../../../src/cdk/clipboard/copy-to-clipboard.ts","../../../../../../src/cdk/clipboard/clipboard-module.ts","../../../../../../src/cdk/clipboard/public-api.ts","../../../../../../src/cdk/clipboard/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set a fixed position so the page layout\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n    styles.position = 'fixed';\n    styles.top = styles.opacity = '0';\n    styles.left = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement as HTMLOrSVGElement | null;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      if (textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {PendingCopy} from './pending-copy';\n\n\n/**\n * A service for copying text to the clipboard.\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private readonly _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  NgZone,\n  InjectionToken,\n  Inject,\n  Optional,\n  OnDestroy,\n} from '@angular/core';\nimport {Clipboard} from './clipboard';\nimport {PendingCopy} from './pending-copy';\n\n/** Object that can be used to configure the default options for `CdkCopyToClipboard`. */\nexport interface CdkCopyToClipboardConfig {\n  /** Default number of attempts to make when copying text to the clipboard. */\n  attempts?: number;\n}\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nexport const CKD_COPY_TO_CLIPBOARD_CONFIG =\n    new InjectionToken<CdkCopyToClipboardConfig>('CKD_COPY_TO_CLIPBOARD_CONFIG');\n\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n@Directive({\n  selector: '[cdkCopyToClipboard]',\n  host: {\n    '(click)': 'copy()',\n  }\n})\nexport class CdkCopyToClipboard implements OnDestroy {\n  /** Content to be copied. */\n  @Input('cdkCopyToClipboard') text: string = '';\n\n  /**\n   * How many times to attempt to copy the text. This may be necessary for longer text, because\n   * the browser needs time to fill an intermediate textarea element and copy the content.\n   */\n  @Input('cdkCopyToClipboardAttempts') attempts: number = 1;\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   */\n  @Output('cdkCopyToClipboardCopied') copied = new EventEmitter<boolean>();\n\n  /** Copies that are currently being attempted. */\n  private _pending = new Set<PendingCopy>();\n\n  /** Whether the directive has been destroyed. */\n  private _destroyed: boolean;\n\n  /** Timeout for the current copy attempt. */\n  private _currentTimeout: any;\n\n  constructor(\n    private _clipboard: Clipboard,\n    private _ngZone: NgZone,\n    @Optional() @Inject(CKD_COPY_TO_CLIPBOARD_CONFIG) config?: CdkCopyToClipboardConfig) {\n\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n\n  /** Copies the current text to the clipboard. */\n  copy(attempts: number = this.attempts): void {\n    if (attempts > 1) {\n      let remainingAttempts = attempts;\n      const pending = this._clipboard.beginCopy(this.text);\n      this._pending.add(pending);\n\n      const attempt = () => {\n        const successful = pending.copy();\n        if (!successful && --remainingAttempts && !this._destroyed) {\n          // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n          this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n        } else {\n          this._currentTimeout = null;\n          this._pending.delete(pending);\n          pending.destroy();\n          this.copied.emit(successful);\n        }\n      };\n      attempt();\n    } else {\n      this.copied.emit(this._clipboard.copy(this.text));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._currentTimeout) {\n      clearTimeout(this._currentTimeout);\n    }\n\n    this._pending.forEach(copy => copy.destroy());\n    this._pending.clear();\n    this._destroyed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkCopyToClipboard} from './copy-to-clipboard';\n\n@NgModule({\n  declarations: [CdkCopyToClipboard],\n  exports: [CdkCopyToClipboard],\n})\nexport class ClipboardModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './clipboard';\nexport * from './clipboard-module';\nexport * from './copy-to-clipboard';\nexport * from './pending-copy';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}