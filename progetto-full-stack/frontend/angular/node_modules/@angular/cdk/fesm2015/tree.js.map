{"version":3,"file":"tree.js","sources":["../../../../../../src/cdk/tree/control/base-tree-control.ts","../../../../../../src/cdk/tree/control/flat-tree-control.ts","../../../../../../src/cdk/tree/control/nested-tree-control.ts","../../../../../../src/cdk/tree/outlet.ts","../../../../../../src/cdk/tree/node.ts","../../../../../../src/cdk/tree/tree-errors.ts","../../../../../../src/cdk/tree/tree.ts","../../../../../../src/cdk/tree/nested-node.ts","../../../../../../src/cdk/tree/padding.ts","../../../../../../src/cdk/tree/toggle.ts","../../../../../../src/cdk/tree/tree-module.ts","../../../../../../src/cdk/tree/public-api.ts","../../../../../../src/cdk/tree/index.ts"],"names":["observableOf"],"mappings":";;;;;;;AAAA;AACC;AACC;AAEF;AAAI;AACC;AAEH;AAIF;;;AACA,MAAsB,eAAe;AAAI,IAAzC;AAAiB;AAEE,QAUjB,mBAAc,GAAsB,IAAI,cAAc,CAAI,IAAI,CAAC,CAAC;AAElE,KAqEC;AACA;AAAqE,IAjDpE,MAAM,CAAC,QAAW;AAAK,QACrB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC5D,KAAE;AAEH;AACG,IAAD,MAAM,CAAC,QAAW;AAAK,QACrB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC5D,KAAE;AAEH;AACG,IAAD,QAAQ,CAAC,QAAW;AAAK,QACvB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC9D,KAAE;AAEH;AACG,IAAD,UAAU,CAAC,QAAW;AAAK,QACzB,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvE,KAAE;AAEH;AACG,IAAD,iBAAiB,CAAC,QAAW;AAAK,QAChC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC/D,YAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;AACzC,YAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AACxC,KAAE;AAEH;AACG,IAAD,WAAW;AAAM,QACf,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;AAC/B,KAAE;AAEH;AACG,IAAD,iBAAiB,CAAC,QAAW;AAAK,QAChC,IAAI,aAAa,GAAG,CAAC,QAAQ,CAAC,CAAC;AAClC,QAAG,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;AACxD,QAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACxF,KAAE;AAEH;AACG,IAAD,mBAAmB,CAAC,QAAW;AAAK,QAClC,IAAI,aAAa,GAAG,CAAC,QAAQ,CAAC,CAAC;AAClC,QAAG,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;AACxD,QAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1F,KAAE;AAEH,IAAY,aAAa,CAAC,KAAU;AAAK,QACrC,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAU,CAAC,GAAG,KAAU,CAAC;AAC/D,KAAE;AACF,CAAA;AACA;AChGD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAOD;AACA,MAAa,eAA0B,SAAQ,eAAqB;AAEpE;AACG,IAAD,YACW,QAAiC,EAAS,YAAsC,EAChF,OAAsC;AAClD,QAAG,KAAK,EAAE,CAAC;AAEZ,QAJa,aAAQ,GAAR,QAAQ,CAAyB;AAAE,QAAO,iBAAY,GAAZ,YAAY,CAA0B;AAC7F,QAAa,YAAO,GAAP,OAAO,CAA+B;AAAE,QAGjD,IAAI,IAAI,CAAC,OAAO,EAAE;AACrB,YAAK,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;AACzC,SAAI;AACJ,KAAE;AAEH;AACG;AAEF;AAAQ;AACG;AAEH;AAAS,IAAhB,cAAc,CAAC,QAAW;AAAK,QAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACvD,QAAG,MAAM,OAAO,GAAQ,EAAE,CAAC;AAE5B;AACK;AACK;AACK;AACK;AACK;AACK,QAA1B,KAAK,IAAI,CAAC,GAAG,UAAU,GAAG,CAAC,EACvB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EACvF,CAAC,EAAE,EAAE;AACZ,YAAK,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,SAAI;AACJ,QAAG,OAAO,OAAO,CAAC;AAClB,KAAE;AAEH;AACG;AAEF;AAAQ;AACG;AAEH;AAAS,IAAhB,SAAS;AAAM,QACb,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvF,KAAE;AACF,CAAA;AACA;AC/DD;AACC;AACC;AAEF;AAAI;AACC;AAEH;AASF;AACA,MAAa,iBAA4B,SAAQ,eAAqB;AACrE;AACG,IAAF,YACW,WAAuE,EACvE,OAAwC;AACpD,QAAG,KAAK,EAAE,CAAC;AAEZ,QAJa,gBAAW,GAAX,WAAW,CAA4D;AACpF,QAAa,YAAO,GAAP,OAAO,CAAiC;AAAE,QAGnD,IAAI,IAAI,CAAC,OAAO,EAAE;AACrB,YAAK,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;AACzC,SAAI;AACJ,KAAE;AAEH;AACG;AAEF;AAAQ;AACG;AAEH;AAAS,IAAhB,SAAS;AAAM,QACb,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;AAC/B,QAAG,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAgB,EAAE,QAAQ,KAC9D,CAAC,GAAG,WAAW,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;AACzE,QAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjF,KAAE;AAEH;AACG,IAAD,cAAc,CAAC,QAAW;AAAK,QAC7B,MAAM,WAAW,GAAQ,EAAE,CAAC;AAEhC,QAAI,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;AAC/C;AACK,QAAF,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAChC,KAAE;AAEH;AACG,IAAS,eAAe,CAAC,WAAgB,EAAE,QAAW;AAAK,QAC1D,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC9B,QAAG,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AACpD,QAAG,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;AACrC,YAAK,aAAa,CAAC,OAAO,CAAC,CAAC,KAAQ,KAAK,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC;AACnF,SAAI;AAAE,aAAI,IAAI,YAAY,CAAC,aAAa,CAAC,EAAE;AAC3C;AACO;AACO,YAAT,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,OAAwB,CAAC,CAAC;AAClE,iBAAU,SAAS,CAAC,QAAQ;AAC5B,gBAAW,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE;AACzC,oBAAa,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;AACtD,iBAAY;AACZ,aAAU,CAAC,CAAC;AACZ,SAAI;AACJ,KAAE;AACF,CAAA;AACA;ACrED;AACC;AACC;AAEF;AAAI;AACC;AAEH;AAQF;AACC;AACC;AACC;AAEH;AAAA,MAAa,yBAAyB,GAAG,IAAI,cAAc,CAAK,2BAA2B,CAAC,CAAC;AAE7F;AACC;AACC;AACC;AAIH,MAAa,iBAAiB;AAC7B,IAAC,YACW,aAA+B,EACgB,KAAW;AACvE,QAFa,kBAAa,GAAb,aAAa,CAAkB;AAC5C,QAA4D,UAAK,GAAL,KAAK,CAAM;AAAE,KAAE;AAC1E;+CAPA,SAAS,SAAC,mBACT,QAAQ,EAAE,qBAAqB,eAChC;2HACK;AAAE;AAEJ,YAnBF,gBAAgB;AACf,4CAmBI,MAAM,SAAC,yBAAyB,cAAG,QAAQ;AAAO;;;;;;;;;;;kCAAE;AAAE;AChC7D;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAGD;AACA,MAAa,wBAAwB;AAAI,IAavC,YAAY,IAAO;AACpB,QAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACzB,KAAE;AACF,CAAA;AAED;AACC;AACC;AACC;AAOH,MAAa,cAAc;AAAI;AAEb,IAShB,YAAmB,QAA0B;AAC/C,QADqB,aAAQ,GAAR,QAAQ,CAAkB;AAAE,KAAE;AAClD;4CAlBA,SAAS,SAAC,mBACT,QAAQ,EAAE,kBAAkB,mBAC5B,MAAM,EAAE;iBACN,0BAA0B,mBAC3B,gBACF,sFACK;AAAE;AAEE,YAlCS,WAAW;AAAI;;;;;;;;;4EAAE;AAAE;ACRtC;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AACC;AAAK;AACC;AAEH;AAAL,SAAgB,6BAA6B;AAC5C,IAAC,OAAO,KAAK,CAAC,uCAAuC,CAAC,CAAC;AACvD,CAAA;AAED;AACC;AACC;AACC;AACH,SAAgB,mCAAmC;AAClD,IAAC,OAAO,KAAK,CAAC,sEAAsE,CAAC,CAAC;AACtF,CAAA;AAED;AACC;AACC;AACC;AACH,SAAgB,kCAAkC;AACjD,IAAC,OAAO,KAAK,CAAC,uEAAuE,CAAC,CAAC;AACvF,CAAA;AAED;AACC;AACC;AACC;AACH,SAAgB,0BAA0B;AACzC,IAAC,OAAO,KAAK,CAAC,6CAA6C,CAAC,CAAC;AAC7D,CAAA;AAED;AACC;AACC;AACC;AACH,SAAgB,mCAAmC;AAClD,IAAC,OAAO,KAAK,CAAC,gEAAgE,CAAC,CAAC;AAChF,CAAA;AACA;ACID;AACC;AACC;AACC;AAiBH,MAAa,OAAO;AAAI,IA4DtB,YAAoB,QAAyB,EACzB,kBAAqC;AAC3D,QAFsB,aAAQ,GAAR,QAAQ,CAAiB;AAC/C,QAAsB,uBAAkB,GAAlB,kBAAkB,CAAmB;AAAE;AAGN,QA9D7C,eAAU,GAAG,IAAI,OAAO,EAAQ,CAAC;AAE3C;AAA+B,QAUrB,YAAO,GAAmB,IAAI,GAAG,EAAa,CAAC;AAEzD;AAEK;AAAmD;AACxD;AAGA;AACO;AAAa,QAkClB,eAAU,GACR,IAAI,eAAe,CAA+B,EAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,EAAC,CAAC,CAAC;AAEzF,KAC+D;AAE/D;AAAS;AAEY;AACR;AAKY;AAAS,IAlDhC,IACI,UAAU,KAA4C,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE;AACrF,IAAC,IAAI,UAAU,CAAC,UAAiD;AACjE,QAAG,IAAI,IAAI,CAAC,WAAW,KAAK,UAAU,EAAE;AACxC,YAAK,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;AACxC,SAAI;AACJ,KAAE;AACF,IAmCC,QAAQ;AACT,QAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAClE,QAAG,IAAI,CAAC,IAAI,CAAC,WAAW,KAAK,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;AAC7E,YAAK,MAAM,0BAA0B,EAAE,CAAC;AACxC,SAAI;AACJ,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;AAE3C,QAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AAC9B,QAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AAE/B,QAAI,IAAI,IAAI,CAAC,WAAW,IAAI,OAAQ,IAAI,CAAC,WAA6B,CAAC,UAAU,KAAK,UAAU,EAAE;AACjG,YAAM,IAAI,CAAC,UAA4B,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACzD,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAC/B,YAAK,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;AAC1C,YAAK,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AACnC,SAAI;AACJ,KAAE;AAEH,IAAE,qBAAqB;AACtB,QAAG,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACnE,QAAG,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,KAAK,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;AACtF,YAAK,MAAM,mCAAmC,EAAE,CAAC;AACjD,SAAI;AACJ,QAAG,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;AAE9C,QAAI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;AACrE,YAAK,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAClC,SAAI;AACJ,KAAE;AAEH;AAEE;AAEE;AACG;AACG;AACG;AAEH;AAAS,IAAT,iBAAiB,CAAC,UAAiD;AAC5E,QAAG,IAAI,IAAI,CAAC,WAAW,IAAI,OAAQ,IAAI,CAAC,WAA6B,CAAC,UAAU,KAAK,UAAU,EAAE;AACjG,YAAM,IAAI,CAAC,UAA4B,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACzD,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAC/B,YAAK,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;AAC1C,YAAK,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AACnC,SAAI;AAEL;AACK,QAAD,IAAI,CAAC,UAAU,EAAE;AACpB,YAAK,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;AAC5C,SAAI;AAEL,QAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AACjC,QAAG,IAAI,IAAI,CAAC,SAAS,EAAE;AACvB,YAAK,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAClC,SAAI;AACJ,KAAE;AAEH;AACG,IAAO,qBAAqB;AAC9B,QAAG,IAAI,UAA0D,CAAC;AAEnE,QAAI,IAAI,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;AACvC,YAAK,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACjD,SAAI;AAAE,aAAI,IAAI,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;AAC9C,YAAK,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;AACnC,SAAI;AAAE,aAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;AAC/C,YAAK,UAAU,GAAGA,EAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACjD,SAAI;AAEL,QAAI,IAAI,UAAU,EAAE;AACnB,YAAK,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACzE,iBAAQ,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;AACxD,SAAI;AAAE,aAAI,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,EAAE;AAC7D,YAAK,MAAM,6BAA6B,EAAE,CAAC;AAC3C,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,iBAAiB,CAAC,IAA4B,EAAE,aAAgC,IAAI,CAAC,WAAW,EAC9E,gBAAkC,IAAI,CAAC,WAAW,CAAC,aAAa,EAChE,UAAc;AACjC,QAAG,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzC,QAAG,IAAI,CAAC,OAAO,EAAE;AAAG,YAAD,OAAO;AAAE,SAAA;AAE7B,QAAI,OAAO,CAAC,gBAAgB,CAAC,CAAC,IAA6B,EAC7B,qBAAoC,EACpC,YAA2B;AACxD,YAAO,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;AACvC,gBAAS,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAa,CAAC,EAAE,YAAa,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;AACxF,aAAQ;AAAE,iBAAI,IAAI,YAAY,IAAI,IAAI,EAAE;AACxC,gBAAS,aAAa,CAAC,MAAM,CAAC,qBAAsB,CAAC,CAAC;AACtD,gBAAS,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxC,aAAQ;AAAE,iBAAI;AACd,gBAAS,MAAM,IAAI,GAAG,aAAa,CAAC,GAAG,CAAC,qBAAsB,CAAC,CAAC;AAChE,gBAAS,aAAa,CAAC,IAAI,CAAC,IAAK,EAAE,YAAY,CAAC,CAAC;AACjD,aAAQ;AACR,SAAM,CAAC,CAAC;AAET,QAAI,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;AAC3C,KAAE;AAEH;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAhB,WAAW,CAAC,IAAO,EAAE,CAAS;AAAK,QACjC,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AAAG,YAAD,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;AAAE,SAAA;AAErE,QAAI,MAAM,OAAO,GACX,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC;AAExF,QAAI,IAAI,CAAC,OAAO,KAAK,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;AACpE,YAAK,MAAM,kCAAkC,EAAE,CAAC;AAChD,SAAI;AAEL,QAAI,OAAO,OAAQ,CAAC;AACnB,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,UAAU,CAAC,QAAW,EAAE,KAAa,EAAE,aAAgC,EAAE,UAAc;AACxF,QAAG,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAEnD;AACK,QAAD,MAAM,OAAO,GAAG,IAAI,wBAAwB,CAAI,QAAQ,CAAC,CAAC;AAE9D;AACK;AACK,QAAN,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;AAClC,YAAK,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACzD,SAAI;AAAE,aAAI,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AACjF,YAAK,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAE,GAAG,CAAC,CAAC;AACvD,SAAI;AAAE,aAAI;AACV,YAAK,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;AACvB,SAAI;AACJ,QAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AAE9C;AACK,QAAD,MAAM,SAAS,GAAG,aAAa,GAAG,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;AACpF,QAAG,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAEhE;AACK;AACK;AACK,QAAX,IAAI,WAAW,CAAC,kBAAkB,EAAE;AACvC,YAAK,WAAW,CAAC,kBAAkB,CAAC,IAAI,GAAG,QAAQ,CAAC;AACpD,SAAI;AACJ,KAAE;AACF;qCAhPA,SAAS,SAAC,mBACT,QAAQ,EAAE,UAAU,mBACpB,QAAQ,EAAE,SAAS,mBACnB,QAAQ,EAAE;iCAAiD,mBAC3D,IAAI,EAAE,uBACJ,OAAO,EAAE,UAAU,uBACnB,MAAM,EAAE,MAAM,oBACf;SACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;;;;;;;;;qBAMrC,eAAe,EAAE,uBAAuB,CAAC,OAAO,eACjD;;8DACK;AAAE;AAAkC,YAlDxC,eAAe;AACd,YAVD,iBAAiB;AACjB;AAAI;AAEJ,yBA6EC,KAAK;AACL,0BASA,KAAK;AAAM,sBAQX,KAAK;AAAM,0BAGX,SAAS,SAAC,iBAAiB,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC;AAAQ,wBAGnD,eAAe,SAAC,cAAc,EAAE;AAClC;AACiB;AAEL,oBADT,WAAW,EAAE,IAAI;AACpB,iBAAE;AAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAE;AAAK;AAEmB;AAuLtC,MAAa,WAAW;AAAI,IA0D1B,YAAsB,WAAoC,EACpC,KAAoB;AAC3C,QAFuB,gBAAW,GAAX,WAAW,CAAyB;AAC5D,QAAwB,UAAK,GAAL,KAAK,CAAe;AAAE;AAEtC,QAxCI,eAAU,GAAG,IAAI,OAAO,EAAQ,CAAC;AAE7C;AACO,QAAL,iBAAY,GAAG,IAAI,OAAO,EAAQ,CAAC;AAErC,QAkCI,WAAW,CAAC,kBAAkB,GAAG,IAAyB,CAAC;AAC9D;AACK;AACK;AACK;AACK,QAAjB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AACjE,QAAG,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;AAC1B,KAAE;AAEH;AAAS;AACc;AACW;AAAuC;AAIvD;AAAS,IApEzB,IAAa,IAAI,KAAyB,OAAO,UAAU,CAAC,EAAE;AAEhE,IAAE,IAAI,IAAI,CAAC,KAAyB;AACnC;AACK,QAAF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAC9D,KAAE;AAEH;AAC4B,IAc1B,IAAI,IAAI,KAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;AACrC,IAAC,IAAI,IAAI,CAAC,KAAQ;AAClB,QAAG,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;AAC7B,YAAK,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACxB,YAAK,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC7B,YAAK,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAC9B,SAAI;AACJ,KAAE;AACF,IAEC,IAAI,UAAU;AAAM,QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACxD,KAAE;AAEH,IAAU,YAAY,CAAC,SAAkB;AACxC,QAAG,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;AACpC,QAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,eAAe,EAAE,GAAG,SAAS,EAAE,CAAC,CAAC;AAChF,KAAE;AAEH,IAEE,IAAI,KAAK;AAAM;AAC0E;AAEtF;AACM,QAAR,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ;AACxC,YAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC;AAC5E,KAAG;AAEJ,IAWE,QAAQ;AAAM,QACZ,IAAI,CAAC,oBAAoB,GAAG,sBAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;AACtF,QAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;AAClF,KAAE;AAEH,IAAE,SAAS;AACV;AACK;AACK;AACK;AACK,QAAjB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,eAAe,EAAE;AAChD,YAAK,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACxC,SAAI;AACJ,KAAE;AAEH,IAAE,WAAW;AACZ;AACK;AACK,QAAP,IAAI,WAAW,CAAC,kBAAkB,KAAK,IAAI,EAAE;AAChD,YAAK,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC;AAC3C,SAAI;AAEL,QAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;AAChC,QAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AAC9B,KAAE;AAEH;AACG,IAAD,KAAK;AAAM,QACT,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;AAC1C,KAAE;AAEH;AACG,IAAS,gBAAgB;AAAM,QAC9B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW;AAClF,aAAM,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;AACtD,YAAK,MAAM,mCAAmC,EAAE,CAAC;AACjD,SAAI;AACJ,QAAG,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;AAC1B,KAAE;AACF;;wJACD;AACC;AAAK;AAC6B;AACD;AA/FzB,8BAAkB,GAA4B,IAAI,CAAC,AAlBtD;AAAE;EAJP,SAAS,SAAC,pBAImC,YAhS5C,UAAU;YA6RV,QAAQ,EAAE,tBA5RT,YA0V4B,OAAO;AAAI;UA9Df,mBACzB,7BA6D4C;KA7DpC,EAAE,aAAa,pBA8DK,mBArD3B,KAAK;AAAK;IARZ;;;;;;;;oBAQc;AAwGf,SAAS,sBAAsB,CAAC,WAAwB;AAAK,IAC3D,IAAI,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC;AACxC,IAAC,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;AAC1C,QAAG,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC;AACjC,KAAE;AACF,IAAC,IAAI,CAAC,MAAM,EAAE;AACd,QAAG,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,EAAE;AACtD,YAAK,MAAM,KAAK,CAAC,oDAAoD,CAAC,CAAC;AACvE,SAAI;AAAE,aAAI;AACV,YAAK,OAAO,CAAC,CAAC,CAAC;AACf,SAAI;AACJ,KAAE;AAAE,SAAI,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;AAC/D,QAAG,OAAO,oBAAoB,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAE,CAAC,CAAC;AACnE,KAAE;AAAE,SAAI;AACR;AACK,QAAF,OAAO,CAAC,CAAC;AACZ,KAAE;AACF,CAAA;AAED,SAAS,aAAa,CAAC,OAAoB;AAC1C,IAAC,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;AACrC,IAAC,OAAO,CAAC,EAAE,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,CAAC,sBAAsB,OAAK,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,CAAC,UAAU,EAAC,CAAC,CAAC;AAC3F,CAAA;AACA;ACvbD;AACC;AACC;AAEF;AAAI;AACC;AAEH;AAmBF;AACC;AACC;AACC;AACC;AAEH;AASD,MAAa,iBAA4B,SAAQ,WAAiB;AAC/D,IAeD,YAAsB,WAAoC,EACpC,KAAoB,EACpB,QAAyB;AAChD,QAAG,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;AAC7B,QAJuB,gBAAW,GAAX,WAAW,CAAyB;AAC5D,QAAwB,UAAK,GAAL,KAAK,CAAe;AAC5C,QAAwB,aAAQ,GAAR,QAAQ,CAAiB;AAAE;AAEe;AACY;AACZ;AACvB,QACvC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AACxE,KAAE;AAEH,IAAE,kBAAkB;AACnB,QAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACxE,QAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,KAAK,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;AAC/F,YAAK,MAAM,mCAAmC,EAAE,CAAC;AACjD,SAAI;AACJ,QAAG,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvE,QAAG,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;AACrC,YAAK,IAAI,CAAC,mBAAmB,CAAC,aAAoB,CAAC,CAAC;AACpD,SAAI;AAAE,aAAI,IAAI,YAAY,CAAC,aAAa,CAAC,EAAE;AAC3C,YAAK,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACnD,iBAAQ,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;AAC9D,SAAI;AACJ,QAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC3D,aAAQ,SAAS,CAAC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;AACpD,KAAE;AAEH;AACG;AACG,IAAJ,QAAQ;AACT,QAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;AACpB,KAAE;AAEH,IAAE,SAAS;AACV,QAAG,KAAK,CAAC,SAAS,EAAE,CAAC;AACrB,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AACjB,QAAG,KAAK,CAAC,WAAW,EAAE,CAAC;AACvB,KAAE;AAEH;AACG,IAAS,mBAAmB,CAAC,QAAc;AAAK,QAC/C,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AACxC,QAAG,IAAI,QAAQ,EAAE;AACjB,YAAK,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC/B,SAAI;AACJ,QAAG,IAAI,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE;AACjC,YAAK,MAAM,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;AAChD,YAAK,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/F,SAAI;AAAE,aAAI;AACV;AACO,YAAF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC/B,SAAI;AACJ,KAAE;AAEH;AACG,IAAS,MAAM;AAAM,QACpB,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AACxC,QAAG,IAAI,MAAM,EAAE;AACf,YAAK,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;AAClC,YAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC/B,SAAI;AACJ,KAAE;AAEH;AACG,IAAO,cAAc;AACvB,QAAG,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;AAEpC;AACK;AACK,QAAN,OAAO,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;AACpF,KAAE;AACF;+CAnGA,SAAS,SAAC,mBACT,QAAQ,EAAE,sBAAsB,mBAChC,QAAQ,EAAE,mBAAmB,mBAC7B,MAAM,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC;OACxC,SAAS,EAAE,uBACT,EAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,iBAAiB,EAAC,uBACtD,EAAC,OAAO,EAAE,yBAAyB,EAAE,WAAW,EAAE,iBAAiB,EAAC;AACrE,eACF;;;;;;;kDACK;AAAE;AAA4C,YA7BlD,UAAU;AACT,YAUK,OAAO;AAAK,YATlB,eAAe;AACf;AAAI;AAGE,yBAgCL,eAAe,SAAC,iBAAiB,EAAE;AACrC;AACiB;AAGV,oBAFJ,WAAW,EAAE,IAAI;AACpB,iBAAE;AACE;;;;;;;;;;;;;;;;;;;oBAAE;AAAE;ACvDT;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAOD;AACA,MAAM,cAAc,GAAG,eAAe,CAAC;AAEvC;AACC;AACC;AACC;AAIH,MAAa,kBAAkB;AAAI,IAyBjC,YAAoB,SAA4B,EAC5B,KAAoB,EACpB,QAAiC,EACrB,IAAoB;AACrD,QAJqB,cAAS,GAAT,SAAS,CAAmB;AAClD,QAAsB,UAAK,GAAL,KAAK,CAAe;AAC1C,QAAsB,aAAQ,GAAR,QAAQ,CAAyB;AACvD,QAAkC,SAAI,GAAJ,IAAI,CAAgB;AAAE;AAGxB,QA1BtB,eAAU,GAAG,IAAI,OAAO,EAAQ,CAAC;AAE3C;AACO,QAAL,gBAAW,GAAG,IAAI,CAAC;AAErB,QAaE,YAAO,GAAW,EAAE,CAAC;AAEvB,QAII,IAAI,CAAC,WAAW,EAAE,CAAC;AACtB,QAAG,IAAI,IAAI,EAAE;AACb,YAAK,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1F,SAAI;AAEL;AACK;AACK;AACK,QAAX,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAC9D,KAAE;AAEH;AAKW,IAlCT,IACI,KAAK,KAAa,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;AAC5C,IAAC,IAAI,KAAK,CAAC,KAAa,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;AACzD;AAAS;AAG2C;AACI;AACzD,IACE,IACI,MAAM,KAAsB,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE;AACvD,IAAC,IAAI,MAAM,CAAC,MAAuB,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE;AACtE,IAiBC,WAAW;AACZ,QAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AAC9B,KAAE;AAEH;AACG,IAAD,cAAc;AAAM,QAClB,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ;AAC5E,cAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;AAC3D,cAAO,IAAI,CAAC;AACZ,QAAG,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;AAC/D,QAAG,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;AAC1F,KAAE;AAEH,IAAE,WAAW,CAAC,WAAW,GAAG,KAAK;AAChC,QAAG,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAE1C,QAAI,IAAI,OAAO,KAAK,IAAI,CAAC,eAAe,IAAI,WAAW,EAAE;AACxD,YAAK,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;AACjD,YAAK,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,GAAG,cAAc,GAAG,aAAa,CAAC;AACjG,YAAK,MAAM,SAAS,GAAG,WAAW,KAAK,aAAa,GAAG,cAAc,GAAG,aAAa,CAAC;AACtF,YAAK,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,OAAO,IAAI,EAAE,CAAC;AAChD,YAAK,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;AACnC,YAAK,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;AACpC,SAAI;AACJ,KAAE;AAEH;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAN,cAAc,CAAC,KAAa;AACvC;AACK;AACK;AACK,QAAZ,IAAI,CAAC,MAAM,GAAG,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAE,CAAC;AACpD,QAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AACtB,KAAE;AAEH;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAN,eAAe,CAAC,MAAuB;AAClD,QAAG,IAAI,KAAK,GAAG,MAAM,CAAC;AACtB,QAAG,IAAI,KAAK,GAAG,IAAI,CAAC;AAErB,QAAI,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;AACnC,YAAK,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AAChD,YAAK,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACtB,YAAK,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;AAC/B,SAAI;AAEL,QAAI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AAC5B,QAAG,IAAI,CAAC,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;AAC9C,QAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AACtB,KAAE;AAEH;gDAzGC,SAAS,SAAC,mBACT,QAAQ,EAAE,sBAAsB,gBACjC;kOACK;AAAE;AAA6C,YAZpC,WAAW;AAAK,YAAzB,OAAO;AAAK,YAHD,UAAU;AAAK,YAF1B,cAAc,uBA6CP,QAAQ;AAAO;AAAI;AACnB,oBAlBZ,KAAK,SAAC,oBAAoB;AACvB,qBAQH,KAAK,SAAC,0BAA0B;AAC9B;;;;;;;;;;;;;;oBAAE;AAAE;AC9CT;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAKD;AACC;AACC;AAEF,MAAa,iBAAiB;AAAI,IAOhC,YAAsB,KAAoB,EACpB,SAA4B;AACpD,QAFwB,UAAK,GAAL,KAAK,CAAe;AAC5C,QAAwB,cAAS,GAAT,SAAS,CAAmB;AAAE,QAH1C,eAAU,GAAG,KAAK,CAAC;AAE/B,KACwD;AAExD;AAA0D,IARxD,IACI,SAAS,KAAc,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;AACrD,IAAC,IAAI,SAAS,CAAC,KAAc,IAAI,IAAI,CAAC,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;AAClF;AAGW;AAEgC;AAAwC;AACC;AAE7D,IAGtB,OAAO,CAAC,KAAY;AAAK,QACvB,IAAI,CAAC,SAAS;AACjB,cAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;AACpE,cAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAE3D,QAAI,KAAK,CAAC,eAAe,EAAE,CAAC;AAC3B,KAAE;AAEH;+CAzBC,SAAS,SAAC,EAAC,QAAQ,EAAE,qBAAqB,EAAC;;;+EACtC;AAAE;AACC,YAPD,OAAO;AAAK,YAAH,WAAW;AAAI;AAAI;AAGZ,wBAKrB,KAAK,SAAC,4BAA4B;AAC/B,sBAYH,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;AAC9B;;;;;;;;;;;;;;;;oBAAE;AAAE;ACjCT;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAQD,MAAM,qBAAqB,GAAG;AAC7B,IAAC,iBAAiB;AAClB,IAAC,cAAc;AACf,IAAC,kBAAkB;AACnB,IAAC,iBAAiB;AAClB,IAAC,OAAO;AACR,IAAC,WAAW;AACZ,IAAC,iBAAiB;AAClB,CAAA,CAAC;AAMF,MAAa,aAAa;AAC1B;2CALC,QAAQ,SAAC;QACR,OAAO,EAAE,qBAAqB,mBAC9B,YAAY,EAAE,qBAAqB,gBACpC;;;;;;;;0BACK;AAAE;AC9BR;AACC;AACC;AAEF;AAAI;AACC;AAGJ,GAFE;AAEH;ACRA;AACC;AACC,GAAC;AAEH;AAAE;AACmY","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\nimport {TreeControl} from './tree-control';\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nexport abstract class BaseTreeControl<T, K = T> implements TreeControl<T, K> {\n\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n  abstract getDescendants(dataNode: T): T[];\n\n  /** Expands all data nodes in the tree. */\n  abstract expandAll(): void;\n\n  /** Saved data node for `expandAll` action. */\n  dataNodes: T[];\n\n  /** A selection model with multi-selection to track expansion status. */\n  expansionModel: SelectionModel<K> = new SelectionModel<K>(true);\n\n  /**\n   * Returns the identifier by which a dataNode should be tracked, should its\n   * reference change.\n   *\n   * Similar to trackBy for *ngFor\n   */\n  trackBy?: (dataNode: T) => K;\n\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\n  getLevel: (dataNode: T) => number;\n\n  /**\n   * Whether the data node is expandable. Returns true if expandable.\n   * This is for flat tree node.\n   */\n  isExpandable: (dataNode: T) => boolean;\n\n  /** Gets a stream that emits whenever the given data node's children change. */\n  getChildren: (dataNode: T) => (Observable<T[]> | T[] | undefined | null);\n\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(dataNode: T): void {\n    this.expansionModel.toggle(this._trackByValue(dataNode));\n  }\n\n  /** Expands one single data node. */\n  expand(dataNode: T): void {\n    this.expansionModel.select(this._trackByValue(dataNode));\n  }\n\n  /** Collapses one single data node. */\n  collapse(dataNode: T): void {\n    this.expansionModel.deselect(this._trackByValue(dataNode));\n  }\n\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(dataNode: T): boolean {\n    return this.expansionModel.isSelected(this._trackByValue(dataNode));\n  }\n\n  /** Toggles a subtree rooted at `node` recursively. */\n  toggleDescendants(dataNode: T): void {\n    this.expansionModel.isSelected(this._trackByValue(dataNode)) ?\n        this.collapseDescendants(dataNode) :\n        this.expandDescendants(dataNode);\n  }\n\n  /** Collapse all dataNodes in the tree. */\n  collapseAll(): void {\n    this.expansionModel.clear();\n  }\n\n  /** Expands a subtree rooted at given data node recursively. */\n  expandDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n\n  /** Collapses a subtree rooted at given data node recursively. */\n  collapseDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n\n  protected _trackByValue(value: T|K): K {\n    return this.trackBy ? this.trackBy(value as T) : value as K;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Optional set of configuration that can be provided to the FlatTreeControl. */\nexport interface FlatTreeControlOptions<T, K> {\n  trackBy?: (dataNode: T) => K;\n}\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T, K = T> extends BaseTreeControl<T, K> {\n\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(\n      public getLevel: (dataNode: T) => number, public isExpandable: (dataNode: T) => boolean,\n      public options?: FlatTreeControlOptions<T, K>) {\n    super();\n\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n  getDescendants(dataNode: T): T[] {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results: T[] = [];\n\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n    for (let i = startIndex + 1;\n        i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n        i++) {\n      results.push(this.dataNodes[i]);\n    }\n    return results;\n  }\n\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Observable, isObservable} from 'rxjs';\nimport {take, filter} from 'rxjs/operators';\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Optional set of configuration that can be provided to the NestedTreeControl. */\nexport interface NestedTreeControlOptions<T, K> {\n  trackBy?: (dataNode: T) => K;\n}\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T, K = T> extends BaseTreeControl<T, K> {\n  /** Construct with nested tree function getChildren. */\n  constructor(\n      public getChildren: (dataNode: T) => (Observable<T[]>| T[] | undefined | null),\n      public options?: NestedTreeControlOptions<T, K>) {\n    super();\n\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n  }\n\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n  getDescendants(dataNode: T): T[] {\n    const descendants: T[] = [];\n\n    this._getDescendants(descendants, dataNode);\n    // Remove the node itself\n    return descendants.splice(1);\n  }\n\n  /** A helper function to get descendants recursively. */\n  protected _getDescendants(descendants: T[], dataNode: T): void {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach((child: T) => this._getDescendants(descendants, child));\n    } else if (isObservable(childrenNodes)) {\n      // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n      // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n      childrenNodes.pipe(take(1), filter(Boolean as () => boolean))\n          .subscribe(children => {\n            for (const child of children) {\n              this._getDescendants(descendants, child);\n            }\n          });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  Inject,\n  InjectionToken,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nexport const CDK_TREE_NODE_OUTLET_NODE = new InjectionToken<{}>('CDK_TREE_NODE_OUTLET_NODE');\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[cdkTreeNodeOutlet]'\n})\nexport class CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n  selector: '[cdkTreeNodeDef]',\n  inputs: [\n    'when: cdkTreeNodeDefWhen'\n  ],\n})\nexport class CdkTreeNodeDef<T> {\n  /**\n   * Function that should return true if this node template should be used for the provided node\n   * data and index. If left undefined, this node will be considered the default node template to\n   * use when no other when functions return true for the data.\n   * For every node, there must be at least one when function that passes or an undefined to\n   * default.\n   */\n  when: (index: number, nodeData: T) => boolean;\n\n  /** @docs-private */\n  constructor(public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {CollectionViewer, DataSource, isDataSource} from '@angular/cdk/collections';\nimport {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  isObservable,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {TreeControl} from './control/tree-control';\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {\n  getTreeControlFunctionsMissingError,\n  getTreeControlMissingError,\n  getTreeMissingMatchingNodeDefError,\n  getTreeMultipleDefaultNodeDefsError,\n  getTreeNoValidDataSourceError\n} from './tree-errors';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n  selector: 'cdk-tree',\n  exportAs: 'cdkTree',\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'cdk-tree',\n    'role': 'tree',\n  },\n  encapsulation: ViewEncapsulation.None,\n\n  // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n  // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n  // declared elsewhere, they are checked when their declaration points are checked.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class CdkTree<T, K = T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** Stores the node definition that does not have a when predicate. */\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n  /** Data subscription */\n  private _dataSubscription: Subscription | null;\n\n  /** Level of nodes */\n  private _levels: Map<T, number> = new Map<T, number>();\n\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n  @Input()\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n  /** The tree controller */\n  @Input() treeControl: TreeControl<T, K>;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n   * relative to the function to know if a node should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input() trackBy: TrackByFunction<T>;\n\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(CdkTreeNodeOutlet, {static: true}) _nodeOutlet: CdkTreeNodeOutlet;\n\n  /** The tree node template for the tree */\n  @ContentChildren(CdkTreeNodeDef, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n  //     Remove the MAX_VALUE in viewChange\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   */\n  viewChange =\n    new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  constructor(private _differs: IterableDiffers,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n    if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlMissingError();\n    }\n  }\n\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n\n    this.viewChange.complete();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n  }\n\n  ngAfterContentChecked() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n    if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n    this._defaultNodeDef = defaultNodeDefs[0];\n\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n\n\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n  //     and nested trees.\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n\n    // Remove the all dataNodes if there is now no data source\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\n\n    if (isDataSource(this._dataSource)) {\n      dataStream = this._dataSource.connect(this);\n    } else if (isObservable(this._dataSource)) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = observableOf(this._dataSource);\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n        .subscribe(data => this.renderNodeChanges(data));\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n  renderNodeChanges(data: T[] | ReadonlyArray<T>, dataDiffer: IterableDiffer<T> = this._dataDiffer,\n                    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n                    parentData?: T) {\n    const changes = dataDiffer.diff(data);\n    if (!changes) { return; }\n\n    changes.forEachOperation((item: IterableChangeRecord<T>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n        if (item.previousIndex == null) {\n          this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex!);\n          this._levels.delete(item.item);\n        } else {\n          const view = viewContainer.get(adjustedPreviousIndex!);\n          viewContainer.move(view!, currentIndex);\n        }\n      });\n\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n    if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\n\n    const nodeDef =\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n    if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMissingMatchingNodeDefError();\n    }\n\n    return nodeDef!;\n  }\n\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n    const node = this._getNodeDef(nodeData, index);\n\n    // Node context that will be provided to created embedded view\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level = this._levels.get(parentData)! + 1;\n    } else {\n      context.level = 0;\n    }\n    this._levels.set(nodeData, context.level);\n\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index);\n\n    // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n}\n\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n  selector: 'cdk-tree-node',\n  exportAs: 'cdkTreeNode',\n})\nexport class CdkTreeNode<T, K = T> implements DoCheck, FocusableOption, OnDestroy, OnInit {\n  /**\n   * The role of the tree node.\n   * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n   *   removed in a future version.\n   * @breaking-change 12.0.0 Remove this input\n   */\n  @Input() get role(): 'treeitem'|'group' { return 'treeitem'; }\n\n  set role(_role: 'treeitem'|'group') {\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.setAttribute('role', _role);\n  }\n\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n  static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Emits when the node's data has changed. */\n  _dataChanges = new Subject<void>();\n\n  private _parentNodeAriaLevel: number;\n\n  /** The tree node's data. */\n  get data(): T { return this._data; }\n  set data(value: T) {\n    if (value !== this._data) {\n      this._data = value;\n      this._setRoleFromData();\n      this._dataChanges.next();\n    }\n  }\n  protected _data: T;\n\n  get isExpanded(): boolean {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n\n  private _setExpanded(_expanded: boolean) {\n    this._isAriaExpanded = _expanded;\n    this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n  }\n\n  protected _isAriaExpanded: boolean;\n\n  get level(): number {\n   // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n   // aria-level off the parent node and use it as the level for this node (note aria-level is\n   // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n   return this._tree.treeControl.getLevel ?\n     this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n   }\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T, K>) {\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T, K>;\n    // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.classList.add('cdk-tree-node');\n    this.role = 'treeitem';\n  }\n\n  ngOnInit(): void {\n    this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n    this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n  }\n\n  ngDoCheck() {\n    // aria-expanded is be set here because the expanded state is stored in the tree control and\n    // the node isn't aware when the state is changed.\n    // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n    // TODO: move to host after View Engine deprecation\n    if (this.isExpanded != this._isAriaExpanded) {\n      this._setExpanded(this.isExpanded);\n    }\n  }\n\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n\n    this._dataChanges.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Focuses the menu item. Implements for FocusableOption. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  // TODO: role should eventually just be set in the component host\n  protected _setRoleFromData(): void {\n    if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    this.role = 'treeitem';\n  }\n}\n\nfunction getParentNodeAriaLevel(nodeElement: HTMLElement): number {\n  let parent = nodeElement.parentElement;\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return coerceNumberProperty(parent.getAttribute('aria-level')!);\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\n\nfunction isNodeElement(element: HTMLElement) {\n  const classList = element.classList;\n  return !!(classList?.contains('cdk-nested-tree-node') || classList?.contains('cdk-tree'));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  QueryList,\n} from '@angular/core';\nimport {isObservable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from './outlet';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\n@Directive({\n  selector: 'cdk-nested-tree-node',\n  exportAs: 'cdkNestedTreeNode',\n  inputs: ['role', 'disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkTreeNode, useExisting: CdkNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode}\n  ]\n})\nexport class CdkNestedTreeNode<T, K = T> extends CdkTreeNode<T, K>\n    implements AfterContentInit, DoCheck, OnDestroy, OnInit {\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n  protected _children: T[];\n\n  /** The children node placeholder. */\n  @ContentChildren(CdkTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T, K>,\n              protected _differs: IterableDiffers) {\n    super(_elementRef, _tree);\n    // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n  }\n\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n    if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes(childrenNodes as T[]);\n    } else if (isObservable(childrenNodes)) {\n      childrenNodes.pipe(takeUntil(this._destroyed))\n        .subscribe(result => this.updateChildrenNodes(result));\n    }\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n        .subscribe(() => this.updateChildrenNodes());\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    this._clear();\n    super.ngOnDestroy();\n  }\n\n  /** Add children dataNodes to the NodeOutlet */\n  protected updateChildrenNodes(children?: T[]): void {\n    const outlet = this._getNodeOutlet();\n    if (children) {\n      this._children = children;\n    }\n    if (outlet && this._children) {\n      const viewContainer = outlet.viewContainer;\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Clear the children dataNodes. */\n  protected _clear(): void {\n    const outlet = this._getNodeOutlet();\n    if (outlet) {\n      outlet.viewContainer.clear();\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Gets the outlet for the current node. */\n  private _getNodeOutlet() {\n    const outlets = this.nodeOutlet;\n\n    // Note that since we use `descendants: true` on the query, we have to ensure\n    // that we don't pick up the outlet of a child node by accident.\n    return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, Input, OnDestroy, Optional} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n  selector: '[cdkTreeNodePadding]',\n})\nexport class CdkTreeNodePadding<T, K = T> implements OnDestroy {\n  /** Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM. */\n  private _currentPadding: string|null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** CSS units used for the indentation value. */\n  indentUnits = 'px';\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('cdkTreeNodePadding')\n  get level(): number { return this._level; }\n  set level(value: number) { this._setLevelInput(value); }\n  _level: number;\n\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   */\n  @Input('cdkTreeNodePaddingIndent')\n  get indent(): number | string { return this._indent; }\n  set indent(indent: number | string) { this._setIndentInput(indent); }\n  _indent: number = 40;\n\n  constructor(private _treeNode: CdkTreeNode<T, K>,\n              private _tree: CdkTree<T, K>,\n              private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {\n    this._setPadding();\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n    }\n\n    // In Ivy the indentation binding might be set before the tree node's data has been added,\n    // which means that we'll miss the first render. We have to subscribe to changes in the\n    // data to ensure that everything is up to date.\n    _treeNode._dataChanges.subscribe(() => this._setPadding());\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n  _paddingIndent(): string|null {\n    const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n      ? this._tree.treeControl.getLevel(this._treeNode.data)\n      : null;\n    const level = this._level == null ? nodeLevel : this._level;\n    return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n\n  _setPadding(forceChange = false) {\n    const padding = this._paddingIndent();\n\n    if (padding !== this._currentPadding || forceChange) {\n      const element = this._element.nativeElement;\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n      const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n      element.style[paddingProp] = padding || '';\n      element.style[resetProp] = '';\n      this._currentPadding = padding;\n    }\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setLevelInput(value: number) {\n    // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n    // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n    // they set 0 explicitly.\n    this._level = coerceNumberProperty(value, null)!;\n    this._setPadding();\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setIndentInput(indent: number | string) {\n    let value = indent;\n    let units = 'px';\n\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n    this._setPadding();\n  }\n\n  static ngAcceptInputType_level: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, HostListener, Input} from '@angular/core';\n\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/**\n * Node toggle to expand/collapse the node.\n */\n@Directive({selector: '[cdkTreeNodeToggle]'})\nexport class CdkTreeNodeToggle<T, K = T> {\n  /** Whether expand/collapse the node recursively. */\n  @Input('cdkTreeNodeToggleRecursive')\n  get recursive(): boolean { return this._recursive; }\n  set recursive(value: boolean) { this._recursive = coerceBooleanProperty(value); }\n  protected _recursive = false;\n\n  constructor(protected _tree: CdkTree<T, K>,\n              protected _treeNode: CdkTreeNode<T, K>) {}\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _toggle(event: Event): void {\n    this.recursive\n      ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n      : this._tree.treeControl.toggle(this._treeNode.data);\n\n    event.stopPropagation();\n  }\n\n  static ngAcceptInputType_recursive: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {CdkTreeNodePadding} from './padding';\nimport {CdkTreeNodeToggle} from './toggle';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {CdkTreeNodeDef} from './node';\nimport {CdkNestedTreeNode} from './nested-node';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkNestedTreeNode,\n  CdkTreeNodeDef,\n  CdkTreeNodePadding,\n  CdkTreeNodeToggle,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeOutlet,\n];\n\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class CdkTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './control/base-tree-control';\nexport * from './control/flat-tree-control';\nexport * from './control/nested-tree-control';\nexport * from './control/tree-control';\nexport * from './nested-node';\nexport * from './node';\nexport * from './padding';\nexport * from './outlet';\nexport * from './tree';\nexport * from './tree-errors';\nexport * from './tree-module';\nexport * from './toggle';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}