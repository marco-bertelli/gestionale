{"version":3,"file":"cdk-layout.umd.js","sources":["../../../../../src/cdk/layout/layout-module.ts","../../../../../src/cdk/layout/media-matcher.ts","../../../../../src/cdk/layout/breakpoints-observer.ts","../../../../../src/cdk/layout/breakpoints.ts","../../../../../src/cdk/layout/public-api.ts","../../../../../src/cdk/layout/index.ts"],"names":["NgModule","Injectable","Platform","Subject","coerceArray","combineLatest","concat","take","skip","debounceTime","map","Observable","startWith","takeUntil","NgZone"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\n\n@NgModule({})\nexport class LayoutModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(private _platform: Platform) {\n    this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) :\n      noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this._platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query: string) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  } as any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {combineLatest, concat, Observable, Observer, Subject} from 'rxjs';\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\nimport {MediaMatcher} from './media-matcher';\n\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private _destroySubject = new Subject<void>();\n\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | readonly string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | readonly string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(\n      stateObservable.pipe(take(1)),\n      stateObservable.pipe(skip(1), debounceTime(0)));\n    return stateObservable.pipe(map(breakpointStates => {\n      const response: BreakpointState = {\n        matches: false,\n        breakpoints: {},\n      };\n      breakpointStates.forEach(({matches, query}) => {\n        response.matches = response.matches || matches;\n        response.breakpoints[query] = matches;\n      });\n      return response;\n    }));\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql = this._mediaMatcher.matchMedia(query);\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable((observer: Observer<MediaQueryList>) => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = (e: any) => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(\n      startWith(mql),\n      map(({matches}) => ({query, matches})),\n      takeUntil(this._destroySubject)\n    );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: readonly string[]): readonly string[] {\n  return queries.map(query => query.split(','))\n                .reduce((a1, a2) => a1.concat(a2))\n                .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n           '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {LayoutModule} from './layout-module';\nexport {BreakpointObserver, BreakpointState} from './breakpoints-observer';\nexport {Breakpoints} from './breakpoints';\nexport {MediaMatcher} from './media-matcher';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}