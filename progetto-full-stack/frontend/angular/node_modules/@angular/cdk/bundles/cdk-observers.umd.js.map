{"version":3,"file":"cdk-observers.umd.js","sources":["../../../../../src/cdk/observers/observe-content.ts","../../../../../src/cdk/observers/public-api.ts","../../../../../src/cdk/observers/index.ts"],"names":["Injectable","coerceElement","Observable","Subject","EventEmitter","coerceBooleanProperty","coerceNumberProperty","debounceTime","Directive","ElementRef","NgZone","Output","Input","NgModule"],"mappings":";;;;;;IAAA;AACC;AACK;AAEE;AAAQ;AACK;AAIT;AADZ,IAsBA;AACC;AACK;AAEC;AACP;AACyB,QADzB;AAAsC;AAC5B,QAAR,wCAAM,GAAN,UAAO,QAA0B;AAAK,YACpC,OAAO,OAAO,gBAAgB,KAAK,WAAW,GAAG,IAAI,GAAG,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAC1F,SAAE;;;;;gDACH;AACA;AAEuC;AAAW,iNAPxC;4DADTA,aAAU,SAAC,EAAC,pFACD,IAOZ;AARuB,EAAE,MAAM,EAAC,VAUhC;AACI,QAOF,yBAAoB,wBAAiD;AACvE,YADsB,6BAAwB,GAAxB,wBAAwB,CAAyB;AAAE;AAGN,YATzD,sBAAiB,GAAG,IAAI,GAAG,EAI/B,CAAC;AAEP,SAA2E;AAE3E,QAAE,qCAAW,GAAX;AAAe,YAAf,iBAEC;AAEH,YAHI,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;AAClF,SAAE;AAEF,QAYC,iCAAO,GAAP,UAAQ,YAA2C;AAAK,YAAxD,iBAYC;AAEH,YAbI,IAAM,OAAO,GAAGC,sBAAa,CAAC,YAAY,CAAC,CAAC;AAEhD,YAAI,OAAO,IAAIC,eAAU,CAAC,UAAC,QAAoC;AAAK,gBAC9D,IAAM,MAAM,GAAG,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAClD,gBAAK,IAAM,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAEtD,gBAAM,OAAO;AACN,oBAAC,YAAY,CAAC,WAAW,EAAE,CAAC;AAClC,oBAAO,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;AACvC,iBAAM,CAAC;AACP,aAAI,CAAC,CAAC;AACN,SAAE;AAEF;AACO;AACO;AAEC;AAAa,QAAnB,yCAAe,GAAf,UAAgB,OAAgB;AAAK,YAC3C,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AAC7C,gBAAK,IAAM,QAAM,GAAG,IAAIC,YAAO,EAAoB,CAAC;AACpD,gBAAK,IAAM,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,UAAA,SAAS,IAAI,OAAA,QAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAA,CAAC,CAAC;AAChG,gBAAK,IAAI,QAAQ,EAAE;AACnB,oBAAO,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE;AACjC,wBAAS,aAAa,EAAE,IAAI;AAC5B,wBAAS,SAAS,EAAE,IAAI;AACxB,wBAAS,OAAO,EAAE,IAAI;AACtB,qBAAQ,CAAC,CAAC;AACV,iBAAM;AACN,gBAAK,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,QAAQ,UAAA,EAAE,MAAM,UAAA,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;AACvE,aAAI;AAAE,iBAAI;AACV,gBAAK,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC,KAAK,EAAE,CAAC;AAClD,aAAI;AACJ,YAAG,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC,MAAM,CAAC;AACtD,SAAE;AAEF;AACO;AACO;AAEC;AAAa,QAAnB,2CAAiB,GAAjB,UAAkB,OAAgB;AAC3C,YAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AAC5C,gBAAK,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC,KAAK,EAAE,CAAC;AAClD,gBAAK,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC,KAAK,EAAE;AACtD,oBAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AACtC,iBAAM;AACN,aAAI;AACJ,SAAE;AAEF;AACO,QAAE,0CAAgB,GAAhB,UAAiB,OAAgB;AAC1C,YAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AAC5C,gBAAW,IAAA,KAAqB,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAE,EAAxD,QAAQ,cAAA,EAAE,MAAM,YAAwC,CAAC;AACrE,gBAAK,IAAI,QAAQ,EAAE;AACnB,oBAAO,QAAQ,CAAC,UAAU,EAAE,CAAC;AAC7B,iBAAM;AACN,gBAAK,MAAM,CAAC,QAAQ,EAAE,CAAC;AACvB,gBAAK,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC5C,aAAI;AACJ,SAAE;;;;;iFACH;AACA;AAG2B;AAAW,qNA1F5B;oDADTH,pDACW;IADD,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC,nCAEX,gBAO2B,uBAAuB;AAAI;AAElE,IA+ET;AACC;AACK;AAEC;AAIP;AAA0D,QA2BxD,2BAAoB,gBAAiC,EACjC,WAAoC,EACpC,OAAe;AACrC,YAHsB,qBAAgB,GAAhB,gBAAgB,CAAiB;AACvD,YAAsB,gBAAW,GAAX,WAAW,CAAyB;AAC1D,YAAsB,YAAO,GAAP,OAAO,CAAQ;AAAE;AAGQ,YA9BhB,UAAK,GAAG,IAAII,eAAY,EAAoB,CAAC;AAE5E,YAUU,cAAS,GAAG,KAAK,CAAC;AAE5B,YASU,yBAAoB,GAAwB,IAAI,CAAC;AAE3D,SAEyC;AAEzC,QAvBE,sBACI,uCAAQ;AAAK;AAAiB;AAEM;AAGnC;AAAiB,iBANtB,cACiB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;AACzC,iBAAA,UAAa,KAAU;AACxB,gBAAG,IAAI,CAAC,SAAS,GAAGC,8BAAqB,CAAC,KAAK,CAAC,CAAC;AACjD,gBAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;AAC5D,aAAE;AACD;AAEE;AAAgC,WAPO;AAC1C,QAOC,sBACI,uCAAQ;AAAK;AACY,iBAF7B,cACyB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;AACjD,iBAAA,UAAa,KAAa;AAC3B,gBAAG,IAAI,CAAC,SAAS,GAAGC,6BAAoB,CAAC,KAAK,CAAC,CAAC;AAChD,gBAAG,IAAI,CAAC,UAAU,EAAE,CAAC;AACrB,aAAE;AACD;AAEE;AAAgC,WAPe;AAClD,QAYC,8CAAkB,GAAlB;AAAe,YACb,IAAI,CAAC,IAAI,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AACrD,gBAAK,IAAI,CAAC,UAAU,EAAE,CAAC;AACvB,aAAI;AACJ,SAAE;AAEF,QAAC,uCAAW,GAAX;AAAe,YACb,IAAI,CAAC,YAAY,EAAE,CAAC;AACvB,SAAE;AAEF,QAAS,sCAAU,GAAV;AACV,YADU,iBAYP;AAEH,YAbI,IAAI,CAAC,YAAY,EAAE,CAAC;AACvB,YAAG,IAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAEnE;AACS;AACS;AACS;AACS,YAAhC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;AAC5B,gBAAD,KAAI,CAAC,oBAAoB;AAC9B,oBAAS,CAAC,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAACC,sBAAY,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,EAAE,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;AACnG,aAAI,CAAC,CAAC;AACN,SAAE;AAEF,QAAS,wCAAY,GAAZ;AAAe;AACN,YAAf,MAAA,IAAI,CAAC,oBAAoB,0CAAE,WAAW,GAAG;AAC5C,SAAE;;;;;;;;;;;;;;;;;oBACH;AACC;AAAmC,SA3D1B;sDAJTC,tDAIW;GAJF,SAAC,uBACT,nCAIC,gBA0BqC,eAAe;OA9B7C,EAAE,qBAAqB,9BA+B9B,gBAvJDC,aAAU;mBAyHV,QAAQ,3BAxHP,gBAIDC,SAAM;AAoHI,AAnHV;QAmH6B,oBAC9B,5BAnHD;AAEQ,wBAoHLC,SAAM,SAAC,mBAAmB;AAAQ,2BAMlCC,QAAK,SAAC,2BAA2B;AAC9B,2BAQHA,QAAK;AACN;AAmDF;AACwB,QADxB;AAA8B;;;;;;;;;;;gDACvB;AAAE;AAAiC,SADhC;AAAE;AAAE,IClNd;AACC;wBD4MAC,WAAQ,SAAC,5CC3MJ;AAEE;SD0MN,OAAO,EAAE,CAAC,iBAAiB,CAAC,uBAC5B,YAAY,EAAE,CAAC,3EC3MD;YD2MkB,CAAC,uBACjC,SAAS,EAAE,CAAC,hDC3MO;OD2MgB,CAAC,RCxMjB,OAFlB;AAEH;AAAE,ICRF;OFiNC,PEhNA;AAGA,OAFE;AAEH;AAAE;AACsB;AAAgD;AAAgE;AAAgD;AAAE;AAAoE;AAAE;AAAO","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_debounce: NumberInput;\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './observe-content';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}