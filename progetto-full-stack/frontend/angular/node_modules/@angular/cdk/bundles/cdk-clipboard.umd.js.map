{"version":3,"file":"cdk-clipboard.umd.js","sources":["../../../../../src/cdk/clipboard/pending-copy.ts","../../../../../src/cdk/clipboard/clipboard.ts","../../../../../src/cdk/clipboard/copy-to-clipboard.ts","../../../../../src/cdk/clipboard/clipboard-module.ts","../../../../../src/cdk/clipboard/public-api.ts","../../../../../src/cdk/clipboard/index.ts"],"names":["Injectable","Inject","DOCUMENT","InjectionToken","EventEmitter","Directive","NgZone","Optional","Input","Output","NgModule"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set a fixed position so the page layout\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n    styles.position = 'fixed';\n    styles.top = styles.opacity = '0';\n    styles.left = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement as HTMLOrSVGElement | null;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      if (textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {PendingCopy} from './pending-copy';\n\n\n/**\n * A service for copying text to the clipboard.\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private readonly _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  NgZone,\n  InjectionToken,\n  Inject,\n  Optional,\n  OnDestroy,\n} from '@angular/core';\nimport {Clipboard} from './clipboard';\nimport {PendingCopy} from './pending-copy';\n\n/** Object that can be used to configure the default options for `CdkCopyToClipboard`. */\nexport interface CdkCopyToClipboardConfig {\n  /** Default number of attempts to make when copying text to the clipboard. */\n  attempts?: number;\n}\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nexport const CKD_COPY_TO_CLIPBOARD_CONFIG =\n    new InjectionToken<CdkCopyToClipboardConfig>('CKD_COPY_TO_CLIPBOARD_CONFIG');\n\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n@Directive({\n  selector: '[cdkCopyToClipboard]',\n  host: {\n    '(click)': 'copy()',\n  }\n})\nexport class CdkCopyToClipboard implements OnDestroy {\n  /** Content to be copied. */\n  @Input('cdkCopyToClipboard') text: string = '';\n\n  /**\n   * How many times to attempt to copy the text. This may be necessary for longer text, because\n   * the browser needs time to fill an intermediate textarea element and copy the content.\n   */\n  @Input('cdkCopyToClipboardAttempts') attempts: number = 1;\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   */\n  @Output('cdkCopyToClipboardCopied') copied = new EventEmitter<boolean>();\n\n  /** Copies that are currently being attempted. */\n  private _pending = new Set<PendingCopy>();\n\n  /** Whether the directive has been destroyed. */\n  private _destroyed: boolean;\n\n  /** Timeout for the current copy attempt. */\n  private _currentTimeout: any;\n\n  constructor(\n    private _clipboard: Clipboard,\n    private _ngZone: NgZone,\n    @Optional() @Inject(CKD_COPY_TO_CLIPBOARD_CONFIG) config?: CdkCopyToClipboardConfig) {\n\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n\n  /** Copies the current text to the clipboard. */\n  copy(attempts: number = this.attempts): void {\n    if (attempts > 1) {\n      let remainingAttempts = attempts;\n      const pending = this._clipboard.beginCopy(this.text);\n      this._pending.add(pending);\n\n      const attempt = () => {\n        const successful = pending.copy();\n        if (!successful && --remainingAttempts && !this._destroyed) {\n          // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n          this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n        } else {\n          this._currentTimeout = null;\n          this._pending.delete(pending);\n          pending.destroy();\n          this.copied.emit(successful);\n        }\n      };\n      attempt();\n    } else {\n      this.copied.emit(this._clipboard.copy(this.text));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._currentTimeout) {\n      clearTimeout(this._currentTimeout);\n    }\n\n    this._pending.forEach(copy => copy.destroy());\n    this._pending.clear();\n    this._destroyed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkCopyToClipboard} from './copy-to-clipboard';\n\n@NgModule({\n  declarations: [CdkCopyToClipboard],\n  exports: [CdkCopyToClipboard],\n})\nexport class ClipboardModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './clipboard';\nexport * from './clipboard-module';\nexport * from './copy-to-clipboard';\nexport * from './pending-copy';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}