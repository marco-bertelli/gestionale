import { __decorate, __metadata } from "tslib";
import { Component, ViewEncapsulation, ChangeDetectionStrategy, ViewContainerRef, ComponentRef, Input, Output, EventEmitter, OnDestroy, } from '@angular/core';
import { OverlayRef, Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { merge } from 'rxjs';
import { filter } from 'rxjs/operators';
import { ESCAPE } from '../../free/utils/keyboard-navigation';
import { MdbTimePickerContentComponent } from './timepicker.content';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
var MdbTimePickerComponent = /** @class */ (function () {
    function MdbTimePickerComponent(_overlay, _vcr // private _cdRef: ChangeDetectorRef
    ) {
        this._overlay = _overlay;
        this._vcr = _vcr;
        this.autoClose = false;
        this.clearButton = 'clear';
        this.closeButton = 'close';
        this.okButton = 'ok';
        this.rounding = 1;
        this.twelveHour = true;
        this.timeChange = new EventEmitter();
        this.cancel = new EventEmitter();
        this.done = new EventEmitter();
        this.show = new EventEmitter();
        this._value = '12:00AM';
        this._selectionChange$ = new Subject();
        this.onChangeCb = function () { };
        this.onTouchedCb = function () { };
    }
    MdbTimePickerComponent.prototype._patchInputValues = function () {
        this._contentRef.instance.picker = this;
        this._contentRef.instance.autoClose = this.autoClose;
        this._contentRef.instance.clearButton = this.clearButton;
        this._contentRef.instance.closeButton = this.closeButton;
        this._contentRef.instance.okButton = this.okButton;
        this._contentRef.instance.rounding = this.rounding;
        this._contentRef.instance.twelveHour = this.twelveHour;
        this._contentRef.instance.value = this._timeToObj(this._value);
        if (this.max) {
            this._contentRef.instance.max = this._timeToObj(this.max);
        }
        if (this.min) {
            this._contentRef.instance.min = this._timeToObj(this.min);
        }
    };
    MdbTimePickerComponent.prototype._timeToObj = function (time) {
        var round = function (x, roundBy) {
            return x % roundBy < Math.round(roundBy / 2)
                ? x % roundBy === 0
                    ? x
                    : Math.ceil(x / roundBy) * roundBy
                : Math.floor(x / roundBy) * roundBy;
        };
        function toString(val) {
            return val < 10 ? "0" + val : "" + val;
        }
        var hour = Number(time.split(':')[0]);
        var minute = Number(time.split(':')[1].match(/\d+/g));
        var ampm = time.match(/AM|PM/) || [''];
        if (this.rounding) {
            minute = round(minute, this.rounding);
        }
        return {
            h: toString(hour),
            m: toString(minute),
            ampm: ampm[0],
        };
    };
    MdbTimePickerComponent.prototype.open = function () {
        var overlayRef = this._overlayRef;
        if (!overlayRef) {
            this._portal = new ComponentPortal(MdbTimePickerContentComponent, this._vcr);
            overlayRef = this._overlay.create(this._getOverlayConfig());
            this._overlayRef = overlayRef;
        }
        if (overlayRef && this._overlayRef && !overlayRef.hasAttached()) {
            this._contentRef = this._overlayRef.attach(this._portal);
            this._patchInputValues();
            this._listenToOutsideClick();
        }
        this._emitTimeShowEvent(this._timeToObj(this._value));
    };
    MdbTimePickerComponent.prototype.close = function (doneClicked, value) {
        if (this._overlayRef && this._overlayRef.hasAttached()) {
            if (!doneClicked) {
                this._emitTimeCancelEvent(value || this._timeToObj(this._value));
            }
        }
        this._destroyOverlay();
    };
    MdbTimePickerComponent.prototype._emitTimeChangeEvent = function (value) {
        this.timeChange.emit({ status: 'change', value: value });
    };
    MdbTimePickerComponent.prototype._emitTimeCancelEvent = function (value) {
        this.cancel.emit({ status: 'cancel', value: value });
    };
    MdbTimePickerComponent.prototype._emitTimeDoneEvent = function (value) {
        var h = value.h, m = value.m, ampm = value.ampm;
        this.done.emit({ status: 'done', value: value });
        this._selectionChange$.next(this.twelveHour ? h + ":" + m + ampm : h + ":" + m);
    };
    MdbTimePickerComponent.prototype._emitTimeShowEvent = function (value) {
        this.show.emit({ status: 'open', value: value });
    };
    MdbTimePickerComponent.prototype._setValue = function (value) {
        if (value) {
            this._value = value;
        }
        else {
            this._value = '12:00AM';
        }
    };
    MdbTimePickerComponent.prototype.setInput = function (input) {
        var _this = this;
        this.input = input;
        input._valueChange.subscribe(function (val) {
            var match = val.match(/\d\d:\d\d(AM|PM)?/gi);
            if (match) {
                _this._value = match[0];
            }
            else {
                _this._value = '12:00AM';
            }
        });
    };
    MdbTimePickerComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCb = fn;
    };
    MdbTimePickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCb = fn;
    };
    MdbTimePickerComponent.prototype._getOverlayConfig = function () {
        var positionStrategy = this._overlay
            .position()
            .global()
            .centerHorizontally()
            .centerVertically();
        var overlayConfig = new OverlayConfig({
            hasBackdrop: true,
            scrollStrategy: this._overlay.scrollStrategies.block(),
            positionStrategy: positionStrategy,
        });
        return overlayConfig;
    };
    MdbTimePickerComponent.prototype._destroyOverlay = function () {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
    };
    MdbTimePickerComponent.prototype._listenToOutsideClick = function () {
        var _this = this;
        if (this._overlayRef) {
            merge(this._overlayRef.backdropClick(), this._overlayRef.detachments(), this._overlayRef.keydownEvents().pipe(filter(function (event) {
                // Closing on alt + up is only valid when there's an input associated with the datepicker.
                // tslint:disable-next-line: deprecation
                return event.keyCode === ESCAPE;
            }))).subscribe(function (event) {
                if (event) {
                    event.preventDefault();
                }
                _this.close();
                _this._destroyOverlay();
            });
        }
    };
    MdbTimePickerComponent.prototype.ngOnDestroy = function () {
        this._destroyOverlay();
    };
    MdbTimePickerComponent.ctorParameters = function () { return [
        { type: Overlay },
        { type: ViewContainerRef // private _cdRef: ChangeDetectorRef
         }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTimePickerComponent.prototype, "autoClose", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTimePickerComponent.prototype, "clearButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTimePickerComponent.prototype, "closeButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MdbTimePickerComponent.prototype, "max", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MdbTimePickerComponent.prototype, "min", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTimePickerComponent.prototype, "okButton", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], MdbTimePickerComponent.prototype, "rounding", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTimePickerComponent.prototype, "twelveHour", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MdbTimePickerComponent.prototype, "timeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MdbTimePickerComponent.prototype, "cancel", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MdbTimePickerComponent.prototype, "done", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MdbTimePickerComponent.prototype, "show", void 0);
    MdbTimePickerComponent = __decorate([ __metadata("design:paramtypes", [Overlay,
            ViewContainerRef // private _cdRef: ChangeDetectorRef
        ])
    ], MdbTimePickerComponent);
MdbTimePickerComponent.ɵfac = function MdbTimePickerComponent_Factory(t) { return new (t || MdbTimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
MdbTimePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MdbTimePickerComponent, selectors: [["mdb-timepicker"]], inputs: { autoClose: "autoClose", clearButton: "clearButton", closeButton: "closeButton", okButton: "okButton", rounding: "rounding", twelveHour: "twelveHour", max: "max", min: "min" }, outputs: { timeChange: "timeChange", cancel: "cancel", done: "done", show: "show" }, exportAs: ["mdbTimePicker"], decls: 0, vars: 0, template: function MdbTimePickerComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTimePickerComponent, [{
        type: Component,
        args: [{
                template: '',
                selector: 'mdb-timepicker',
                exportAs: 'mdbTimePicker',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ViewContainerRef }]; }, { autoClose: [{
            type: Input
        }], clearButton: [{
            type: Input
        }], closeButton: [{
            type: Input
        }], okButton: [{
            type: Input
        }], rounding: [{
            type: Input
        }], twelveHour: [{
            type: Input
        }], timeChange: [{
            type: Output
        }], cancel: [{
            type: Output
        }], done: [{
            type: Output
        }], show: [{
            type: Output
        }], max: [{
            type: Input
        }], min: [{
            type: Input
        }] }); })();
    return MdbTimePickerComponent;
}());
export { MdbTimePickerComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,