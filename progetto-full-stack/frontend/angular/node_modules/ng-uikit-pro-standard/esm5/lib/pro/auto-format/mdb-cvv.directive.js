import { __decorate, __metadata } from "tslib";
import { Directive, HostListener, HostBinding } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var MdbCvvDirective = /** @class */ (function () {
    function MdbCvvDirective() {
        this.maxLength = '4';
    }
    MdbCvvDirective.prototype.onInput = function (event) {
        this.formatInput(event);
    };
    MdbCvvDirective.prototype.formatInput = function (event) {
        var input = event.target.value;
        var newValue = this.getFormattedValue(input);
        event.target.value = newValue;
    };
    MdbCvvDirective.prototype.getFormattedValue = function (value) {
        value = this.removeNonDigits(value);
        return value;
    };
    MdbCvvDirective.prototype.removeNonDigits = function (value) {
        return value.replace(/\D/g, '');
    };
    __decorate([
        HostBinding('attr.maxLength'),
        __metadata("design:type", Object)
    ], MdbCvvDirective.prototype, "maxLength", void 0);
    __decorate([
        HostListener('input', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MdbCvvDirective.prototype, "onInput", null);
MdbCvvDirective.ɵfac = function MdbCvvDirective_Factory(t) { return new (t || MdbCvvDirective)(); };
MdbCvvDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbCvvDirective, selectors: [["", "mdbCvv", ""]], hostVars: 1, hostBindings: function MdbCvvDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MdbCvvDirective_input_HostBindingHandler($event) { return ctx.onInput($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("maxLength", ctx.maxLength);
    } } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbCvvDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbCvv]'
            }]
    }], function () { return []; }, { maxLength: [{
            type: HostBinding,
            args: ['attr.maxLength']
        }], onInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }] }); })();
    return MdbCvvDirective;
}());
export { MdbCvvDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWN2di5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL2F1dG8tZm9ybWF0L21kYi1jdnYuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBS3JFO0FBRW9CLElBRnBCO0FBQThCLFFBRUcsY0FBUyxHQUFHLEdBQUcsQ0FBQztBQUVqRCxJQW1CQSxDQUFDO0FBQ0EsSUFuQkMsaUNBQU8sR0FBUCxVQUFRLEtBQVU7QUFDbkIsUUFBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLElBQUMsQ0FBQztBQUVGLElBQUMscUNBQVcsR0FBWCxVQUFZLEtBQVU7QUFDdkIsUUFBRyxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNwQyxRQUFHLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRCxRQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztBQUNqQyxJQUFDLENBQUM7QUFFRixJQUFDLDJDQUFpQixHQUFqQixVQUFrQixLQUFhO0FBQ2hDLFFBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkMsUUFBRyxPQUFPLEtBQUssQ0FBQztBQUNoQixJQUFDLENBQUM7QUFFRixJQUFDLHlDQUFlLEdBQWYsVUFBZ0IsS0FBYTtBQUM5QixRQUFHLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkMsSUFBQyxDQUFDO0FBRUgsSUF0QmlDO0FBQWMsUUFBNUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDO0FBQUc7QUFFUixzREFGc0I7QUFFaEQsSUFDQztBQUFjLFFBRGIsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2xDO0FBQ3NCO0FBSVY7QUFDVyxrREFKdEI7S0FQVSxlQUFlLHlCQUgzQixTQUFTLENBQUMsZUFDVCxRQUFRLEVBQUUsVUFBVTtDQUNyQixDQUFDLFNBQ1csZUFBZSxDQXVCM0I7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBRSxJQURGLHNCQUFDO0FBQ0MsQ0FERCxBQXZCRCxJQXVCQzs7QUE1QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFxQkEsQUFBQSxBQWxCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXBCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFQQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXVCQSxBQUFBLEFBQUEsQUFBQSxBQXZCQSxBQXVCQSxBQXZCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttZGJDdnZdJyxcbn0pXG5leHBvcnQgY2xhc3MgTWRiQ3Z2RGlyZWN0aXZlIHtcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIubWF4TGVuZ3RoJykgbWF4TGVuZ3RoID0gJzQnO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JywgWyckZXZlbnQnXSlcbiAgb25JbnB1dChldmVudDogYW55KSB7XG4gICAgdGhpcy5mb3JtYXRJbnB1dChldmVudCk7XG4gIH1cblxuICBmb3JtYXRJbnB1dChldmVudDogYW55KSB7XG4gICAgY29uc3QgaW5wdXQgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLmdldEZvcm1hdHRlZFZhbHVlKGlucHV0KTtcbiAgICBldmVudC50YXJnZXQudmFsdWUgPSBuZXdWYWx1ZTtcbiAgfVxuXG4gIGdldEZvcm1hdHRlZFZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB2YWx1ZSA9IHRoaXMucmVtb3ZlTm9uRGlnaXRzKHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZW1vdmVOb25EaWdpdHModmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cXEQvZywgJycpO1xuICB9XG59XG4iXX0=