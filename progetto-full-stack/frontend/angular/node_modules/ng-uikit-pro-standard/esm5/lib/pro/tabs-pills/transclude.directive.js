import { __decorate, __metadata } from "tslib";
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var NgTranscludeDirective = /** @class */ (function () {
    function NgTranscludeDirective(viewRef) {
        this.viewRef = viewRef;
    }
    Object.defineProperty(NgTranscludeDirective.prototype, "mdbNgTransclude", {
        get: function () {
            return this._ngTransclude;
        },
        set: function (templateRef) {
            this._ngTransclude = templateRef;
            if (templateRef) {
                this.viewRef.createEmbeddedView(templateRef);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgTranscludeDirective.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", TemplateRef),
        __metadata("design:paramtypes", [TemplateRef])
    ], NgTranscludeDirective.prototype, "mdbNgTransclude", null);
    NgTranscludeDirective = __decorate([ __metadata("design:paramtypes", [ViewContainerRef])
    ], NgTranscludeDirective);
NgTranscludeDirective.ɵfac = function NgTranscludeDirective_Factory(t) { return new (t || NgTranscludeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
NgTranscludeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgTranscludeDirective, selectors: [["", "mdbNgTransclude", ""]], inputs: { mdbNgTransclude: "mdbNgTransclude" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTranscludeDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbNgTransclude]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { mdbNgTransclude: [{
            type: Input
        }] }); })();
    return NgTranscludeDirective;
}());
export { NgTranscludeDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNjbHVkZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL3RhYnMtcGlsbHMvdHJhbnNjbHVkZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLaEY7QUFDcUIsSUFpQm5CLCtCQUFtQixPQUF5QjtBQUM3QyxRQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQzFCLElBQUMsQ0FBQztBQUNGLElBZEMsc0JBQVcsa0RBQWU7QUFBSyxhQU8vQjtBQUFlLFlBQ2IsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQzdCLFFBQUMsQ0FBQztBQUVGLGFBWEMsVUFBMkIsV0FBNkI7QUFDekQsWUFBRyxJQUFJLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQztBQUNwQyxZQUFHLElBQUksV0FBVyxFQUFFO0FBQ3BCLGdCQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbEQsYUFBSTtBQUNKLFFBQUMsQ0FBQztBQUVGO0FBQTJCO0FBQ3ZCLE9BSEY7QUFFSDtBQUNnQixnQkFHYyxnQkFBZ0I7QUFDOUM7QUFBVyxJQVpUO0FBQWMsUUFEYixLQUFLLEVBQUU7QUFDUixrQ0FBd0MsV0FBVztBQUFJLHlDQUFmLFdBQVc7QUFBSSxnRUFLdEQ7QUFFRixJQWRZLHFCQUFxQix5QkFIakMsU0FBUyxDQUFDLGVBQ1QsUUFBUSxFQUFFLDdDQUVILGtDQWtCcUIsZ0JBQWdCO1VBcEJmLFdBQzlCLENBQUMsdEJBb0JGLE9BbkJhLHFCQUFxQixDQXFCakM7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBRSxJQURGLDRCQUFDO0FBQ0MsQ0FERCxBQXJCRCxJQXFCQzs7QUExQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBa0JBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWJBLEFBQUEsQUFBQSxBQU9BLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVRBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQVhBLEFBREEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQVpBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFtQkEsQUFBQSxBQWxCQSxBQUFBLEFBcUJBLEFBQUEsQUFBQSxBQUFBLEFBckJBLEFBcUJBLEFBckJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWRiTmdUcmFuc2NsdWRlXSdcbn0pXG5leHBvcnQgY2xhc3MgTmdUcmFuc2NsdWRlRGlyZWN0aXZlIHtcbiAgcHVibGljIHZpZXdSZWY6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgcHJvdGVjdGVkIF92aWV3UmVmOiBWaWV3Q29udGFpbmVyUmVmO1xuICBwcm90ZWN0ZWQgX25nVHJhbnNjbHVkZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IG1kYk5nVHJhbnNjbHVkZSh0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge1xuICAgIHRoaXMuX25nVHJhbnNjbHVkZSA9IHRlbXBsYXRlUmVmO1xuICAgIGlmICh0ZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy52aWV3UmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZVJlZik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCBtZGJOZ1RyYW5zY2x1ZGUoKTogVGVtcGxhdGVSZWY8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX25nVHJhbnNjbHVkZTtcbiAgfVxuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih2aWV3UmVmOiBWaWV3Q29udGFpbmVyUmVmKSB7XG4gICAgdGhpcy52aWV3UmVmID0gdmlld1JlZjtcbiAgfVxufVxuIl19