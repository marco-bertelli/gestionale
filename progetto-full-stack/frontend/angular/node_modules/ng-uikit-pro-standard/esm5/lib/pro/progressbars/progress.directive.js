import { __decorate, __metadata } from "tslib";
import { Directive, HostBinding, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var ProgressDirective = /** @class */ (function () {
    function ProgressDirective() {
        this.addClass = true;
        this.bars = [];
        this._max = 100;
    }
    Object.defineProperty(ProgressDirective.prototype, "max", {
        /** maximum total value of progress element */
        get: function () {
            return this._max;
        },
        set: function (v) {
            this._max = v;
            this.bars.forEach(function (bar) {
                bar.recalculatePercentage();
            });
        },
        enumerable: true,
        configurable: true
    });
    ProgressDirective.prototype.addBar = function (bar) {
        if (!this.animate) {
            bar.transition = 'none';
        }
        this.bars.push(bar);
    };
    ProgressDirective.prototype.removeBar = function (bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
    };
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ProgressDirective.prototype, "animate", void 0);
    __decorate([
        HostBinding('attr.max'),
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], ProgressDirective.prototype, "max", null);
    __decorate([
        HostBinding('class.progress'),
        __metadata("design:type", Object)
    ], ProgressDirective.prototype, "addClass", void 0);
ProgressDirective.ɵfac = function ProgressDirective_Factory(t) { return new (t || ProgressDirective)(); };
ProgressDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ProgressDirective, selectors: [["mdbProgress"], ["", "mdbProgress", ""]], hostVars: 3, hostBindings: function ProgressDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("max", ctx.max);
        ɵngcc0.ɵɵclassProp("progress", ctx.addClass);
    } }, inputs: { max: "max", animate: "animate" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressDirective, [{
        type: Directive,
        args: [{ selector: 'mdbProgress, [mdbProgress]' }]
    }], function () { return []; }, { addClass: [{
            type: HostBinding,
            args: ['class.progress']
        }], max: [{
            type: HostBinding,
            args: ['attr.max']
        }, {
            type: Input
        }], animate: [{
            type: Input
        }] }); })();
    return ProgressDirective;
}());
export { ProgressDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL3Byby9wcm9ncmVzc2JhcnMvcHJvZ3Jlc3MuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzlEO0FBQ3FCLElBRHJCO0FBQWdDLFFBa0JRLGFBQVEsR0FBRyxJQUFJLENBQUM7QUFFeEQsUUFBUyxTQUFJLEdBQVUsRUFBRSxDQUFDO0FBRTFCLFFBQVksU0FBSSxHQUFHLEdBQUcsQ0FBQztBQUV2QixJQVVBLENBQUM7QUFDQSxJQTVCQyxzQkFBVyxrQ0FBRztBQUFLLFFBSG5CLDhDQUE4QztBQUMvQyxhQUVDO0FBQWUsWUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDcEIsUUFBQyxDQUFDO0FBRUYsYUFBQyxVQUFlLENBQVM7QUFDekIsWUFBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNqQixZQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBaUI7QUFBSyxnQkFDdkMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDakMsWUFBRyxDQUFDLENBQUMsQ0FBQztBQUNOLFFBQUMsQ0FBQztBQUVGO0FBQTJCO0FBQTRCLE9BVHJEO0FBRUgsSUFhUyxrQ0FBTSxHQUFiLFVBQWMsR0FBaUI7QUFBSyxRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUN0QixZQUFLLEdBQUcsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDO0FBQzdCLFNBQUk7QUFDSixRQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLElBQUMsQ0FBQztBQUVGLElBQVEscUNBQVMsR0FBaEIsVUFBaUIsR0FBaUI7QUFBSyxRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvQyxJQUFDLENBQUM7QUFFSCxJQWpDVztBQUFjLFFBQXRCLEtBQUssRUFBRTtBQUFHO0FBRU8sc0RBRmU7QUFFbEMsSUFHQztBQUFjLFFBRmIsV0FBVyxDQUFDLFVBQVUsQ0FBQztBQUN4QixRQUFDLEtBQUssRUFBRTtBQUNSO0FBQ2U7QUFJTixnREFIUjtBQUVGLElBT2dDO0FBQWMsUUFBNUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDO0FBQUc7QUFFZix1REFGb0M7S0FsQjNDLGlCQUFpQix5QkFEN0IsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLDRCQUE0QixFQUFFLENBQUM7RUFDekMsaUJBQWlCLENBa0M3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBRSxJQURGLHdCQUFDO0FBQ0MsQ0FERCxBQWxDRCxJQWtDQzs7QUF2Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQWtCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQUFBLEFBM0JBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFHQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBZUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUEvQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUdBLEFBU0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFsQkEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFrQ0EsQUFBQSxBQUFBLEFBQUEsQUFsQ0EsQUFrQ0EsQUFsQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEJhckNvbXBvbmVudCB9IGZyb20gJy4vYmFyLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ21kYlByb2dyZXNzLCBbbWRiUHJvZ3Jlc3NdJyB9KVxuZXhwb3J0IGNsYXNzIFByb2dyZXNzRGlyZWN0aXZlIHtcbiAgLyoqIGlmIGB0cnVlYCBjaGFuZ2luZyB2YWx1ZSBvZiBwcm9ncmVzcyBiYXIgd2lsbCBiZSBhbmltYXRlZCAobm90ZTogbm90IHN1cHBvcnRlZCBieSBCb290c3RyYXAgNCkgKi9cbiAgQElucHV0KCkgcHVibGljIGFuaW1hdGU6IGJvb2xlYW47XG5cbiAgLyoqIG1heGltdW0gdG90YWwgdmFsdWUgb2YgcHJvZ3Jlc3MgZWxlbWVudCAqL1xuICBASG9zdEJpbmRpbmcoJ2F0dHIubWF4JylcbiAgQElucHV0KClcbiAgcHVibGljIGdldCBtYXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4O1xuICB9XG5cbiAgcHVibGljIHNldCBtYXgodjogbnVtYmVyKSB7XG4gICAgdGhpcy5fbWF4ID0gdjtcbiAgICB0aGlzLmJhcnMuZm9yRWFjaCgoYmFyOiBCYXJDb21wb25lbnQpID0+IHtcbiAgICAgIGJhci5yZWNhbGN1bGF0ZVBlcmNlbnRhZ2UoKTtcbiAgICB9KTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MucHJvZ3Jlc3MnKSBwdWJsaWMgYWRkQ2xhc3MgPSB0cnVlO1xuXG4gIHB1YmxpYyBiYXJzOiBhbnlbXSA9IFtdO1xuXG4gIHByb3RlY3RlZCBfbWF4ID0gMTAwO1xuXG4gIHB1YmxpYyBhZGRCYXIoYmFyOiBCYXJDb21wb25lbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuYW5pbWF0ZSkge1xuICAgICAgYmFyLnRyYW5zaXRpb24gPSAnbm9uZSc7XG4gICAgfVxuICAgIHRoaXMuYmFycy5wdXNoKGJhcik7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlQmFyKGJhcjogQmFyQ29tcG9uZW50KTogdm9pZCB7XG4gICAgdGhpcy5iYXJzLnNwbGljZSh0aGlzLmJhcnMuaW5kZXhPZihiYXIpLCAxKTtcbiAgfVxufVxuIl19