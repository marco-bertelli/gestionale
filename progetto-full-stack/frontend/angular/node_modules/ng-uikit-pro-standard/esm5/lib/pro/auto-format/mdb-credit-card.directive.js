import { __decorate, __metadata } from "tslib";
import { Directive, HostListener, Input, HostBinding } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var MdbCreditCardDirective = /** @class */ (function () {
    function MdbCreditCardDirective() {
        this.standardPattern = /(\d{1,4})/g;
        this.defaultCard = {
            name: '',
            fullName: '',
            re: /\d{0,16}/,
            pattern: this.standardPattern,
            maxLength: 19,
            cvvLength: 3,
        };
        this.cards = [
            {
                name: 'visa',
                fullName: 'Visa',
                re: /^4\d{0,15}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'mastercard',
                fullName: 'Mastercard',
                re: /^(5[1-5]\d{0,2}|22[2-9]\d{0,1}|2[3-7]\d{0,2})\d{0,12}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'amex',
                fullName: 'American Express',
                re: /^3[47]\d{0,13}/,
                pattern: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
                maxLength: 15,
                cvvLength: 4,
            },
            {
                name: 'jcb',
                fullName: 'JCB',
                re: /^(?:35\d{0,2})\d{0,12}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'discover',
                fullName: 'Discover',
                re: /^(?:6011|65\d{0,2}|64[4-9]\d?)\d{0,12}/,
                pattern: this.standardPattern,
                maxLength: 16,
                cvvLength: 3,
            },
            {
                name: 'diners-club',
                fullName: 'Diners Club',
                re: /^3(?:0([0-5]|9)|[689]\d?)\d{0,11}/,
                pattern: this.standardPattern,
                maxLength: 14,
                cvvLength: 3,
            },
        ];
        this._separator = ' ';
    }
    Object.defineProperty(MdbCreditCardDirective.prototype, "additionalCards", {
        get: function () {
            return this._additionalCards;
        },
        set: function (cards) {
            this._additionalCards = cards;
            this.addCards(cards);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdbCreditCardDirective.prototype, "separator", {
        get: function () {
            return this._separator;
        },
        set: function (separator) {
            this._separator = separator;
        },
        enumerable: true,
        configurable: true
    });
    MdbCreditCardDirective.prototype.onInput = function (event) {
        this.formatInput(event);
    };
    MdbCreditCardDirective.prototype.formatInput = function (event) {
        var input = event.target.value;
        var formattedInput = this.getFormattedInput(input);
        event.target.value = formattedInput;
    };
    MdbCreditCardDirective.prototype.getFormattedInput = function (value) {
        value = this.removeNonDigits(value);
        var card = this.findCardByNumber(value);
        this.updateCurrentCardNames(card.name, card.fullName);
        var cardNumMaxLength;
        if (this.hasStandardPattern(card)) {
            var matches = value.match(card.pattern);
            if (matches === null) {
                return value;
            }
            cardNumMaxLength = card.maxLength + matches.length - 1;
            this.maxLength = cardNumMaxLength.toString();
            return matches.join(this.separator);
        }
        else {
            var results = card.pattern.exec(value);
            if (results === null) {
                return value;
            }
            results.shift();
            cardNumMaxLength = card.maxLength + results.length - 1;
            this.maxLength = cardNumMaxLength.toString();
            return results.filter(this.isMatch).join(this.separator);
        }
    };
    MdbCreditCardDirective.prototype.removeNonDigits = function (value) {
        return value.replace(/\D/g, '');
    };
    MdbCreditCardDirective.prototype.hasStandardPattern = function (card) {
        return card.pattern.toString() === this.standardPattern.toString();
    };
    MdbCreditCardDirective.prototype.isMatch = function (match) {
        return match !== undefined;
    };
    MdbCreditCardDirective.prototype.updateCurrentCardNames = function (name, fullName) {
        this.cardName = name;
        this.cardFullName = fullName;
    };
    MdbCreditCardDirective.prototype.findCardByNumber = function (value) {
        var cardType = this.cards.find(function (card) {
            return card.re.test(value);
        });
        if (!cardType) {
            return this.defaultCard;
        }
        return cardType;
    };
    MdbCreditCardDirective.prototype.addCards = function (newCards) {
        var _this = this;
        newCards.forEach(function (card) {
            _this.cards.push(card);
        });
    };
    __decorate([
        Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], MdbCreditCardDirective.prototype, "additionalCards", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MdbCreditCardDirective.prototype, "separator", null);
    __decorate([
        HostBinding('attr.maxLength'),
        __metadata("design:type", String)
    ], MdbCreditCardDirective.prototype, "maxLength", void 0);
    __decorate([
        HostListener('input', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MdbCreditCardDirective.prototype, "onInput", null);
    MdbCreditCardDirective = __decorate([ __metadata("design:paramtypes", [])
    ], MdbCreditCardDirective);
MdbCreditCardDirective.ɵfac = function MdbCreditCardDirective_Factory(t) { return new (t || MdbCreditCardDirective)(); };
MdbCreditCardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbCreditCardDirective, selectors: [["", "mdbCreditCard", ""]], hostVars: 1, hostBindings: function MdbCreditCardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MdbCreditCardDirective_input_HostBindingHandler($event) { return ctx.onInput($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("maxLength", ctx.maxLength);
    } }, inputs: { additionalCards: "additionalCards", separator: "separator" }, exportAs: ["mdbCreditCard"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbCreditCardDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbCreditCard]',
                exportAs: 'mdbCreditCard'
            }]
    }], function () { return []; }, { additionalCards: [{
            type: Input
        }], separator: [{
            type: Input
        }], onInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], maxLength: [{
            type: HostBinding,
            args: ['attr.maxLength']
        }] }); })();
    return MdbCreditCardDirective;
}());
export { MdbCreditCardDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,