import { __decorate, __metadata } from "tslib";
import { Directive, Input, forwardRef, ElementRef, EventEmitter, HostListener, OnInit, } from '@angular/core';
import { MdbTimePickerComponent } from './timepicker.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export var MDB_TIMEPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return MdbTimePickerDirective; }),
    multi: true,
};
var MdbTimePickerDirective = /** @class */ (function () {
    function MdbTimePickerDirective(el) {
        this.el = el;
        this._valueChange = new EventEmitter();
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    Object.defineProperty(MdbTimePickerDirective.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
            this._valueChange.emit(this._value);
            this.el.nativeElement.value = value;
        },
        enumerable: true,
        configurable: true
    });
    MdbTimePickerDirective.prototype.handleInput = function (event) {
        this.onChange(event.target.value);
        this._valueChange.emit(event.target.value);
    };
    MdbTimePickerDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.mdbTimePicker.setInput(this);
        this.mdbTimePicker._selectionChange$.subscribe(function (selectedValue) {
            _this.value = selectedValue;
            _this.onChange(selectedValue);
            _this.onTouched();
        });
    };
    MdbTimePickerDirective.prototype.writeValue = function (value) {
        if (value || value === '') {
            this.el.nativeElement.value = value;
            this.mdbTimePicker._selectionChange$.next(this._value);
        }
    };
    MdbTimePickerDirective.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    MdbTimePickerDirective.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    MdbTimePickerDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", MdbTimePickerComponent)
    ], MdbTimePickerDirective.prototype, "mdbTimePicker", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], MdbTimePickerDirective.prototype, "value", null);
    __decorate([
        HostListener('input', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MdbTimePickerDirective.prototype, "handleInput", null);
    MdbTimePickerDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], MdbTimePickerDirective);
MdbTimePickerDirective.ɵfac = function MdbTimePickerDirective_Factory(t) { return new (t || MdbTimePickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MdbTimePickerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbTimePickerDirective, selectors: [["", "mdbTimePicker", ""]], hostBindings: function MdbTimePickerDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("blur", function MdbTimePickerDirective_blur_HostBindingHandler($event) { return ctx.onTouched($event); })("change", function MdbTimePickerDirective_change_HostBindingHandler($event) { return ctx.onChange($event.target.value); })("input", function MdbTimePickerDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); });
    } }, inputs: { value: "value", mdbTimePicker: "mdbTimePicker" }, features: [ɵngcc0.ɵɵProvidersFeature([MDB_TIMEPICKER_VALUE_ACCESSOR])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTimePickerDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbTimePicker]',
                // tslint:disable-next-line: no-host-metadata-property
                host: { '(blur)': 'onTouched($event)', '(change)': 'onChange($event.target.value)' },
                providers: [MDB_TIMEPICKER_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { value: [{
            type: Input
        }], handleInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], mdbTimePicker: [{
            type: Input
        }] }); })();
    return MdbTimePickerDirective;
}());
export { MdbTimePickerDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,