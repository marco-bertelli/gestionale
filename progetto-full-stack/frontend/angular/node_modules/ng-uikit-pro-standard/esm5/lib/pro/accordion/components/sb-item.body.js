import { __decorate, __metadata, __param } from "tslib";
import { Component, ElementRef, ViewChild, Input, ContentChildren, QueryList, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, AfterContentInit, Optional, OnDestroy, } from '@angular/core';
import { state, style, trigger, transition, animate } from '@angular/animations';
import { RouterLinkWithHref, Router, NavigationEnd } from '@angular/router';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';

var _c0 = ["body"];
var _c1 = ["*"];
var SBItemBodyComponent = /** @class */ (function () {
    function SBItemBodyComponent(el, _cdRef, router) {
        this.el = el;
        this._cdRef = _cdRef;
        this.router = router;
        this.animationStateChange = new EventEmitter();
        this.id = "mdb-accordion-";
        this.height = '0';
        this._destroy$ = new Subject();
        this.expandAnimationState = 'collapsed';
        this.ariaLabelledBy = '';
    }
    SBItemBodyComponent.prototype.toggle = function (collapsed) {
        var _this = this;
        setTimeout(function () {
            collapsed
                ? (_this.expandAnimationState = 'collapsed')
                : (_this.expandAnimationState = 'expanded');
            _this._cdRef.markForCheck();
        }, 0);
    };
    SBItemBodyComponent.prototype.animationCallback = function () {
        this.animationStateChange.emit({
            state: this.expandAnimationState,
            accordionEl: this.el.nativeElement.parentElement.parentElement,
        });
    };
    SBItemBodyComponent.prototype.openSidenavOnActiveLink = function () {
        var _this = this;
        if (typeof window !== 'undefined' && window) {
            var pathStrategyUrl_1 = window.location.pathname;
            var hashStrategyUrl_1 = window.location.hash;
            var activeLink = this.routerLinks.find(function (link) {
                var params = link.href.split('?')[1];
                if (params) {
                    return (link.href.split('?')[0] === pathStrategyUrl_1 ||
                        link.href.split('?')[0] === hashStrategyUrl_1);
                }
                else {
                    return link.href === pathStrategyUrl_1 || link.href === hashStrategyUrl_1;
                }
            });
            var sbItem_1 = this.el.nativeElement.parentNode;
            if (activeLink) {
                setTimeout(function () {
                    _this.expandAnimationState = 'expanded';
                    if (sbItem_1) {
                        sbItem_1.classList.add('active');
                        sbItem_1.classList.remove('is-collapsed');
                    }
                    _this._cdRef.markForCheck();
                }, 10);
            }
            else if (this.expandAnimationState !== 'collapsed' && activeLink) {
                setTimeout(function () {
                    _this.expandAnimationState = 'collapsed';
                    if (sbItem_1) {
                        sbItem_1.classList.remove('active');
                        sbItem_1.classList.add('is-collapsed');
                    }
                    _this._cdRef.markForCheck();
                }, 10);
            }
        }
    };
    SBItemBodyComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.collapsed
                ? (_this.expandAnimationState = 'collapsed')
                : (_this.expandAnimationState = 'expanded');
            if (_this.router && _this.autoExpand) {
                _this.router.events
                    .pipe(takeUntil(_this._destroy$), filter(function (event) { return event instanceof NavigationEnd; }))
                    .subscribe(function () {
                    _this.openSidenavOnActiveLink();
                });
            }
        }, 0);
    };
    SBItemBodyComponent.prototype.ngOnDestroy = function () {
        this._destroy$.next();
        this._destroy$.unsubscribe();
    };
    SBItemBodyComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], SBItemBodyComponent.prototype, "customClass", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], SBItemBodyComponent.prototype, "animationStateChange", void 0);
    __decorate([
        ContentChildren(RouterLinkWithHref),
        __metadata("design:type", QueryList)
    ], SBItemBodyComponent.prototype, "routerLinks", void 0);
    __decorate([
        ViewChild('body', { static: true }),
        __metadata("design:type", ElementRef)
    ], SBItemBodyComponent.prototype, "bodyEl", void 0);
    SBItemBodyComponent = __decorate([ __param(2, Optional()),
        __metadata("design:paramtypes", [ElementRef,
            ChangeDetectorRef,
            Router])
    ], SBItemBodyComponent);
SBItemBodyComponent.ɵfac = function SBItemBodyComponent_Factory(t) { return new (t || SBItemBodyComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router, 8)); };
SBItemBodyComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SBItemBodyComponent, selectors: [["mdb-item-body"], ["mdb-accordion-item-body"]], contentQueries: function SBItemBodyComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, RouterLinkWithHref, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.routerLinks = _t);
    } }, viewQuery: function SBItemBodyComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.bodyEl = _t.first);
    } }, inputs: { customClass: "customClass" }, outputs: { animationStateChange: "animationStateChange" }, exportAs: ["sbItemBody"], ngContentSelectors: _c1, decls: 4, vars: 8, consts: [["role", "region", 1, "sb-item-body", 3, "id"], ["body", ""]], template: function SBItemBodyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("@expandBody.done", function SBItemBodyComponent_Template_div_animation_expandBody_done_0_listener() { return ctx.animationCallback(); });
        ɵngcc0.ɵɵelementStart(2, "div");
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("height", ctx.height);
        ɵngcc0.ɵɵproperty("@expandBody", ctx.expandAnimationState)("id", ctx.id);
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.ariaLabelledBy);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassMapInterpolate1("card-body ", ctx.customClass, "");
    } }, encapsulation: 2, data: { animation: [
            trigger('expandBody', [
                state('collapsed', style({ height: '0px', visibility: 'hidden' })),
                state('expanded', style({ height: '*', visibility: 'visible' })),
                transition('expanded <=> collapsed', animate('500ms ease')),
            ]),
        ] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SBItemBodyComponent, [{
        type: Component,
        args: [{
                exportAs: 'sbItemBody',
                selector: 'mdb-item-body, mdb-accordion-item-body',
                template: "<div #body class=\"sb-item-body\"\n     [style.height]=\"height\"\n     (@expandBody.done)=\"animationCallback()\"\n     [@expandBody]=\"expandAnimationState\"\n     [id]=\"id\"\n     role=\"region\"\n     [attr.aria-labelledby]=\"ariaLabelledBy\">\n    <div class=\"card-body {{ customClass }}\">\n    \t<ng-content></ng-content>\n    </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('expandBody', [
                        state('collapsed', style({ height: '0px', visibility: 'hidden' })),
                        state('expanded', style({ height: '*', visibility: 'visible' })),
                        transition('expanded <=> collapsed', animate('500ms ease')),
                    ]),
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.Router, decorators: [{
                type: Optional
            }] }]; }, { animationStateChange: [{
            type: Output
        }], customClass: [{
            type: Input
        }], routerLinks: [{
            type: ContentChildren,
            args: [RouterLinkWithHref]
        }], bodyEl: [{
            type: ViewChild,
            args: ['body', { static: true }]
        }] }); })();
    return SBItemBodyComponent;
}());
export { SBItemBodyComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,