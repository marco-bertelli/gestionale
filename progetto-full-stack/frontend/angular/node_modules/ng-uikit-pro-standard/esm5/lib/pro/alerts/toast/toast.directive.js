import { __decorate, __metadata } from "tslib";
import { NgModule, ModuleWithProviders, Directive, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var ToastContainerDirective = /** @class */ (function () {
    function ToastContainerDirective(el) {
        this.el = el;
    }
    ToastContainerDirective.prototype.getContainerElement = function () {
        return this.el.nativeElement;
    };
    ToastContainerDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ToastContainerDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], ToastContainerDirective);
ToastContainerDirective.ɵfac = function ToastContainerDirective_Factory(t) { return new (t || ToastContainerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ToastContainerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ToastContainerDirective, selectors: [["", "mdbToastContainer", ""]], exportAs: ["mdb-toast-container"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToastContainerDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbToastContainer]',
                exportAs: 'mdb-toast-container'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
    return ToastContainerDirective;
}());
export { ToastContainerDirective };
var ToastContainerModule = /** @class */ (function () {
    function ToastContainerModule() {
    }
    ToastContainerModule_1 = ToastContainerModule;
    ToastContainerModule.forRoot = function () {
        return {
            ngModule: ToastContainerModule_1,
            providers: [],
        };
    };
    var ToastContainerModule_1;
ToastContainerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ToastContainerModule });
ToastContainerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ToastContainerModule_Factory(t) { return new (t || ToastContainerModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToastContainerModule, { declarations: [ToastContainerDirective], exports: [ToastContainerDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToastContainerModule, [{
        type: NgModule,
        args: [{
                exports: [ToastContainerDirective],
                declarations: [ToastContainerDirective]
            }]
    }], function () { return []; }, null); })();
    return ToastContainerModule;
}());
export { ToastContainerModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL3Byby9hbGVydHMvdG9hc3QvdG9hc3QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTXJGO0FBQ3FCLElBQW5CLGlDQUFvQixFQUFjO0FBQ3BDLFFBRHNCLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBRSxJQUFDLENBQUM7QUFDdkMsSUFBQyxxREFBbUIsR0FBbkI7QUFBZSxRQUNiLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7QUFDaEMsSUFBQyxDQUFDO0FBRUg7QUFHa0IsZ0JBUlEsVUFBVTtBQUFJO0FBQzlCLElBRkcsdUJBQXVCLHlCQUpuQyxTQUFTLENBQUMsZUFDVCxRQUFRLEVBQUUsN0NBR0gsa0NBQ2lCLFVBQVU7a0JBSkgsbEJBSU8sT0FEM0IsdUJBQXVCLENBS25DO0FBUEMsUUFBUSxFQUFFLHFCQUFxQixZQUNoQyxDQUFDOzs7Ozs7OzsyRUFPRjtBQUNDLElBRkQsOEJBQUM7QUFFQSxDQUZBLEFBTEQsSUFLQztBQUVELFNBUGEsdUJBQXVCO0FBV3BDO0FBQ3FCLElBRHJCO0FBQW1DLElBT25DLENBQUM7QUFDQSw2QkFSWSxvQkFBb0I7QUFDakMsSUFBUyw0QkFBTyxHQUFkO0FBQWUsUUFDYixPQUFPO0FBQ1YsWUFBSyxRQUFRLEVBQUUsc0JBQW9CO0FBQ25DLFlBQUssU0FBUyxFQUFFLEVBQUU7QUFDbEIsU0FBSSxDQUFDO0FBQ0wsSUFBQyxDQUFDO0FBRUg7S0FSYSxvQkFBb0Isa0RBSmhDLFFBQVEsQ0FBQztjQUNSLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLGVBQ2xDLFlBQVksRUFBRSxDQUFDLHVCQUF1QixDQUFDLFlBQ3hDLENBQUMsU0FDVyxvQkFBb0IsQ0FPaEM7Ozs7Ozs7O2dEQUNEO0FBQUUsSUFERiwyQkFBQztBQUNDLENBREQsQUFQRCxJQU9DOztBQXhCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQURBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFEQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFMQSxBQUtBLEFBTEEsQUFBQSxBQVdBLEFBQUEsQUFPQSxBQUFBLEFBUEEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFOQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQVBBLEFBT0EsQUFQQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWRiVG9hc3RDb250YWluZXJdJyxcbiAgZXhwb3J0QXM6ICdtZGItdG9hc3QtY29udGFpbmVyJyxcbn0pXG5leHBvcnQgY2xhc3MgVG9hc3RDb250YWluZXJEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuICBnZXRDb250YWluZXJFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHM6IFtUb2FzdENvbnRhaW5lckRpcmVjdGl2ZV0sXG4gIGRlY2xhcmF0aW9uczogW1RvYXN0Q29udGFpbmVyRGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgVG9hc3RDb250YWluZXJNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFRvYXN0Q29udGFpbmVyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBUb2FzdENvbnRhaW5lck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW10sXG4gICAgfTtcbiAgfVxufVxuIl19