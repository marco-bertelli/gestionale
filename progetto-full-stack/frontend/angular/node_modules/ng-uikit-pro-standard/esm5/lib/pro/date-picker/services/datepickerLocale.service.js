import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var LocaleService = /** @class */ (function () {
    function LocaleService() {
        this.locales = {
            'en': {
                dayLabelsFull: { su: 'Sunday', mo: 'Monday', tu: 'Tuesday', we: 'Wednesday', th: 'Thursday', fr: 'Friday', sa: 'Saturday' },
                dayLabels: { su: 'Sun', mo: 'Mon', tu: 'Tue', we: 'Wed', th: 'Thu', fr: 'Fri', sa: 'Sat' },
                monthLabelsFull: {
                    1: 'January',
                    2: 'February',
                    3: 'March',
                    4: 'April',
                    5: 'May',
                    6: 'June',
                    7: 'July',
                    8: 'August',
                    9: 'September',
                    10: 'October',
                    11: 'November',
                    12: 'December'
                },
                monthLabels: {
                    1: 'Jan',
                    2: 'Feb',
                    3: 'Mar',
                    4: 'Apr',
                    5: 'May',
                    6: 'Jun',
                    7: 'Jul',
                    8: 'Aug',
                    9: 'Sep',
                    10: 'Oct',
                    11: 'Nov',
                    12: 'Dec'
                },
                dateFormat: 'yyyy-mm-dd',
                todayBtnTxt: 'Today',
                clearBtnTxt: 'Clear',
                closeBtnTxt: 'Close',
                firstDayOfWeek: 'mo',
                sunHighlight: false,
            }
        };
    }
    LocaleService.prototype.setLocaleOptions = function (locale) {
        var _this = this;
        Object.entries(locale).forEach(function (loc) {
            var localeIdentifier = loc[0];
            _this.locales[localeIdentifier] = loc[1];
        });
    };
    LocaleService.prototype.getLocaleOptions = function (locale) {
        if (locale && this.locales.hasOwnProperty(locale)) {
            // User given locale
            return this.locales[locale];
        }
        // Default: en
        return this.locales['en'];
    };
LocaleService.ɵfac = function LocaleService_Factory(t) { return new (t || LocaleService)(); };
LocaleService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocaleService, factory: function (t) { return LocaleService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocaleService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return LocaleService;
}());
export { LocaleService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlckxvY2FsZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL3Byby9kYXRlLXBpY2tlci9zZXJ2aWNlcy9kYXRlcGlja2VyTG9jYWxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSTNDO0FBQ29CLElBRHBCO0FBQTRCLFFBQ25CLFlBQU8sR0FBZTtBQUMvQixZQUFJLElBQUksRUFBRTtBQUNWLGdCQUFNLGFBQWEsRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUU7QUFDakksZ0JBQU0sU0FBUyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRTtBQUNoRyxnQkFBTSxlQUFlLEVBQUU7QUFDdkIsb0JBQVEsQ0FBQyxFQUFFLFNBQVM7QUFDcEIsb0JBQVEsQ0FBQyxFQUFFLFVBQVU7QUFDckIsb0JBQVEsQ0FBQyxFQUFFLE9BQU87QUFDbEIsb0JBQVEsQ0FBQyxFQUFFLE9BQU87QUFDbEIsb0JBQVEsQ0FBQyxFQUFFLEtBQUs7QUFDaEIsb0JBQVEsQ0FBQyxFQUFFLE1BQU07QUFDakIsb0JBQVEsQ0FBQyxFQUFFLE1BQU07QUFDakIsb0JBQVEsQ0FBQyxFQUFFLFFBQVE7QUFDbkIsb0JBQVEsQ0FBQyxFQUFFLFdBQVc7QUFDdEIsb0JBQVEsRUFBRSxFQUFFLFNBQVM7QUFDckIs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LEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQWlCQSxBQUFBLEFBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFKQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBdERBLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBdURBLEFBQUEsQUFBQSxBQUFBLEFBdkRBLEFBdURBLEFBdkRBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElNeUxvY2FsZXMsIElNeU9wdGlvbnMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2luZGV4JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExvY2FsZVNlcnZpY2Uge1xyXG4gIHB1YmxpYyBsb2NhbGVzOiBJTXlMb2NhbGVzID0ge1xyXG4gICAgJ2VuJzoge1xyXG4gICAgICBkYXlMYWJlbHNGdWxsOiB7IHN1OiAnU3VuZGF5JywgbW86ICdNb25kYXknLCB0dTogJ1R1ZXNkYXknLCB3ZTogJ1dlZG5lc2RheScsIHRoOiAnVGh1cnNkYXknLCBmcjogJ0ZyaWRheScsIHNhOiAnU2F0dXJkYXknIH0sXHJcbiAgICAgIGRheUxhYmVsczogeyBzdTogJ1N1bicsIG1vOiAnTW9uJywgdHU6ICdUdWUnLCB3ZTogJ1dlZCcsIHRoOiAnVGh1JywgZnI6ICdGcmknLCBzYTogJ1NhdCcgfSxcclxuICAgICAgbW9udGhMYWJlbHNGdWxsOiB7XHJcbiAgICAgICAgMTogJ0phbnVhcnknLFxyXG4gICAgICAgIDI6ICdGZWJydWFyeScsXHJcbiAgICAgICAgMzogJ01hcmNoJyxcclxuICAgICAgICA0OiAnQXByaWwnLFxyXG4gICAgICAgIDU6ICdNYXknLFxyXG4gICAgICAgIDY6ICdKdW5lJyxcclxuICAgICAgICA3OiAnSnVseScsXHJcbiAgICAgICAgODogJ0F1Z3VzdCcsXHJcbiAgICAgICAgOTogJ1NlcHRlbWJlcicsXHJcbiAgICAgICAgMTA6ICdPY3RvYmVyJyxcclxuICAgICAgICAxMTogJ05vdmVtYmVyJyxcclxuICAgICAgICAxMjogJ0RlY2VtYmVyJyB9LFxyXG4gICAgICBtb250aExhYmVsczoge1xyXG4gICAgICAgIDE6ICdKYW4nLFxyXG4gICAgICAgIDI6ICdGZWInLFxyXG4gICAgICAgIDM6ICdNYXInLFxyXG4gICAgICAgIDQ6ICdBcHInLFxyXG4gICAgICAgIDU6ICdNYXknLFxyXG4gICAgICAgIDY6ICdKdW4nLFxyXG4gICAgICAgIDc6ICdKdWwnLFxyXG4gICAgICAgIDg6ICdBdWcnLFxyXG4gICAgICAgIDk6ICdTZXAnLFxyXG4gICAgICAgIDEwOiAnT2N0JyxcclxuICAgICAgICAxMTogJ05vdicsXHJcbiAgICAgICAgMTI6ICdEZWMnIH0sXHJcbiAgICAgIGRhdGVGb3JtYXQ6ICd5eXl5LW1tLWRkJyxcclxuICAgICAgdG9kYXlCdG5UeHQ6ICdUb2RheScsXHJcbiAgICAgIGNsZWFyQnRuVHh0OiAnQ2xlYXInLFxyXG4gICAgICBjbG9zZUJ0blR4dDogJ0Nsb3NlJyxcclxuICAgICAgZmlyc3REYXlPZldlZWs6ICdtbycsXHJcbiAgICAgIHN1bkhpZ2hsaWdodDogZmFsc2UsXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgc2V0TG9jYWxlT3B0aW9ucyhsb2NhbGU6IElNeUxvY2FsZXMpIHtcclxuICAgIE9iamVjdC5lbnRyaWVzKGxvY2FsZSkuZm9yRWFjaCgobG9jOiBhbnkpID0+IHtcclxuICAgICAgY29uc3QgbG9jYWxlSWRlbnRpZmllciA9IGxvY1swXTtcclxuICAgICAgdGhpcy5sb2NhbGVzW2xvY2FsZUlkZW50aWZpZXJdID0gbG9jWzFdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRMb2NhbGVPcHRpb25zKGxvY2FsZTogc3RyaW5nKTogSU15T3B0aW9ucyB7XHJcbiAgICBpZiAobG9jYWxlICYmIHRoaXMubG9jYWxlcy5oYXNPd25Qcm9wZXJ0eShsb2NhbGUpKSB7XHJcbiAgICAgIC8vIFVzZXIgZ2l2ZW4gbG9jYWxlXHJcbiAgICAgIHJldHVybiB0aGlzLmxvY2FsZXNbbG9jYWxlXTtcclxuICAgIH1cclxuICAgIC8vIERlZmF1bHQ6IGVuXHJcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVzWydlbiddO1xyXG4gIH1cclxufVxyXG4iXX0=