import { __decorate, __metadata, __param } from "tslib";
import { Directive, ElementRef, OnInit, Inject, Renderer2, NgZone, Input, AfterViewInit } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ScrollSpyService } from './scroll-spy.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './scroll-spy.service';
var ScrollSpyWindowDirective = /** @class */ (function () {
    function ScrollSpyWindowDirective(document, el, renderer, ngZone, scrollSpyService) {
        this.document = document;
        this.el = el;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.scrollSpyService = scrollSpyService;
        this.offset = 0;
    }
    Object.defineProperty(ScrollSpyWindowDirective.prototype, "scrollSpyId", {
        get: function () { return this._scrollSpyId; },
        set: function (newId) {
            if (newId) {
                this._scrollSpyId = newId;
            }
        },
        enumerable: true,
        configurable: true
    });
    ScrollSpyWindowDirective.prototype.isElementInViewport = function () {
        var scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;
        var elHeight = this.el.nativeElement.offsetHeight;
        var elTop = this.el.nativeElement.offsetTop - this.offset;
        var elBottom = elTop + elHeight;
        return (scrollTop >= elTop && scrollTop <= elBottom);
    };
    ScrollSpyWindowDirective.prototype.updateActiveState = function (scrollSpyId, id) {
        if (this.isElementInViewport()) {
            this.scrollSpyService.updateActiveState(scrollSpyId, id);
        }
        else {
            this.scrollSpyService.removeActiveState(scrollSpyId, id);
        }
    };
    ScrollSpyWindowDirective.prototype.onScroll = function () {
        this.updateActiveState(this.scrollSpyId, this.id);
    };
    ScrollSpyWindowDirective.prototype.listenToScroll = function () {
        var _this = this;
        this.renderer.listen(window, 'scroll', function () {
            _this.onScroll();
        });
    };
    ScrollSpyWindowDirective.prototype.ngOnInit = function () {
        this.id = this.el.nativeElement.id;
        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));
    };
    ScrollSpyWindowDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.updateActiveState(_this.scrollSpyId, _this.id);
        }, 0);
    };
    ScrollSpyWindowDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: ScrollSpyService }
    ]; };
    __decorate([
        Input('mdbScrollSpyWindow'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ScrollSpyWindowDirective.prototype, "scrollSpyId", null);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ScrollSpyWindowDirective.prototype, "offset", void 0);
    ScrollSpyWindowDirective = __decorate([ __param(0, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Object, ElementRef,
            Renderer2,
            NgZone,
            ScrollSpyService])
    ], ScrollSpyWindowDirective);
ScrollSpyWindowDirective.ɵfac = function ScrollSpyWindowDirective_Factory(t) { return new (t || ScrollSpyWindowDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollSpyService)); };
ScrollSpyWindowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollSpyWindowDirective, selectors: [["", "mdbScrollSpyWindow", ""]], inputs: { offset: "offset", scrollSpyId: ["mdbScrollSpyWindow", "scrollSpyId"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyWindowDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbScrollSpyWindow]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ScrollSpyService }]; }, { offset: [{
            type: Input
        }], scrollSpyId: [{
            type: Input,
            args: ['mdbScrollSpyWindow']
        }] }); })();
    return ScrollSpyWindowDirective;
}());
export { ScrollSpyWindowDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,