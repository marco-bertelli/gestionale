import { __decorate, __metadata } from "tslib";
import { Directive, HostListener, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var MdbDateFormatDirective = /** @class */ (function () {
    function MdbDateFormatDirective() {
        this.separator = '/';
        this.format = ['dd', 'mm', 'yyyy'];
    }
    MdbDateFormatDirective.prototype.onInput = function (event) {
        var currentValue = event.target.value;
        var newValue = this.getFormattedDate(currentValue);
        event.target.value = newValue;
    };
    MdbDateFormatDirective.prototype.ngOnInit = function () {
        this.setSeparatorsNumber();
        this.setResultLength();
    };
    MdbDateFormatDirective.prototype.setSeparatorsNumber = function () {
        this.separatorsNumber = this.format.length - 1;
    };
    MdbDateFormatDirective.prototype.setResultLength = function () {
        var resLength = 0;
        this.format.forEach(function (value) {
            resLength += value.length;
        });
        this.resultLength = resLength + this.separatorsNumber;
    };
    MdbDateFormatDirective.prototype.getFormattedDate = function (date) {
        var _this = this;
        var dateParts = this.getDateParts(date);
        var result = dateParts.map(function (part, index) {
            return _this.formatDateParts(part, index);
        });
        return result.join(this.separator).slice(0, this.resultLength);
    };
    MdbDateFormatDirective.prototype.getDateParts = function (date) {
        date = this.getDigits(date).slice(0, this.resultLength - this.separatorsNumber);
        var parts = [];
        var partsIndex = {
            first: this.format[0].length,
            mid: this.format[0].length + this.format[1].length,
            last: this.resultLength,
        };
        parts[0] = date.slice(0, partsIndex.first);
        if (date.length > partsIndex.first) {
            parts[1] = date.slice(partsIndex.first, partsIndex.mid);
        }
        if (date.length > partsIndex.mid) {
            parts[2] = date.slice(partsIndex.mid, partsIndex.last);
        }
        return parts;
    };
    MdbDateFormatDirective.prototype.getDigits = function (value) {
        return value.replace(/\D/g, '');
    };
    MdbDateFormatDirective.prototype.formatDateParts = function (datePart, index) {
        switch (this.format[index]) {
            case 'dd':
                datePart = this.getFormattedDay(datePart);
                break;
            case 'mm':
                datePart = this.getFormattedMonth(datePart);
                break;
        }
        return datePart;
    };
    MdbDateFormatDirective.prototype.getFormattedDay = function (value) {
        var dayFirstNum = parseInt(value.charAt(0), 10);
        if (value) {
            if (dayFirstNum > 3 && dayFirstNum !== 0) {
                return '0' + value.charAt(0);
            }
            else {
                return value;
            }
        }
    };
    MdbDateFormatDirective.prototype.getFormattedMonth = function (value) {
        var monthFirstNum = parseInt(value.charAt(0), 10);
        var monthNum = parseInt(value, 10);
        if (value) {
            if (monthFirstNum > 1 && monthFirstNum !== 0) {
                return '0' + value.charAt(0);
            }
            else if (monthNum > 12) {
                return '12';
            }
            else {
                return value;
            }
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbDateFormatDirective.prototype, "separator", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbDateFormatDirective.prototype, "format", void 0);
    __decorate([
        HostListener('input', ['$event']),
        HostListener('paste', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MdbDateFormatDirective.prototype, "onInput", null);
MdbDateFormatDirective.ɵfac = function MdbDateFormatDirective_Factory(t) { return new (t || MdbDateFormatDirective)(); };
MdbDateFormatDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbDateFormatDirective, selectors: [["", "mdbDateFormat", ""]], hostBindings: function MdbDateFormatDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MdbDateFormatDirective_input_HostBindingHandler($event) { return ctx.onInput($event); })("paste", function MdbDateFormatDirective_paste_HostBindingHandler($event) { return ctx.onInput($event); });
    } }, inputs: { separator: "separator", format: "format" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbDateFormatDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbDateFormat]'
            }]
    }], function () { return []; }, { separator: [{
            type: Input
        }], format: [{
            type: Input
        }], onInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }, {
            type: HostListener,
            args: ['paste', ['$event']]
        }] }); })();
    return MdbDateFormatDirective;
}());
export { MdbDateFormatDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,