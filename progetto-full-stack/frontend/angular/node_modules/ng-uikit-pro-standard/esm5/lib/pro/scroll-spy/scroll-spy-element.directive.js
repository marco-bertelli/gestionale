import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, OnInit, Renderer2, NgZone, Input, AfterViewInit } from '@angular/core';
import { ScrollSpyService } from './scroll-spy.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './scroll-spy.service';
var ScrollSpyElementDirective = /** @class */ (function () {
    function ScrollSpyElementDirective(el, renderer, ngZone, scrollSpyService) {
        this.el = el;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.scrollSpyService = scrollSpyService;
        this.offset = 0;
    }
    Object.defineProperty(ScrollSpyElementDirective.prototype, "scrollSpyId", {
        get: function () { return this._scrollSpyId; },
        set: function (newId) {
            if (newId) {
                this._scrollSpyId = newId;
            }
        },
        enumerable: true,
        configurable: true
    });
    ScrollSpyElementDirective.prototype.isElementInViewport = function () {
        var scrollTop = this.el.nativeElement.parentElement.scrollTop;
        var elTop = this.el.nativeElement.offsetTop - this.offset;
        var elHeight = this.el.nativeElement.offsetHeight;
        return (scrollTop >= elTop && scrollTop < elTop + elHeight);
    };
    ScrollSpyElementDirective.prototype.updateActiveState = function (scrollSpyId, id) {
        if (this.isElementInViewport()) {
            this.scrollSpyService.removeActiveLinks(scrollSpyId);
            this.scrollSpyService.updateActiveState(scrollSpyId, id);
        }
    };
    ScrollSpyElementDirective.prototype.onScroll = function () {
        this.updateActiveState(this.scrollSpyId, this.id);
    };
    ScrollSpyElementDirective.prototype.listenToScroll = function () {
        var _this = this;
        this.renderer.listen(this.el.nativeElement.parentElement, 'scroll', function () {
            _this.onScroll();
        });
    };
    ScrollSpyElementDirective.prototype.ngOnInit = function () {
        this.id = this.el.nativeElement.id;
        this.renderer.setStyle(this.el.nativeElement.parentElement, 'position', 'relative');
        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));
    };
    ScrollSpyElementDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.updateActiveState(_this.scrollSpyId, _this.id);
        }, 0);
    };
    ScrollSpyElementDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: ScrollSpyService }
    ]; };
    __decorate([
        Input('mdbScrollSpyElement'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ScrollSpyElementDirective.prototype, "scrollSpyId", null);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ScrollSpyElementDirective.prototype, "offset", void 0);
    ScrollSpyElementDirective = __decorate([ __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            NgZone,
            ScrollSpyService])
    ], ScrollSpyElementDirective);
ScrollSpyElementDirective.ɵfac = function ScrollSpyElementDirective_Factory(t) { return new (t || ScrollSpyElementDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollSpyService)); };
ScrollSpyElementDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollSpyElementDirective, selectors: [["", "mdbScrollSpyElement", ""]], inputs: { offset: "offset", scrollSpyId: ["mdbScrollSpyElement", "scrollSpyId"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyElementDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbScrollSpyElement]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ScrollSpyService }]; }, { offset: [{
            type: Input
        }], scrollSpyId: [{
            type: Input,
            args: ['mdbScrollSpyElement']
        }] }); })();
    return ScrollSpyElementDirective;
}());
export { ScrollSpyElementDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,