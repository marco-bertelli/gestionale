import { __decorate, __metadata } from "tslib";
import { Component, OnInit, ElementRef, ViewChild, forwardRef, HostListener, EventEmitter, Output, Input, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["input"];
export var MDB_SELECT_FILTER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return MdbSelectFilterComponent; }),
    multi: true,
};
var MdbSelectFilterComponent = /** @class */ (function () {
    function MdbSelectFilterComponent(_el) {
        this._el = _el;
        this.placeholder = '';
        this.autocomplete = true;
        this.inputChange = new EventEmitter();
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    MdbSelectFilterComponent.prototype._handleInput = function (event) {
        var valueChanged = this.value !== event.target.value;
        if (valueChanged) {
            this._onChange(event.target.value);
            this.inputChange.emit(event.target.value);
            this.value = event.target.value;
        }
    };
    MdbSelectFilterComponent.prototype.ngOnInit = function () { };
    MdbSelectFilterComponent.prototype.focus = function () {
        this.input.nativeElement.focus();
    };
    /** Control value accessor methods */
    MdbSelectFilterComponent.prototype.setDisabledState = function (isDisabled) {
        this._el.nativeElement.disabled = isDisabled;
    };
    MdbSelectFilterComponent.prototype.writeValue = function (value) {
        var _this = this;
        Promise.resolve(null).then(function () {
            _this._el.nativeElement.value = value;
        });
    };
    MdbSelectFilterComponent.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    MdbSelectFilterComponent.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    MdbSelectFilterComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ViewChild('input'),
        __metadata("design:type", ElementRef)
    ], MdbSelectFilterComponent.prototype, "input", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbSelectFilterComponent.prototype, "placeholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbSelectFilterComponent.prototype, "autocomplete", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MdbSelectFilterComponent.prototype, "inputChange", void 0);
    __decorate([
        HostListener('input', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MdbSelectFilterComponent.prototype, "_handleInput", null);
    MdbSelectFilterComponent = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], MdbSelectFilterComponent);
MdbSelectFilterComponent.ɵfac = function MdbSelectFilterComponent_Factory(t) { return new (t || MdbSelectFilterComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MdbSelectFilterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MdbSelectFilterComponent, selectors: [["mdb-select-filter"]], viewQuery: function MdbSelectFilterComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, hostBindings: function MdbSelectFilterComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MdbSelectFilterComponent_input_HostBindingHandler($event) { return ctx._handleInput($event); });
    } }, inputs: { placeholder: "placeholder", autocomplete: "autocomplete" }, outputs: { inputChange: "inputChange" }, features: [ɵngcc0.ɵɵProvidersFeature([MDB_SELECT_FILTER_VALUE_ACCESSOR])], decls: 4, vars: 3, consts: [[1, "mdb-select-filter", "md-form", "px-2"], ["filter", ""], ["type", "text", 1, "mdb-select-filter-input", "search", "form-control", "w-100", "d-block", 3, "placeholder"], ["input", ""]], template: function MdbSelectFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵelement(2, "input", 2, 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵattribute("autocomplete", ctx.autocomplete)("role", "searchbox");
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbSelectFilterComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-select-filter',
                template: "<div #filter class=\"mdb-select-filter md-form px-2\">\n  <input\n    #input\n    [placeholder]=\"placeholder\"\n    [attr.autocomplete]=\"autocomplete\"\n    [attr.role]=\"'searchbox'\"\n    type=\"text\"\n    class=\"mdb-select-filter-input search form-control w-100 d-block\"\n  />\n</div>\n",
                providers: [MDB_SELECT_FILTER_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { placeholder: [{
            type: Input
        }], autocomplete: [{
            type: Input
        }], inputChange: [{
            type: Output
        }], _handleInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], input: [{
            type: ViewChild,
            args: ['input']
        }] }); })();
    return MdbSelectFilterComponent;
}());
export { MdbSelectFilterComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL3NlbGVjdC9zZWxlY3QtZmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sVUFBVSxFQUNWLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRW5ELE1BQU0sQ0FBQyxJQUFNLGdDQUFnQyxHQUFRO0FBQ3BELElBQUMsT0FBTyxFQUFFLGlCQUFpQjtBQUMzQixJQUFDLGtEQUFrRDtBQUNuRCxJQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLHdCQUF3QixFQUF4QixDQUF3QixDQUFDO0FBQ3hELElBQUMsS0FBSyxFQUFFLElBQUk7QUFDWixDQUFBLENBQUM7QUFPRjtBQUNHLElBbUJELGtDQUFvQixHQUFlO0FBQ3JDLFFBRHNCLFFBQUcsR0FBSCxHQUFHLENBQVk7QUFBRSxRQWhCNUIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7QUFDM0IsUUFBVSxpQkFBWSxHQUFHLElBQUksQ0FBQztBQUUvQixRQUFxQixnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0FBRTlFLFFBeUJFLGNBQVMsR0FBeUIsY0FBTyxDQUFDLENBQUM7QUFFN0MsUUFBRSxlQUFVLEdBQUcsY0FBTyxDQUFDLENBQUM7QUFFeEIsSUFsQndDLENBQUM7QUFFekMsSUFaRSwrQ0FBWSxHQUFaLFVBQWEsS0FBVTtBQUN4QixRQUFHLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFFM0QsUUFBSSxJQUFJLFlBQVksRUFBRTtB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QUEsQUFBQSxBQUFBLEFBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUEyQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBaEJBLEFBQUEsQUFWQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUE5QkEsQUFBQSxBQWxCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFTQSxBQWxCQSxBQUFBLEFBTEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXFCQSxBQUFBLEFBcEJBLEFBQUEsQUFtREEsQUFBQSxBQUFBLEFBQUEsQUFuREEsQUFtREEsQUFuREEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBFbGVtZW50UmVmLFxuICBWaWV3Q2hpbGQsXG4gIGZvcndhcmRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5leHBvcnQgY29uc3QgTURCX1NFTEVDVF9GSUxURVJfVkFMVUVfQUNDRVNTT1I6IGFueSA9IHtcbiAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tdXNlLWJlZm9yZS1kZWNsYXJlXG4gIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1kYlNlbGVjdEZpbHRlckNvbXBvbmVudCksXG4gIG11bHRpOiB0cnVlLFxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWRiLXNlbGVjdC1maWx0ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc2VsZWN0LWZpbHRlci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW01EQl9TRUxFQ1RfRklMVEVSX1ZBTFVFX0FDQ0VTU09SXSxcbn0pXG5leHBvcnQgY2xhc3MgTWRiU2VsZWN0RmlsdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgdmFsdWU6IGFueTtcbiAgQFZpZXdDaGlsZCgnaW5wdXQnKSBpbnB1dDogRWxlbWVudFJlZjtcblxuICBASW5wdXQoKSBwbGFjZWhvbGRlciA9ICcnO1xuICBASW5wdXQoKSBhdXRvY29tcGxldGUgPSB0cnVlO1xuXG4gIEBPdXRwdXQoKSByZWFkb25seSBpbnB1dENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBASG9zdExpc3RlbmVyKCdpbnB1dCcsIFsnJGV2ZW50J10pXG4gIF9oYW5kbGVJbnB1dChldmVudDogYW55KSB7XG4gICAgY29uc3QgdmFsdWVDaGFuZ2VkID0gdGhpcy52YWx1ZSAhPT0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG4gICAgaWYgKHZhbHVlQ2hhbmdlZCkge1xuICAgICAgdGhpcy5fb25DaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgIHRoaXMuaW5wdXRDaGFuZ2UuZW1pdChldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgdGhpcy52YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZikge31cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cblxuICAvKiogQ29udHJvbCB2YWx1ZSBhY2Nlc3NvciBtZXRob2RzICovXG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZWwubmF0aXZlRWxlbWVudC5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICBfb25DaGFuZ2U6ICh2YWx1ZTogYW55KSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgX29uVG91Y2hlZCA9ICgpID0+IHt9O1xuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIFByb21pc2UucmVzb2x2ZShudWxsKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB7fSk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pIHtcbiAgICB0aGlzLl9vblRvdWNoZWQgPSBmbjtcbiAgfVxufVxuIl19