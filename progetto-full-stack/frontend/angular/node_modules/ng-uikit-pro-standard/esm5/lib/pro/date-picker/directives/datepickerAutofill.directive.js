import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Renderer2, Input, HostListener } from '@angular/core';
import { BACKSPACE, DELETE } from '../../../free/utils/keyboard-navigation';
import * as ɵngcc0 from '@angular/core';
var KeyCode;
(function (KeyCode) {
    KeyCode[KeyCode["backspace"] = BACKSPACE] = "backspace";
    KeyCode[KeyCode["delete"] = DELETE] = "delete";
})(KeyCode || (KeyCode = {}));
var InputAutoFillDirective = /** @class */ (function () {
    function InputAutoFillDirective(el, rndr) {
        this.el = el;
        this.rndr = rndr;
    }
    InputAutoFillDirective.prototype.onKeyUp = function (evt) {
        // tslint:disable-next-line: deprecation
        if (!this.opts.enabled || evt.keyCode === KeyCode.backspace || evt.keyCode === KeyCode.delete) {
            return;
        }
        var val = this.getInputValue();
        var ews = this.endsWith(val, this.opts.separator);
        var parts = val.split(this.opts.separator);
        var idx = parts.length - 1;
        if (val.indexOf(this.opts.separator + this.opts.separator) !== -1 || idx > 2) {
            return;
        }
        if (!ews &&
            (val.length === this.getPartLength(0) ||
                val.length === this.getPartLength(0) + this.getPartLength(1) + this.opts.separator.length)) {
            this.setInputValue(val + this.opts.separator);
        }
        else if (ews &&
            parts[idx - 1].length < this.getPartLength(idx - 1) &&
            this.isNumber(parts[idx - 1]) &&
            (this.isDay(idx - 1) || this.isMonth(idx - 1))) {
            this.setInputValue(this.insertPos(val, val.length - 2, '0'));
        }
        else if (parts[idx].length < this.getPartLength(idx) &&
            this.isNumber(parts[idx]) &&
            ((Number(parts[idx]) > 3 && this.isDay(idx)) || (Number(parts[idx]) > 1 && this.isMonth(idx)))) {
            this.setInputValue(this.insertPos(val, val.length - 1, '0') + (idx < 2 ? this.opts.separator : ''));
        }
    };
    InputAutoFillDirective.prototype.endsWith = function (val, suffix) {
        return val.indexOf(suffix, val.length - suffix.length) !== -1;
    };
    InputAutoFillDirective.prototype.insertPos = function (str, idx, val) {
        return str.substr(0, idx) + val + str.substr(idx);
    };
    InputAutoFillDirective.prototype.getPartLength = function (idx) {
        return this.opts.formatParts[idx].length;
    };
    InputAutoFillDirective.prototype.isNumber = function (val) {
        return val.match(/[1-9]/) !== null;
    };
    InputAutoFillDirective.prototype.isDay = function (idx) {
        return this.opts.formatParts[idx].indexOf('d') !== -1;
    };
    InputAutoFillDirective.prototype.isMonth = function (idx) {
        return (this.opts.formatParts[idx].indexOf('m') !== -1 && this.opts.formatParts[idx].length === 2);
    };
    InputAutoFillDirective.prototype.getInputValue = function () {
        return this.el.nativeElement.value;
    };
    InputAutoFillDirective.prototype.setInputValue = function (val) {
        this.rndr.setProperty(this.el.nativeElement, 'value', val);
    };
    InputAutoFillDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], InputAutoFillDirective.prototype, "opts", void 0);
    __decorate([
        HostListener('keyup', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], InputAutoFillDirective.prototype, "onKeyUp", null);
    InputAutoFillDirective = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], InputAutoFillDirective);
InputAutoFillDirective.ɵfac = function InputAutoFillDirective_Factory(t) { return new (t || InputAutoFillDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
InputAutoFillDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InputAutoFillDirective, selectors: [["", "mdbInputAutoFill", ""]], hostBindings: function InputAutoFillDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function InputAutoFillDirective_keyup_HostBindingHandler($event) { return ctx.onKeyUp($event); });
    } }, inputs: { opts: "opts" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InputAutoFillDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbInputAutoFill]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { onKeyUp: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], opts: [{
            type: Input
        }] }); })();
    return InputAutoFillDirective;
}());
export { InputAutoFillDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,