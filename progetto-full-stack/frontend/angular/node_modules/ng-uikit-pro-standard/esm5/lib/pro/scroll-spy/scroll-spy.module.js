import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { ScrollSpyDirective } from './scroll-spy.directive';
import { ScrollSpyLinkDirective } from './scroll-spy-link.directive';
import { ScrollSpyWindowDirective } from './scroll-spy-window.directive';
import { ScrollSpyElementDirective } from './scroll-spy-element.directive';
import { ScrollSpyService } from './scroll-spy.service';
import * as ɵngcc0 from '@angular/core';
var ScrollSpyModule = /** @class */ (function () {
    function ScrollSpyModule() {
    }
ScrollSpyModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScrollSpyModule });
ScrollSpyModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ScrollSpyModule_Factory(t) { return new (t || ScrollSpyModule)(); }, providers: [ScrollSpyService] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollSpyModule, { declarations: function () { return [ScrollSpyDirective,
        ScrollSpyLinkDirective,
        ScrollSpyWindowDirective,
        ScrollSpyElementDirective]; }, exports: function () { return [ScrollSpyDirective,
        ScrollSpyLinkDirective,
        ScrollSpyWindowDirective,
        ScrollSpyElementDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ScrollSpyDirective,
                    ScrollSpyLinkDirective,
                    ScrollSpyWindowDirective,
                    ScrollSpyElementDirective
                ],
                exports: [
                    ScrollSpyDirective,
                    ScrollSpyLinkDirective,
                    ScrollSpyWindowDirective,
                    ScrollSpyElementDirective
                ],
                providers: [ScrollSpyService]
            }]
    }], function () { return []; }, null); })();
    return ScrollSpyModule;
}());
export { ScrollSpyModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL3Njcm9sbC1zcHkvc2Nyb2xsLXNweS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBa0J4RDtBQUNtQixJQURuQjtBQUE4QixJQUFDLENBQUM7S0FBbkIsZUFBZSx5QkFmM0IsUUFBUSxDQUFDLGVBQ1I7TUFBWSxFQUFFLG1CQUNaLGtCQUFrQixtQkFDbEIsc0JBQXNCLG1CQUN0Qix3QkFBd0IsbUJBQ3hCO0dBQXlCLGVBQzFCLGVBQ0QsT0FBTyxFQUFFLG1CQUNQLGtCQUFrQixtQkFDbEIsc0JBQXNCLG1CQUN0Qix3QkFBd0I7ZUFDeEI7UUFBeUIsZUFDMUI7SUFDRCxTQUFTLEVBQUUsQ0FBRSxnQkFBZ0IsQ0FBRSxXQUNoQyxDQUFDLFNBQ1csZUFBZSxDQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBQ2hDO0FBQUUsSUFENkIsc0JBQUM7QUFDOUIsQ0FEOEIsQUFBaEMsSUFBZ0M7O0FBeEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWtCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFmQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTY3JvbGxTcHlEaXJlY3RpdmUgfSBmcm9tICcuL3Njcm9sbC1zcHkuZGlyZWN0aXZlJztcbmltcG9ydCB7IFNjcm9sbFNweUxpbmtEaXJlY3RpdmUgfSBmcm9tICcuL3Njcm9sbC1zcHktbGluay5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU2Nyb2xsU3B5V2luZG93RGlyZWN0aXZlIH0gZnJvbSAnLi9zY3JvbGwtc3B5LXdpbmRvdy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU2Nyb2xsU3B5RWxlbWVudERpcmVjdGl2ZSB9IGZyb20gJy4vc2Nyb2xsLXNweS1lbGVtZW50LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTY3JvbGxTcHlTZXJ2aWNlIH0gZnJvbSAnLi9zY3JvbGwtc3B5LnNlcnZpY2UnO1xuXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFNjcm9sbFNweURpcmVjdGl2ZSxcbiAgICBTY3JvbGxTcHlMaW5rRGlyZWN0aXZlLFxuICAgIFNjcm9sbFNweVdpbmRvd0RpcmVjdGl2ZSxcbiAgICBTY3JvbGxTcHlFbGVtZW50RGlyZWN0aXZlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBTY3JvbGxTcHlEaXJlY3RpdmUsXG4gICAgU2Nyb2xsU3B5TGlua0RpcmVjdGl2ZSxcbiAgICBTY3JvbGxTcHlXaW5kb3dEaXJlY3RpdmUsXG4gICAgU2Nyb2xsU3B5RWxlbWVudERpcmVjdGl2ZVxuICBdLFxuICBwcm92aWRlcnM6IFsgU2Nyb2xsU3B5U2VydmljZSBdXG59KVxuZXhwb3J0IGNsYXNzIFNjcm9sbFNweU1vZHVsZSB7IH1cbiJdfQ==