import { __decorate, __metadata, __param } from "tslib";
import { Directive, OnInit, Input, HostListener, HostBinding, ChangeDetectorRef, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
var ScrollSpyLinkDirective = /** @class */ (function () {
    function ScrollSpyLinkDirective(cdRef, document) {
        this.cdRef = cdRef;
        this.document = document;
        this._scrollIntoView = true;
        this.active = false;
    }
    Object.defineProperty(ScrollSpyLinkDirective.prototype, "scrollIntoView", {
        get: function () { return this._scrollIntoView; },
        set: function (value) {
            this._scrollIntoView = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollSpyLinkDirective.prototype, "section", {
        get: function () { return this._section; },
        set: function (value) {
            if (value) {
                this._section = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollSpyLinkDirective.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (newId) {
            if (newId) {
                this._id = newId;
            }
        },
        enumerable: true,
        configurable: true
    });
    ScrollSpyLinkDirective.prototype.onClick = function () {
        if (this.section && this.scrollIntoView === true) {
            this.section.scrollIntoView();
        }
    };
    ScrollSpyLinkDirective.prototype.detectChanges = function () {
        this.cdRef.detectChanges();
    };
    ScrollSpyLinkDirective.prototype.assignSectionToId = function () {
        this.section = this.document.documentElement.querySelector("#" + this.id);
    };
    ScrollSpyLinkDirective.prototype.ngOnInit = function () {
        this.assignSectionToId();
    };
    ScrollSpyLinkDirective.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], ScrollSpyLinkDirective.prototype, "scrollIntoView", null);
    __decorate([
        Input('mdbScrollSpyLink'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], ScrollSpyLinkDirective.prototype, "id", null);
    __decorate([
        HostBinding('class.active'),
        __metadata("design:type", Object)
    ], ScrollSpyLinkDirective.prototype, "active", void 0);
    __decorate([
        HostListener('click', []),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ScrollSpyLinkDirective.prototype, "onClick", null);
    ScrollSpyLinkDirective = __decorate([ __param(1, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [ChangeDetectorRef, Object])
    ], ScrollSpyLinkDirective);
ScrollSpyLinkDirective.ɵfac = function ScrollSpyLinkDirective_Factory(t) { return new (t || ScrollSpyLinkDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
ScrollSpyLinkDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollSpyLinkDirective, selectors: [["", "mdbScrollSpyLink", ""]], hostVars: 2, hostBindings: function ScrollSpyLinkDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ScrollSpyLinkDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.active);
    } }, inputs: { scrollIntoView: "scrollIntoView", id: ["mdbScrollSpyLink", "id"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyLinkDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbScrollSpyLink]'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }], scrollIntoView: [{
            type: Input
        }], id: [{
            type: Input,
            args: ['mdbScrollSpyLink']
        }], onClick: [{
            type: HostListener,
            args: ['click', []]
        }] }); })();
    return ScrollSpyLinkDirective;
}());
export { ScrollSpyLinkDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS1saW5rLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmctdWlraXQtcHJvLXN0YW5kYXJkL2xpYi9wcm8vc2Nyb2xsLXNweS9zY3JvbGwtc3B5LWxpbmsuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixLQUFLLEVBQ0wsWUFBWSxFQUNaLFdBQVcsRUFDWCxpQkFBaUIsRUFDakIsTUFBTSxFQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFLM0M7QUFDRyxJQWdCRCxnQ0FDVSxLQUF3QixFQUNOLFFBQWE7QUFDdkMsUUFGUSxVQUFLLEdBQUwsS0FBSyxDQUFtQjtBQUNwQyxRQUE4QixhQUFRLEdBQVIsUUFBUSxDQUFLO0FBQzFDLFFBZFMsb0JBQWUsR0FBRyxJQUFJLENBQUM7QUFFakMsUUF5QkUsV0FBTSxHQUFHLEtBQUssQ0FBQztBQUVqQixJQWZLLENBQUM7QUFFTixJQXBCRSxzQkFBSSxrREFBYztBQUFLLGFBQXZCLGNBQXVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7QUFDckQsYUFBQSxVQUFtQixLQUFjO0FBQ2xDLFlBQUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7QUFDaEMsUUFBQyxDQUFDO0FBQ0Q7QUFBMkI7QUFFUCxPQU5pQztBQUN0RCxJQUtDLHNCQUFJLDJDQUFPO0FBQUssYUFBaEIsY0FBZ0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN2QyxhQUFBLFVBQVksS0FBa0I7QUFDL0IsWUFBRyxJQUFJLEtBQUssRUFBRTtBQUNkLGdCQUFLLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzNCLGFBQUk7QUFDSixRQUFDLENBQUM7QUFDRDtBQUEyQjtBQUc3QixPQVR5QztBQUN4QyxJQWNDLHNCQUFJLHNDQUFF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LEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUxBLEFBV0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWxDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFqQkEsQUFEQSxBQUFBLEFBQUEsQUFDQSxBQXFCQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQVFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBR0EsQUFEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBeENBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFvQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBbEJBLEFBQUEsQUFxREEsQUFBQSxBQUFBLEFBQUEsQUFyREEsQUFxREEsQUFyREEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgT25Jbml0LFxuICBJbnB1dCxcbiAgSG9zdExpc3RlbmVyLFxuICBIb3N0QmluZGluZyxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIEluamVjdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21kYlNjcm9sbFNweUxpbmtdJ1xufSlcbmV4cG9ydCBjbGFzcyBTY3JvbGxTcHlMaW5rRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KClcbiAgZ2V0IHNjcm9sbEludG9WaWV3KCkgeyByZXR1cm4gdGhpcy5fc2Nyb2xsSW50b1ZpZXc7IH1cbiAgc2V0IHNjcm9sbEludG9WaWV3KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2Nyb2xsSW50b1ZpZXcgPSB2YWx1ZTtcbiAgfVxuICBwcml2YXRlIF9zY3JvbGxJbnRvVmlldyA9IHRydWU7XG5cbiAgZ2V0IHNlY3Rpb24oKSB7IHJldHVybiB0aGlzLl9zZWN0aW9uOyB9XG4gIHNldCBzZWN0aW9uKHZhbHVlOiBIVE1MRWxlbWVudCkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5fc2VjdGlvbiA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIF9zZWN0aW9uOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBfaWQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnlcbiAgKSB7fVxuXG4gIEBJbnB1dCgnbWRiU2Nyb2xsU3B5TGluaycpXG4gIGdldCBpZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuICBzZXQgaWQobmV3SWQ6IHN0cmluZykge1xuICAgIGlmIChuZXdJZCkge1xuICAgICAgdGhpcy5faWQgPSBuZXdJZDtcbiAgICB9XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFjdGl2ZScpXG4gIGFjdGl2ZSA9IGZhbHNlO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgW10pXG4gIG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMuc2VjdGlvbiAmJiB0aGlzLnNjcm9sbEludG9WaWV3ID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnNlY3Rpb24uc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICB9XG4gIH1cblxuICBkZXRlY3RDaGFuZ2VzKCkge1xuICAgIHRoaXMuY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgYXNzaWduU2VjdGlvblRvSWQoKSB7XG4gICAgdGhpcy5zZWN0aW9uID0gdGhpcy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dGhpcy5pZH1gKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuYXNzaWduU2VjdGlvblRvSWQoKTtcbiAgfVxufVxuIl19