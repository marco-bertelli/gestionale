import { __decorate, __metadata, __param } from "tslib";
import { AfterViewInit, Directive, ElementRef, EventEmitter, Inject, Input, OnDestroy, Output, Renderer2, forwardRef, HostListener, } from '@angular/core';
import { MdbAutoCompleterComponent } from '../components/mdb-auto-completer.component';
import { PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser, DOCUMENT } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Utils } from '../../../free/utils';
import { TAB, ESCAPE, ENTER } from '../../../free/utils/keyboard-navigation';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as Éµngcc0 from '@angular/core';
export var MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(function () { return MdbAutoCompleterDirective; }),
    multi: true,
};
var MdbAutoCompleterDirective = /** @class */ (function () {
    function MdbAutoCompleterDirective(renderer, el, platformId, document) {
        this.renderer = renderer;
        this.el = el;
        this.document = document;
        this.ngModelChange = new EventEmitter();
        this.clearBtnClicked = new EventEmitter();
        this._destroy$ = new Subject();
        this._canOpenOnFocus = true;
        this.utils = new Utils();
        this._onChange = function () { };
        this._onTouched = function () { };
        this.isBrowser = isPlatformBrowser(platformId);
    }
    MdbAutoCompleterDirective.prototype.onKeydown = function (event) {
        this._handleKeyDown(event);
        var isTabKey = event.keyCode === TAB;
        if (isTabKey) {
            this._hide();
        }
    };
    MdbAutoCompleterDirective.prototype._handleInput = function (event) {
        if (!this._isOpen()) {
            this._show();
        }
        this._onChange(event.target.value);
        this.mdbAutoCompleter.removeHighlight(0);
        this.mdbAutoCompleter.highlightRow(0);
        this._updateClearButtonVisibility();
    };
    MdbAutoCompleterDirective.prototype._handleFocusIn = function () {
        if (!this._canOpenOnFocus) {
            this._canOpenOnFocus = true;
        }
        else {
            this._show();
        }
    };
    /*
  fix(completer): Resolve problem with closing autocompleter dropdown
  when not neccessary (eg. clicking on button which is not an mdb-option.
  Without calling this _hide() method, autocompleter dropdown won't close
  after switching focus programmatically to another element.
  */
    MdbAutoCompleterDirective.prototype._handleBlurIn = function () {
        this._canOpenOnFocus = this.document.activeElement !== this.el.nativeElement;
        this._onTouched();
    };
    MdbAutoCompleterDirective.prototype.handleMouseDown = function () {
        this.mdbAutoCompleter.highlightRow(0);
    };
    MdbAutoCompleterDirective.prototype._renderClearButton = function () {
        var _this = this;
        var el = this.renderer.createElement('button');
        this._setStyles(el, {
            position: 'absolute',
            top: '25%',
            right: '0',
            visibility: 'hidden',
        });
        this._addClass(el, ['mdb-autocomplete-clear', 'fa', 'fa-times']);
        this.renderer.setAttribute(el, 'type', 'button');
        this.renderer.setAttribute(el, 'tabindex', this.mdbAutoCompleter.clearButtonTabIndex.toString());
        this.listenToClearClick = this.renderer.listen(el, 'click', function () {
            _this.clearBtnClicked.emit();
            _this._onChange('');
        });
        if (this.isBrowser) {
            var parent_1 = this.utils.getClosestEl(this.el.nativeElement, '.md-form') || this.el.nativeElement;
            this.renderer.appendChild(parent_1, el);
        }
    };
    MdbAutoCompleterDirective.prototype._updateClearButtonVisibility = function () {
        var clearButtonVisibility = this.el.nativeElement.value.length > 0 ? 'visible' : 'hidden';
        if (this.mdbAutoCompleter.clearButton) {
            var clearButton = this.el.nativeElement.parentElement.lastElementChild;
            this._setStyles(clearButton, { visibility: clearButtonVisibility });
        }
    };
    MdbAutoCompleterDirective.prototype._setStyles = function (target, styles) {
        var _this = this;
        Object.keys(styles).forEach(function (prop) {
            _this.renderer.setStyle(target, prop, styles[prop]);
        });
        return this;
    };
    MdbAutoCompleterDirective.prototype._addClass = function (target, name) {
        var _this = this;
        name.forEach(function (el) {
            _this.renderer.addClass(target, el);
        });
    };
    MdbAutoCompleterDirective.prototype._clearInput = function () {
        this.el.nativeElement.value = '';
        this.ngModelChange.emit('');
        var clearButton = this.el.nativeElement.parentElement.lastElementChild;
        this._setStyles(clearButton, { visibility: 'hidden' });
    };
    MdbAutoCompleterDirective.prototype.clear = function () {
        this._clearInput();
    };
    MdbAutoCompleterDirective.prototype._handleKeyDown = function (event) {
        this.mdbAutoCompleter.navigateUsingKeyboard(event);
        var key = event.keyCode;
        if (key !== ESCAPE && key !== ENTER && key !== TAB) {
            this.mdbAutoCompleter.show();
        }
    };
    MdbAutoCompleterDirective.prototype.getCoords = function (elem) {
        if (this.isBrowser) {
            var box = elem.getBoundingClientRect();
            var body = document.body;
            var docEl = document.documentElement;
            var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
            var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
            var clientTop = docEl.clientTop || body.clientTop || 0;
            var clientLeft = docEl.clientLeft || body.clientLeft || 0;
            var top_1 = box.top + scrollTop - clientTop;
            var left = box.left + scrollLeft - clientLeft;
            return { top: Math.round(top_1), left: Math.round(left) };
        }
    };
    MdbAutoCompleterDirective.prototype._isOpen = function () {
        return this.mdbAutoCompleter.isOpen();
    };
    MdbAutoCompleterDirective.prototype._show = function () {
        var _this = this;
        this.mdbAutoCompleter.show();
        setTimeout(function () {
            if (_this.mdbAutoCompleter.appendToBody) {
                if (_this.utils.getClosestEl(_this.el.nativeElement, '.modal-body')) {
                    setTimeout(function () {
                        _this.renderer.setStyle(_this.mdbAutoCompleter.dropdown.nativeElement, 'z-index', '1100');
                    }, 0);
                }
            }
        }, 0);
        this.listenFunc = this.renderer.listen('document', 'click', function (event) {
            if (_this.mdbAutoCompleter.dropdown &&
                !_this.mdbAutoCompleter.dropdown.nativeElement.contains(event.target) &&
                !_this.el.nativeElement.contains(event.target)) {
                _this._hide();
            }
        });
    };
    MdbAutoCompleterDirective.prototype._hide = function () {
        this.mdbAutoCompleter.hide();
        this.listenFunc();
    };
    MdbAutoCompleterDirective.prototype._appendDropdownToInput = function () {
        var position = this.el.nativeElement.getBoundingClientRect();
        var el = this.el.nativeElement;
        var style = window.getComputedStyle(this.el.nativeElement);
        var height = ['height', 'padding-top', 'padding-bottom', 'margin-top', 'margin-bottom']
            .map(function (key) { return parseInt(style.getPropertyValue(key), 10); })
            .reduce(function (prev, cur) { return prev + cur; });
        this.mdbAutoCompleter.parameters = {
            left: this.getCoords(el).left,
            top: this.getCoords(el).top + height,
            width: position.width,
            bottom: window.innerHeight - height - el.getBoundingClientRect().top,
            inputHeight: this.el.nativeElement.offsetHeight,
        };
        this.mdbAutoCompleter.appendDropdown();
    };
    MdbAutoCompleterDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.mdbAutoCompleter
            .selectedItemChanged()
            .pipe(takeUntil(this._destroy$))
            .subscribe(function (item) {
            var displayedValue = _this.mdbAutoCompleter && _this.mdbAutoCompleter.displayValue
                ? _this.mdbAutoCompleter.displayValue(item.text)
                : item.text;
            _this.el.nativeElement.value = displayedValue;
            _this._onChange(item.text);
            var clearButtonVisibility = _this.el.nativeElement.value.length > 0 ? 'visible' : 'hidden';
            var clearButton = _this.el.nativeElement.parentElement.lastElementChild;
            _this._setStyles(clearButton, { visibility: clearButtonVisibility });
            if (item) {
                _this._canOpenOnFocus = false;
                _this.el.nativeElement.focus();
                _this._hide();
            }
        });
        this.mdbAutoCompleter.origin = this.el;
        this.mdbAutoCompleter
            .isDropdownOpen()
            .pipe(takeUntil(this._destroy$))
            .subscribe(function (state) {
            if (state) {
                _this._appendDropdownToInput();
            }
        });
        if (this.mdbAutoCompleter.clearButton && this.isBrowser) {
            this._renderClearButton();
            var clearButton_1 = this.el.nativeElement.parentElement.querySelectorAll('.mdb-autocomplete-clear')[0];
            this._clearButton = this.document.querySelector('.mdb-autocomplete-clear');
            this.renderer.listen(clearButton_1, 'focus', function () {
                ['click', 'keydown:space', 'keydown:enter'].forEach(function (event) {
                    return _this.renderer.listen(clearButton_1, event, function () {
                        _this._clearInput();
                    });
                });
                _this._setStyles(clearButton_1, {
                    transform: 'scale(1.2, 1.2)',
                    transition: '200ms',
                });
            });
            this.renderer.listen(clearButton_1, 'click', function () {
                _this._clearInput();
            });
            this.renderer.listen(clearButton_1, 'mouseenter', function () {
                _this._setStyles(clearButton_1, {
                    transform: 'scale(1.2, 1.2)',
                    transition: '200ms',
                });
            });
            this.renderer.listen(clearButton_1, 'mouseleave', function () {
                _this._setStyles(clearButton_1, {
                    transform: 'scale(1.0, 1.0)',
                    transition: '200ms',
                });
            });
            this.renderer.listen(clearButton_1, 'blur', function () {
                _this._setStyles(clearButton_1, {
                    transform: 'scale(1.0, 1.0)',
                    transition: '200ms',
                });
            });
            if (this.el.nativeElement.disabled) {
                this.renderer.setAttribute(clearButton_1, 'disabled', 'true');
            }
            this._autocompleterInputChanges = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    if (mutation.attributeName === 'disabled') {
                        _this.renderer.setAttribute(_this._clearButton, 'disabled', 'true');
                    }
                });
            });
            this._autocompleterInputChanges.observe(this.el.nativeElement, {
                attributes: true,
                childList: true,
                characterData: true,
            });
        }
    };
    MdbAutoCompleterDirective.prototype.ngOnDestroy = function () {
        if (this._autocompleterInputChanges) {
            this._autocompleterInputChanges.disconnect();
        }
        if (this.listenToClearClick) {
            this.listenToClearClick();
        }
        if (this.listenFunc) {
            this.listenFunc();
        }
        this._destroy$.next();
        this._destroy$.complete();
    };
    MdbAutoCompleterDirective.prototype.writeValue = function (value) {
        var _this = this;
        Promise.resolve(null).then(function () {
            var displayedValue = _this.mdbAutoCompleter && _this.mdbAutoCompleter.displayValue
                ? _this.mdbAutoCompleter.displayValue(value)
                : value;
            _this.el.nativeElement.value = displayedValue;
            _this._updateClearButtonVisibility();
        });
    };
    MdbAutoCompleterDirective.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    MdbAutoCompleterDirective.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    MdbAutoCompleterDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", MdbAutoCompleterComponent)
    ], MdbAutoCompleterDirective.prototype, "mdbAutoCompleter", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], MdbAutoCompleterDirective.prototype, "ngModelChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], MdbAutoCompleterDirective.prototype, "clearBtnClicked", void 0);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MdbAutoCompleterDirective.prototype, "onKeydown", null);
    __decorate([
        HostListener('input', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], MdbAutoCompleterDirective.prototype, "_handleInput", null);
    __decorate([
        HostListener('focusin'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MdbAutoCompleterDirective.prototype, "_handleFocusIn", null);
    __decorate([
        HostListener('blur'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MdbAutoCompleterDirective.prototype, "_handleBlurIn", null);
    __decorate([
        HostListener('mousedown'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MdbAutoCompleterDirective.prototype, "handleMouseDown", null);
    MdbAutoCompleterDirective = __decorate([ __param(2, Inject(PLATFORM_ID)),
        __param(3, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Renderer2,
            ElementRef, String, Object])
    ], MdbAutoCompleterDirective);
MdbAutoCompleterDirective.Éµfac = function MdbAutoCompleterDirective_Factory(t) { return new (t || MdbAutoCompleterDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(PLATFORM_ID), Éµngcc0.ÉµÉµdirectiveInject(DOCUMENT)); };
MdbAutoCompleterDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: MdbAutoCompleterDirective, selectors: [["input", "mdbAutoCompleter", ""], ["textarea", "mdbAutoCompleter", ""]], hostBindings: function MdbAutoCompleterDirective_HostBindings(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµlistener("input", function MdbAutoCompleterDirective_input_HostBindingHandler($event) { return ctx._handleInput($event); })("focusin", function MdbAutoCompleterDirective_focusin_HostBindingHandler() { return ctx._handleFocusIn(); })("blur", function MdbAutoCompleterDirective_blur_HostBindingHandler() { return ctx._handleBlurIn(); })("mousedown", function MdbAutoCompleterDirective_mousedown_HostBindingHandler() { return ctx.handleMouseDown(); })("keydown", function MdbAutoCompleterDirective_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
    } }, inputs: { mdbAutoCompleter: "mdbAutoCompleter" }, outputs: { ngModelChange: "ngModelChange", clearBtnClicked: "clearBtnClicked" }, exportAs: ["mdbAutoCompleterTrigger"], features: [Éµngcc0.ÉµÉµProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR])] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(MdbAutoCompleterDirective, [{
        type: Directive,
        args: [{
                selector: 'input[mdbAutoCompleter], textarea[mdbAutoCompleter]',
                // tslint:disable-next-line:no-host-metadata-property
                host: {
                    '(input)': '_handleInput($event)',
                    '(focusin)': '_handleFocusIn()',
                    '(blur)': '_handleBlurIn()',
                    '(mousedown)': '_handleMouseDown()'
                },
                exportAs: 'mdbAutoCompleterTrigger',
                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: Éµngcc0.Renderer2 }, { type: Éµngcc0.ElementRef }, { type: String, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { ngModelChange: [{
            type: Output
        }], clearBtnClicked: [{
            type: Output
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], _handleInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], _handleFocusIn: [{
            type: HostListener,
            args: ['focusin']
        }], _handleBlurIn: [{
            type: HostListener,
            args: ['blur']
        }], handleMouseDown: [{
            type: HostListener,
            args: ['mousedown']
        }], mdbAutoCompleter: [{
            type: Input
        }] }); })();
    return MdbAutoCompleterDirective;
}());
export { MdbAutoCompleterDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,