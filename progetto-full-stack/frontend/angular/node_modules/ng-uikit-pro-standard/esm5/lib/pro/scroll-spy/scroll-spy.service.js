import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var ScrollSpyService = /** @class */ (function () {
    function ScrollSpyService() {
        this.scrollSpys = [];
        this.activeSubject = new Subject();
        this.active$ = this.activeSubject;
    }
    ScrollSpyService.prototype.addScrollSpy = function (scrollSpy) {
        this.scrollSpys.push(scrollSpy);
    };
    ScrollSpyService.prototype.removeScrollSpy = function (scrollSpyId) {
        var scrollSpyIndex = this.scrollSpys.findIndex(function (spy) {
            return spy.id === scrollSpyId;
        });
        this.scrollSpys.splice(scrollSpyIndex, 1);
    };
    ScrollSpyService.prototype.updateActiveState = function (scrollSpyId, activeLinkId) {
        var scrollSpy = this.scrollSpys.find(function (spy) {
            return spy.id === scrollSpyId;
        });
        if (!scrollSpy) {
            return;
        }
        var activeLink = scrollSpy.links.find(function (link) {
            return link.id === activeLinkId;
        });
        this.setActiveLink(activeLink);
    };
    ScrollSpyService.prototype.removeActiveState = function (scrollSpyId, activeLinkId) {
        var scrollSpy = this.scrollSpys.find(function (spy) {
            return spy.id === scrollSpyId;
        });
        if (!scrollSpy) {
            return;
        }
        var activeLink = scrollSpy.links.find(function (link) {
            return link.id === activeLinkId;
        });
        if (!activeLink) {
            return;
        }
        activeLink.active = false;
        activeLink.detectChanges();
    };
    ScrollSpyService.prototype.setActiveLink = function (activeLink) {
        if (activeLink) {
            activeLink.active = true;
            activeLink.detectChanges();
            this.activeSubject.next(activeLink);
        }
    };
    ScrollSpyService.prototype.removeActiveLinks = function (scrollSpyId) {
        var scrollSpy = this.scrollSpys.find(function (spy) {
            return spy.id === scrollSpyId;
        });
        if (!scrollSpy) {
            return;
        }
        scrollSpy.links.forEach(function (link) {
            link.active = false;
            link.detectChanges();
        });
    };
ScrollSpyService.ɵfac = function ScrollSpyService_Factory(t) { return new (t || ScrollSpyService)(); };
ScrollSpyService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScrollSpyService, factory: function (t) { return ScrollSpyService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return ScrollSpyService;
}());
export { ScrollSpyService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZy11aWtpdC1wcm8tc3RhbmRhcmQvbGliL3Byby9zY3JvbGwtc3B5L3Njcm9sbC1zcHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUV0RCxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sTUFBTSxDQUFDOztBQVEzQztBQUNxQixJQURyQjtBQUErQixRQUNyQixlQUFVLEdBQWdCLEVBQUUsQ0FBQztBQUV2QyxRQUFVLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQTBCLENBQUM7QUFDL0QsUUFBQyxZQUFPLEdBQW9CLElBQUksQ0FBQyxhQUFhLENBQUM7QUFFaEQsSUFzRUEsQ0FBQztBQUNBLElBdkVDLHVDQUFZLEdBQVosVUFBYSxTQUFvQjtBQUNsQyxRQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLElBQUMsQ0FBQztBQUVGLElBQUMsMENBQWUsR0FBZixVQUFnQixXQUFtQjtBQUNwQyxRQUFHLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFFLFVBQUMsR0FBRztBQUFLLFlBQ3pELE9BQU8sR0FBRyxDQUFDLEVBQUUsS0FBSyxXQUFXLENBQUM7QUFDbkMsUUFBRyxDQUFDLENBQUMsQ0FBQztBQUNOLFFBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzdDLElBQUMsQ0FBQztBQUVGLElBQUMsNENBQWlCLEdBQWpCLFVBQWtCLFdBQW1CLEVBQUUsWUFBb0I7QUFDNUQsUUFBRyxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFBLEdBQUc7QUFBSyxZQUM3QyxPQUFPLEdBQUcsQ0FBQyxFQUFFLEtBQUssV0FBVyxDQUFDO0FBQ25D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QUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTNFQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTRFQSxBQUFBLEFBQUEsQUFBQSxBQTVFQSxBQTRFQSxBQTVFQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTY3JvbGxTcHlMaW5rRGlyZWN0aXZlIH0gZnJvbSAnLi9zY3JvbGwtc3B5LWxpbmsuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBTY3JvbGxTcHkge1xuICBpZDogc3RyaW5nO1xuICBsaW5rczogUXVlcnlMaXN0PFNjcm9sbFNweUxpbmtEaXJlY3RpdmU+O1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2Nyb2xsU3B5U2VydmljZSB7XG4gIHByaXZhdGUgc2Nyb2xsU3B5czogU2Nyb2xsU3B5W10gPSBbXTtcblxuICBwcml2YXRlIGFjdGl2ZVN1YmplY3QgPSBuZXcgU3ViamVjdDxTY3JvbGxTcHlMaW5rRGlyZWN0aXZlPigpO1xuICBhY3RpdmUkOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLmFjdGl2ZVN1YmplY3Q7XG5cbiAgYWRkU2Nyb2xsU3B5KHNjcm9sbFNweTogU2Nyb2xsU3B5KSB7XG4gICAgdGhpcy5zY3JvbGxTcHlzLnB1c2goc2Nyb2xsU3B5KTtcbiAgfVxuXG4gIHJlbW92ZVNjcm9sbFNweShzY3JvbGxTcHlJZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc2Nyb2xsU3B5SW5kZXggPSB0aGlzLnNjcm9sbFNweXMuZmluZEluZGV4KCAoc3B5KSA9PiB7XG4gICAgICByZXR1cm4gc3B5LmlkID09PSBzY3JvbGxTcHlJZDtcbiAgICB9KTtcbiAgICB0aGlzLnNjcm9sbFNweXMuc3BsaWNlKHNjcm9sbFNweUluZGV4LCAxKTtcbiAgfVxuXG4gIHVwZGF0ZUFjdGl2ZVN0YXRlKHNjcm9sbFNweUlkOiBzdHJpbmcsIGFjdGl2ZUxpbmtJZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc2Nyb2xsU3B5ID0gdGhpcy5zY3JvbGxTcHlzLmZpbmQoc3B5ID0+IHtcbiAgICAgIHJldHVybiBzcHkuaWQgPT09IHNjcm9sbFNweUlkO1xuICAgIH0pO1xuXG4gICAgaWYgKCFzY3JvbGxTcHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVMaW5rID0gc2Nyb2xsU3B5LmxpbmtzLmZpbmQobGluayA9PiB7XG4gICAgICByZXR1cm4gbGluay5pZCA9PT0gYWN0aXZlTGlua0lkO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXRBY3RpdmVMaW5rKGFjdGl2ZUxpbmspO1xuICB9XG5cbiAgcmVtb3ZlQWN0aXZlU3RhdGUoc2Nyb2xsU3B5SWQ6IHN0cmluZywgYWN0aXZlTGlua0lkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzY3JvbGxTcHkgPSB0aGlzLnNjcm9sbFNweXMuZmluZChzcHkgPT4ge1xuICAgICAgcmV0dXJuIHNweS5pZCA9PT0gc2Nyb2xsU3B5SWQ7XG4gICAgfSk7XG5cbiAgICBpZiAoIXNjcm9sbFNweSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZUxpbmsgPSBzY3JvbGxTcHkubGlua3MuZmluZChsaW5rID0+IHtcbiAgICAgIHJldHVybiBsaW5rLmlkID09PSBhY3RpdmVMaW5rSWQ7XG4gICAgfSk7XG5cbiAgICBpZiAoIWFjdGl2ZUxpbmspIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhY3RpdmVMaW5rLmFjdGl2ZSA9IGZhbHNlO1xuICAgIGFjdGl2ZUxpbmsuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgc2V0QWN0aXZlTGluayhhY3RpdmVMaW5rOiBTY3JvbGxTcHlMaW5rRGlyZWN0aXZlIHwgYW55KSB7XG4gICAgaWYgKGFjdGl2ZUxpbmspIHtcbiAgICAgIGFjdGl2ZUxpbmsuYWN0aXZlID0gdHJ1ZTtcbiAgICAgIGFjdGl2ZUxpbmsuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgdGhpcy5hY3RpdmVTdWJqZWN0Lm5leHQoYWN0aXZlTGluayk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlQWN0aXZlTGlua3Moc2Nyb2xsU3B5SWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHNjcm9sbFNweTogU2Nyb2xsU3B5IHwgdW5kZWZpbmVkID0gdGhpcy5zY3JvbGxTcHlzLmZpbmQoc3B5ID0+IHtcbiAgICAgIHJldHVybiBzcHkuaWQgPT09IHNjcm9sbFNweUlkO1xuICAgIH0pO1xuXG4gICAgaWYgKCFzY3JvbGxTcHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY3JvbGxTcHkubGlua3MuZm9yRWFjaChsaW5rID0+IHtcbiAgICAgIGxpbmsuYWN0aXZlID0gZmFsc2U7XG4gICAgICBsaW5rLmRldGVjdENoYW5nZXMoKTtcbiAgICB9KTtcbiAgfVxufVxuIl19