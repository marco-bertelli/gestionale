import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { CONTAINER_QUERY, COMPLETE_CLASS_NAME, TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE, EMULATE_ELEMENT_NAME, } from './preloader.constants';
import * as ɵngcc0 from '@angular/core';
var MDBSpinningPreloader = /** @class */ (function () {
    function MDBSpinningPreloader(document) {
        this.document = document;
        this.container = this.document.querySelector(CONTAINER_QUERY);
    }
    MDBSpinningPreloader.errorHandler = function () {
        throw new TypeError(TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE);
    };
    MDBSpinningPreloader.prototype.start = function () {
        this.container.classList.remove(COMPLETE_CLASS_NAME);
    };
    MDBSpinningPreloader.prototype.stop = function () {
        this.container.classList.add(COMPLETE_CLASS_NAME);
    };
    Object.defineProperty(MDBSpinningPreloader.prototype, "container", {
        get: function () {
            return this._container;
        },
        set: function (element) {
            this._container = element || this.document.createElement(EMULATE_ELEMENT_NAME);
        },
        enumerable: true,
        configurable: true
    });
    MDBSpinningPreloader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    MDBSpinningPreloader = __decorate([ __param(0, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Object])
    ], MDBSpinningPreloader);
MDBSpinningPreloader.ɵfac = function MDBSpinningPreloader_Factory(t) { return new (t || MDBSpinningPreloader)(ɵngcc0.ɵɵinject(DOCUMENT)); };
MDBSpinningPreloader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MDBSpinningPreloader, factory: function (t) { return MDBSpinningPreloader.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MDBSpinningPreloader, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
    return MDBSpinningPreloader;
}());
export { MDBSpinningPreloader };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvcHJvL3ByZWxvYWRlci9wcmVsb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFDTCxlQUFlLEVBQ2YsbUJBQW1CLEVBQ25CLDBDQUEwQyxFQUMxQyxvQkFBb0IsR0FDckIsTUFBTSx1QkFBdUIsQ0FBQzs7QUFLL0I7QUFDcUIsSUFNbkIsOEJBQXFDLFFBQWE7QUFDbkQsUUFEc0MsYUFBUSxHQUFSLFFBQVEsQ0FBSztBQUFFLFFBQ2xELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDakUsSUFBQyxDQUFDO0FBRUgsSUFSZ0IsaUNBQVksR0FBMUI7QUFBZSxRQUNiLE1BQU0sSUFBSSxTQUFTLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUNuRSxJQUFDLENBQUM7QUFFRixJQUlRLG9DQUFLLEdBQVo7QUFBZSxRQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3hELElBQUMsQ0FBQztBQUVGLElBQVEsbUNBQUksR0FBWDtBQUFlLFFBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDckQsSUFBQyxDQUFDO0FBRUYsSUFBQyxzQkFBVywyQ0FBUztBQUFLLGFBQXpCO0FBQWUsWUFDYixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDMUIsUUFBQyxDQUFDO0FBRUYsYUFBQyxVQUFxQixPQUFPO0FBQzdCLFlBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNsRixRQUFDLENBQUM7QUFFSDtBQUEyQjtBQUE0QixPQU5wRDtBQUVIO0FBQ2dDLGdEQWpCakIsTUFBTSxTQUFDLFFBQVE7QUFBUztBQUFXLElBUHJDLG9CQUFvQix5QkFEaEMsVUFBVSxFQUFFLHRCQUNKLENBT00sV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7QUFBRztBQUNMLE9BUmhCLG9CQUFvQixDQTBCaEM7Ozs7Ozs7O2tDQUNEO0FBQUUsSUFERiwyQkFBQztBQUNDLENBREQsQUExQkQsSUEwQkM7O0FBeENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQU5BLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFKQSxBQWRBLEFBQUEsQUFBQSxBQUFBLEFBUEEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUEEsQUFBQSxBQTBCQSxBQUFBLEFBQUEsQUFBQSxBQTFCQSxBQTBCQSxBQTFCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHtcbiAgQ09OVEFJTkVSX1FVRVJZLFxuICBDT01QTEVURV9DTEFTU19OQU1FLFxuICBUWVBFX0VSUk9SX0NPTlRBSU5FUl9XQVNfTk9UX0ZPVU5EX01FU1NBR0UsXG4gIEVNVUxBVEVfRUxFTUVOVF9OQU1FLFxufSBmcm9tICcuL3ByZWxvYWRlci5jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBNREJfU1BJTk5JTkdfUFJFTE9BREVSX1RZUEUgfSBmcm9tICcuL3ByZWxvYWRlci50eXBlcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNREJTcGlubmluZ1ByZWxvYWRlciB7XG4gIHB1YmxpYyBfY29udGFpbmVyOiBNREJfU1BJTk5JTkdfUFJFTE9BREVSX1RZUEU7XG5cbiAgcHVibGljIHN0YXRpYyBlcnJvckhhbmRsZXIoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihUWVBFX0VSUk9SX0NPTlRBSU5FUl9XQVNfTk9UX0ZPVU5EX01FU1NBR0UpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHVibGljIGRvY3VtZW50OiBhbnkpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihDT05UQUlORVJfUVVFUlkpO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0KCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoQ09NUExFVEVfQ0xBU1NfTkFNRSk7XG4gIH1cblxuICBwdWJsaWMgc3RvcCgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKENPTVBMRVRFX0NMQVNTX05BTUUpO1xuICB9XG5cbiAgcHVibGljIGdldCBjb250YWluZXIoKTogTURCX1NQSU5OSU5HX1BSRUxPQURFUl9UWVBFIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICB9XG5cbiAgcHVibGljIHNldCBjb250YWluZXIoZWxlbWVudCkge1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGVsZW1lbnQgfHwgdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KEVNVUxBVEVfRUxFTUVOVF9OQU1FKTtcbiAgfVxufVxuIl19