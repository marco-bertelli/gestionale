import { __decorate, __metadata } from "tslib";
import { OnInit, Directive, ElementRef, Renderer2, Input, HostListener } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var CharCounterDirective = /** @class */ (function () {
    function CharCounterDirective(_elRef, _renderer) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        this.length = 20;
    }
    CharCounterDirective.prototype.ngOnInit = function () {
        // Inititalise a new <span> element for the count display and render it below the host component.
        this.textContainer = this._renderer.createElement('p');
        this._renderer.appendChild(this._elRef.nativeElement.parentElement, this.textContainer);
        this._renderer.addClass(this.textContainer, 'chars');
        this.textContainer.innerHTML = '0/' + this.length;
        this._renderer.setStyle(this.textContainer, 'display', 'none');
    };
    CharCounterDirective.prototype.onKeyUp = function () {
        this.textContainer.innerHTML = this._elRef.nativeElement.value.length + '/' + this.length;
        if (this._elRef.nativeElement.value.length > this.length) {
            this._renderer.addClass(this._elRef.nativeElement, 'invalid');
        }
        else {
            this._renderer.removeClass(this._elRef.nativeElement, 'invalid');
        }
    };
    CharCounterDirective.prototype.hide = function () {
        this._renderer.setStyle(this.textContainer, 'display', 'none');
    };
    CharCounterDirective.prototype.show = function () {
        this.onKeyUp();
        this._renderer.setStyle(this.textContainer, 'display', 'block');
    };
    CharCounterDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CharCounterDirective.prototype, "length", void 0);
    __decorate([
        HostListener('input'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], CharCounterDirective.prototype, "onKeyUp", null);
    __decorate([
        HostListener('blur'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], CharCounterDirective.prototype, "hide", null);
    __decorate([
        HostListener('focus'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], CharCounterDirective.prototype, "show", null);
    CharCounterDirective = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], CharCounterDirective);
CharCounterDirective.ɵfac = function CharCounterDirective_Factory(t) { return new (t || CharCounterDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
CharCounterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CharCounterDirective, selectors: [["", "mdbCharCounter", ""]], hostBindings: function CharCounterDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function CharCounterDirective_input_HostBindingHandler() { return ctx.onKeyUp(); })("blur", function CharCounterDirective_blur_HostBindingHandler() { return ctx.hide(); })("focus", function CharCounterDirective_focus_HostBindingHandler() { return ctx.show(); });
    } }, inputs: { length: "length" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CharCounterDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbCharCounter]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { length: [{
            type: Input
        }], onKeyUp: [{
            type: HostListener,
            args: ['input']
        }], hide: [{
            type: HostListener,
            args: ['blur']
        }], show: [{
            type: HostListener,
            args: ['focus']
        }] }); })();
    return CharCounterDirective;
}());
export { CharCounterDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhci1jb3VudGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmctdWlraXQtcHJvLXN0YW5kYXJkL2xpYi9wcm8vaW5wdXRzL2NoYXItY291bnRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLOUY7QUFDRyxJQUdELDhCQUFvQixNQUFrQixFQUFVLFNBQW9CO0FBQ3RFLFFBRHNCLFdBQU0sR0FBTixNQUFNLENBQVk7QUFBRSxRQUFRLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBRSxRQUh0RCxXQUFNLEdBQUcsRUFBRSxDQUFDO0FBQzdCLElBRXdFLENBQUM7QUFFMUUsSUFBRSx1Q0FBUSxHQUFSO0FBQ0EsUUFBRSxpR0FBaUc7QUFDcEcsUUFBRyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFELFFBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMzRixRQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEQsUUFBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNyRCxRQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2xFLElBQUMsQ0FBQztBQUVGLElBQXdCLHNDQUFPLEdBQVA7QUFDdEIsUUFBQyxJQUFJLENB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LEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBNUJBLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQWhDQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBaUNBLEFBQUEsQUFBQSxBQUFBLEFBakNBLEFBaUNBLEFBakNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbnB1dCwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttZGJDaGFyQ291bnRlcl0nLFxufSlcbmV4cG9ydCBjbGFzcyBDaGFyQ291bnRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIHB1YmxpYyBsZW5ndGggPSAyMDtcbiAgcHVibGljIHRleHRDb250YWluZXI6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICAvLyBJbml0aXRhbGlzZSBhIG5ldyA8c3Bhbj4gZWxlbWVudCBmb3IgdGhlIGNvdW50IGRpc3BsYXkgYW5kIHJlbmRlciBpdCBiZWxvdyB0aGUgaG9zdCBjb21wb25lbnQuXG4gICAgdGhpcy50ZXh0Q29udGFpbmVyID0gdGhpcy5fcmVuZGVyZXIuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuX2VsUmVmLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCwgdGhpcy50ZXh0Q29udGFpbmVyKTtcbiAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyh0aGlzLnRleHRDb250YWluZXIsICdjaGFycycpO1xuICAgIHRoaXMudGV4dENvbnRhaW5lci5pbm5lckhUTUwgPSAnMC8nICsgdGhpcy5sZW5ndGg7XG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUodGhpcy50ZXh0Q29udGFpbmVyLCAnZGlzcGxheScsICdub25lJyk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdpbnB1dCcpIG9uS2V5VXAoKSB7XG4gICAgdGhpcy50ZXh0Q29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMuX2VsUmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUubGVuZ3RoICsgJy8nICsgdGhpcy5sZW5ndGg7XG5cbiAgICBpZiAodGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudC52YWx1ZS5sZW5ndGggPiB0aGlzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudCwgJ2ludmFsaWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudCwgJ2ludmFsaWQnKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdibHVyJykgaGlkZSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnRleHRDb250YWluZXIsICdkaXNwbGF5JywgJ25vbmUnKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzJykgc2hvdygpIHtcbiAgICB0aGlzLm9uS2V5VXAoKTtcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnRleHRDb250YWluZXIsICdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gIH1cbn1cbiJdfQ==