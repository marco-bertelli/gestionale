import { __decorate, __metadata, __param } from "tslib";
import { Component, ElementRef, OnInit, OnChanges, SimpleChanges, Input, Renderer2, ChangeDetectionStrategy, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { PLATFORM_ID, Inject } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var EasyPieChartComponent = /** @class */ (function () {
    function EasyPieChartComponent(el, platformId, _r) {
        this.el = el;
        this._r = _r;
        this.isBrowser = false;
        this.isBrowser = isPlatformBrowser(platformId);
        var options = {
            barColor: '#ef1e25',
            trackColor: '#f9f9f9',
            scaleColor: '#dfe0e0',
            scaleLength: 5,
            lineCap: 'round',
            lineWidth: 3,
            size: 110,
            rotate: 0,
            animate: {
                duration: 1000,
                enabled: true,
            },
        };
        this.options = Object.assign(options, this.options);
    }
    EasyPieChartComponent.prototype.ngOnInit = function () {
        if (this.isBrowser) {
            var size = this.options.size;
            this.el.nativeElement.innerHTML = '';
            this.pieChart = new EasyPieChart(this.el.nativeElement, this.options);
            this.pieChart.update(this.percent);
            // Positioning text in center of chart
            var percent = document.querySelector('.percent');
            if (percent) {
                this._r.setStyle(percent, 'line-height', size + 'px');
                this._r.setStyle(percent, 'width', size + 'px');
                this._r.setStyle(percent, 'height', size + 'px');
            }
        }
    };
    EasyPieChartComponent.prototype.ngOnChanges = function (changes) {
        if (!changes['percent'].isFirstChange()) {
            this.pieChart.update(this.percent);
        }
    };
    EasyPieChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], EasyPieChartComponent.prototype, "percent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], EasyPieChartComponent.prototype, "options", void 0);
    EasyPieChartComponent = __decorate([ __param(1, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [ElementRef, String, Renderer2])
    ], EasyPieChartComponent);
EasyPieChartComponent.ɵfac = function EasyPieChartComponent_Factory(t) { return new (t || EasyPieChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
EasyPieChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EasyPieChartComponent, selectors: [["mdb-easy-pie-chart"]], inputs: { options: "options", percent: "percent" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, template: function EasyPieChartComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtext(1, "Loading");
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EasyPieChartComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-easy-pie-chart',
                template: '<div>Loading</div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: String, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { options: [{
            type: Input
        }], percent: [{
            type: Input
        }] }); })();
    return EasyPieChartComponent;
}());
export { EasyPieChartComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,