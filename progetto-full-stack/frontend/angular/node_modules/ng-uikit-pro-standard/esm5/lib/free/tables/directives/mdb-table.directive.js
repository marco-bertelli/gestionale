import { __decorate, __metadata, __values } from "tslib";
import { AfterViewInit, Component, ElementRef, HostBinding, Input, OnInit, Renderer2, ViewEncapsulation, } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["mdbTable", ""];
var _c1 = ["*"];
var MdbTableDirective = /** @class */ (function () {
    function MdbTableDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.stickyHeader = false;
        this.stickyHeaderBgColor = '#f2f2f2';
        this.stickyHeaderTextColor = '#000000';
        this.stickyFooter = false;
        this.stickyFooterBgColor = '#f2f2f2';
        this.stickyFooterTextColor = '#000000';
        this._dataSource = [];
        this._dataSourceChanged = new Subject();
    }
    MdbTableDirective.prototype.addRow = function (newRow) {
        this.getDataSource().push(newRow);
    };
    MdbTableDirective.prototype.addRowAfter = function (index, row) {
        this.getDataSource().splice(index, 0, row);
    };
    MdbTableDirective.prototype.removeRow = function (index) {
        this.getDataSource().splice(index, 1);
    };
    MdbTableDirective.prototype.rowRemoved = function () {
        return new Observable(function (observer) {
            observer.next(true);
        });
    };
    MdbTableDirective.prototype.removeLastRow = function () {
        this.getDataSource().pop();
    };
    MdbTableDirective.prototype.getDataSource = function () {
        return this._dataSource;
    };
    MdbTableDirective.prototype.setDataSource = function (data) {
        this._dataSource = data;
        this._dataSourceChanged.next(this.getDataSource());
    };
    MdbTableDirective.prototype.dataSourceChange = function () {
        return this._dataSourceChanged;
    };
    MdbTableDirective.prototype.filterLocalDataBy = function (searchKey) {
        return this.getDataSource().filter(function (obj) {
            return Object.keys(obj).some(function (key) {
                if (obj[key]) {
                    // Fix(tableSearch): table search will now able to filter through nested data
                    return JSON.stringify(obj)
                        .toLowerCase()
                        .includes(searchKey);
                }
            });
        });
    };
    MdbTableDirective.prototype.filterLocalDataByFields = function (searchKey, keys) {
        return this.getDataSource().filter(function (obj) {
            return Object.keys(obj).some(function (key) {
                if (obj[key]) {
                    if (keys.includes(key)) {
                        if (obj[key].toLowerCase().includes(searchKey)) {
                            return obj[key];
                        }
                    }
                }
            });
        });
    };
    MdbTableDirective.prototype.filterLocalDataByMultipleFields = function (searchKey, keys) {
        var items = searchKey.split(' ').map(function (x) { return x.toLowerCase(); });
        return this.getDataSource().filter(function (x) {
            var e_1, _a;
            try {
                for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                    var item = items_1_1.value;
                    var flag = false;
                    if (keys !== undefined) {
                        for (var prop in x) {
                            if (x[prop] && x.hasOwnProperty(prop)) {
                                if (keys.includes(prop)) {
                                    if (x[prop].toLowerCase().indexOf(item) !== -1) {
                                        flag = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (keys === undefined) {
                        for (var prop in x) {
                            if (x.hasOwnProperty(prop) && x[prop].toLowerCase().indexOf(item) !== -1) {
                                flag = true;
                                break;
                            }
                        }
                    }
                    if (!flag) {
                        return false;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return true;
        });
    };
    MdbTableDirective.prototype.searchLocalDataBy = function (searchKey) {
        if (!searchKey) {
            return this.getDataSource();
        }
        if (searchKey) {
            return this.filterLocalDataBy(searchKey.toLowerCase());
        }
    };
    MdbTableDirective.prototype.searchLocalDataByFields = function (searchKey, keys) {
        if (!searchKey) {
            return this.getDataSource();
        }
        if (searchKey && keys.length > 0) {
            return this.filterLocalDataByFields(searchKey.toLowerCase(), keys);
        }
        if (!keys || keys.length === 0) {
            return this.filterLocalDataBy(searchKey.toLowerCase());
        }
    };
    MdbTableDirective.prototype.searchLocalDataByMultipleFields = function (searchKey, keys) {
        if (!searchKey) {
            return this.getDataSource();
        }
        if (searchKey && keys !== undefined) {
            return this.filterLocalDataByMultipleFields(searchKey.toLowerCase(), keys);
        }
    };
    MdbTableDirective.prototype.searchDataObservable = function (searchKey) {
        var _this = this;
        return new Observable(function (observer) {
            observer.next(_this.searchLocalDataBy(searchKey));
        });
    };
    MdbTableDirective.prototype.ngOnInit = function () {
        this.renderer.addClass(this.el.nativeElement, 'table');
    };
    MdbTableDirective.prototype.ngAfterViewInit = function () {
        // Fix(stickyHeader): resolved problem with not working stickyHeader="true" on Chrome
        if (this.stickyHeader) {
            this.makeSticky('thead', 'sticky-top', this.stickyHeaderBgColor, this.stickyHeaderTextColor);
        }
        if (this.stickyFooter) {
            this.makeSticky('tfoot', 'sticky-bottom', this.stickyFooterBgColor, this.stickyFooterTextColor);
        }
    };
    MdbTableDirective.prototype.makeSticky = function (query, elementClass, bgColor, color) {
        var _this = this;
        var tableHead = this.el.nativeElement.querySelector(query);
        Array.from(tableHead.firstElementChild.children).forEach(function (child) {
            _this.renderer.addClass(child, elementClass);
            if (bgColor) {
                _this.renderer.setStyle(child, 'background-color', bgColor);
            }
            if (color) {
                _this.renderer.setStyle(child, 'color', color);
            }
        });
    };
    MdbTableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        HostBinding('class.table-striped'),
        __metadata("design:type", Boolean)
    ], MdbTableDirective.prototype, "striped", void 0);
    __decorate([
        Input(),
        HostBinding('class.table-bordered'),
        __metadata("design:type", Boolean)
    ], MdbTableDirective.prototype, "bordered", void 0);
    __decorate([
        Input(),
        HostBinding('class.table-borderless'),
        __metadata("design:type", Boolean)
    ], MdbTableDirective.prototype, "borderless", void 0);
    __decorate([
        Input(),
        HostBinding('class.table-hover'),
        __metadata("design:type", Boolean)
    ], MdbTableDirective.prototype, "hover", void 0);
    __decorate([
        Input(),
        HostBinding('class.table-sm'),
        __metadata("design:type", Boolean)
    ], MdbTableDirective.prototype, "small", void 0);
    __decorate([
        Input(),
        HostBinding('class.table-responsive'),
        __metadata("design:type", Boolean)
    ], MdbTableDirective.prototype, "responsive", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTableDirective.prototype, "stickyHeader", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTableDirective.prototype, "stickyHeaderBgColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTableDirective.prototype, "stickyHeaderTextColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTableDirective.prototype, "stickyFooter", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTableDirective.prototype, "stickyFooterBgColor", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTableDirective.prototype, "stickyFooterTextColor", void 0);
    MdbTableDirective = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], MdbTableDirective);
MdbTableDirective.ɵfac = function MdbTableDirective_Factory(t) { return new (t || MdbTableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
MdbTableDirective.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MdbTableDirective, selectors: [["", "mdbTable", ""]], hostVars: 12, hostBindings: function MdbTableDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("table-striped", ctx.striped)("table-bordered", ctx.bordered)("table-borderless", ctx.borderless)("table-hover", ctx.hover)("table-sm", ctx.small)("table-responsive", ctx.responsive);
    } }, inputs: { stickyHeader: "stickyHeader", stickyHeaderBgColor: "stickyHeaderBgColor", stickyHeaderTextColor: "stickyHeaderTextColor", stickyFooter: "stickyFooter", stickyFooterBgColor: "stickyFooterBgColor", stickyFooterTextColor: "stickyFooterTextColor", striped: "striped", bordered: "bordered", borderless: "borderless", hover: "hover", small: "small", responsive: "responsive" }, exportAs: ["mdbTable"], attrs: _c0, ngContentSelectors: _c1, decls: 1, vars: 0, template: function MdbTableDirective_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["table th{font-size:.9rem;font-weight:400}table td{font-size:.9rem;font-weight:300}table thead td svg.ascending,table thead td svg.descending,table thead th svg.ascending,table thead th svg.descending{display:none;max-height:.9rem;max-width:.9rem}table thead td[aria-sort=ascending] svg.ascending,table thead td[aria-sort=descending] svg.descending,table thead th[aria-sort=ascending] svg.ascending,table thead th[aria-sort=descending] svg.descending{display:unset}table thead td:not([aria-sort]):hover svg.descending,table thead td[aria-sort=constant]:hover svg.descending,table thead th:not([aria-sort]):hover svg.descending,table thead th[aria-sort=constant]:hover svg.descending{display:unset;opacity:.5}table tfoot .sticky-bottom{position:-webkit-sticky;position:sticky;bottom:0}table.table{margin-bottom:0}table.table thead th{border-top:none;border-bottom-width:1px}table.table td,table.table th{padding:1.1rem 16px 1rem}table.table .label-table{margin:0;padding:0;line-height:.94rem;height:.94rem}table.table.btn-table td{vertical-align:middle}table.table-hover tbody tr:hover{transition:.5s;background-color:rgba(0,0,0,.075)}table .th-lg{min-width:9rem}table .th-sm{min-width:6rem}table.table-sm td,table.table-sm th{padding-top:.6rem;padding-bottom:.6rem}.table-scroll-vertical{max-height:300px;overflow-y:auto}.table-fixed{table-layout:fixed}.table-responsive-lg>.table-bordered,.table-responsive-md>.table-bordered,.table-responsive-sm>.table-bordered,.table-responsive-xl>.table-bordered,.table-responsive>.table-bordered{border-top:1px solid #dee2e6}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTableDirective, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: '[mdbTable]',
                exportAs: 'mdbTable',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None,
                styles: ["table th{font-size:.9rem;font-weight:400}table td{font-size:.9rem;font-weight:300}table thead td svg.ascending,table thead td svg.descending,table thead th svg.ascending,table thead th svg.descending{display:none;max-height:.9rem;max-width:.9rem}table thead td[aria-sort=ascending] svg.ascending,table thead td[aria-sort=descending] svg.descending,table thead th[aria-sort=ascending] svg.ascending,table thead th[aria-sort=descending] svg.descending{display:unset}table thead td:not([aria-sort]):hover svg.descending,table thead td[aria-sort=constant]:hover svg.descending,table thead th:not([aria-sort]):hover svg.descending,table thead th[aria-sort=constant]:hover svg.descending{display:unset;opacity:.5}table tfoot .sticky-bottom{position:-webkit-sticky;position:sticky;bottom:0}table.table{margin-bottom:0}table.table thead th{border-top:none;border-bottom-width:1px}table.table td,table.table th{padding:1.1rem 16px 1rem}table.table .label-table{margin:0;padding:0;line-height:.94rem;height:.94rem}table.table.btn-table td{vertical-align:middle}table.table-hover tbody tr:hover{transition:.5s;background-color:rgba(0,0,0,.075)}table .th-lg{min-width:9rem}table .th-sm{min-width:6rem}table.table-sm td,table.table-sm th{padding-top:.6rem;padding-bottom:.6rem}.table-scroll-vertical{max-height:300px;overflow-y:auto}.table-fixed{table-layout:fixed}.table-responsive-lg>.table-bordered,.table-responsive-md>.table-bordered,.table-responsive-sm>.table-bordered,.table-responsive-xl>.table-bordered,.table-responsive>.table-bordered{border-top:1px solid #dee2e6}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { stickyHeader: [{
            type: Input
        }], stickyHeaderBgColor: [{
            type: Input
        }], stickyHeaderTextColor: [{
            type: Input
        }], stickyFooter: [{
            type: Input
        }], stickyFooterBgColor: [{
            type: Input
        }], stickyFooterTextColor: [{
            type: Input
        }], striped: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.table-striped']
        }], bordered: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.table-bordered']
        }], borderless: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.table-borderless']
        }], hover: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.table-hover']
        }], small: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.table-sm']
        }], responsive: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.table-responsive']
        }] }); })();
    return MdbTableDirective;
}());
export { MdbTableDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,