import { __decorate, __metadata } from "tslib";
import { Directive, Output, EventEmitter, OnInit, OnDestroy, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var MdbTableRowDirective = /** @class */ (function () {
    function MdbTableRowDirective(el) {
        this.el = el;
        this.rowCreated = new EventEmitter();
        this.rowRemoved = new EventEmitter();
    }
    MdbTableRowDirective.prototype.ngOnInit = function () {
        this.rowCreated.emit({ created: true, el: this.el.nativeElement });
    };
    MdbTableRowDirective.prototype.ngOnDestroy = function () {
        this.rowRemoved.emit({ removed: true });
    };
    MdbTableRowDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], MdbTableRowDirective.prototype, "rowCreated", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], MdbTableRowDirective.prototype, "rowRemoved", void 0);
    MdbTableRowDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], MdbTableRowDirective);
MdbTableRowDirective.ɵfac = function MdbTableRowDirective_Factory(t) { return new (t || MdbTableRowDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MdbTableRowDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbTableRowDirective, selectors: [["", "mdbTableRow", ""]], outputs: { rowCreated: "rowCreated", rowRemoved: "rowRemoved" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTableRowDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbTableRow]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { rowCreated: [{
            type: Output
        }], rowRemoved: [{
            type: Output
        }] }); })();
    return MdbTableRowDirective;
}());
export { MdbTableRowDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLXRhYmxlLXJvdy5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nLXVpa2l0LXByby1zdGFuZGFyZC9saWIvZnJlZS90YWJsZXMvZGlyZWN0aXZlcy9tZGItdGFibGUtcm93LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUsvRjtBQUF5RCxJQUt2RCw4QkFBb0IsRUFBYztBQUNuQyxRQURxQixPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUUsUUFIMUIsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7QUFDaEQsUUFBVyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUVqRCxJQUNFLENBQUM7QUFFSCxJQUFFLHVDQUFRLEdBQVI7QUFDQSxRQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0FBQ3RFLElBQUMsQ0FBQztBQUVGLElBQUMsMENBQVcsR0FBWDtBQUFlLFFBQ2IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMzQyxJQUFDLENBQUM7QUFFRjtBQUNnRSxnQkFadkMsVUFBVTtBQUNwQztBQUVNLElBTk07QUFBYyxRQUF2QixNQUFNLEVBQUU7QUFBRztBQUNQLDREQUQwQztBQUMvQyxJQUFVO0FBQWMsUUFBdkIsTUFBTSxFQUFFO0FBQUc7QUFFUiw0REFGMkM7QUFFaEQsSUFMWSxvQkFBb0IseUJBSGhDLFNBQVMsQ0FBQyxlQUNULFFBQVEsRUFBRSw3Q0FFSCxrQ0FLaUIsVUFBVTtZQVBULFdBQzFCLENBQUMseEJBT0YsT0FOYSxvQkFBb0IsQ0FnQmhDOzs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBRSxJQURGLDJCQUFDO0FBQ0MsQ0FERCxBQWhCRCxJQWdCQzs7QUFyQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVRBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFNQSxBQUFBLEFBTEEsQUFBQSxBQWdCQSxBQUFBLEFBQUEsQUFBQSxBQWhCQSxBQWdCQSxBQWhCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21kYlRhYmxlUm93XSdcbn0pXG5leHBvcnQgY2xhc3MgTWRiVGFibGVSb3dEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQE91dHB1dCgpIHJvd0NyZWF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIHJvd1JlbW92ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnJvd0NyZWF0ZWQuZW1pdCh7IGNyZWF0ZWQ6IHRydWUsIGVsOiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJvd1JlbW92ZWQuZW1pdCh7IHJlbW92ZWQ6IHRydWUgfSk7XG4gIH1cblxufVxuIl19