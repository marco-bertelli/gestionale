import { __decorate, __metadata } from "tslib";
import { Directive, Input, Output, EventEmitter, OnInit, OnDestroy, Renderer2, ElementRef, TemplateRef, ViewContainerRef, HostListener, } from '@angular/core';
import { PopoverConfig } from './popover.config';
import { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';
import { PopoverContainerComponent } from './popover-container.component';
import { PositioningService } from '../utils/positioning/positioning.service';
/**
 * A lightweight, extensible directive for fancy popover creation.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './popover.config';
import * as ɵngcc2 from '../utils/component-loader/component-loader.factory';
import * as ɵngcc3 from '../utils/positioning/positioning.service';
var PopoverDirective = /** @class */ (function () {
    function PopoverDirective(_elementRef, _renderer, _viewContainerRef, _config, cis, _positionService) {
        this._positionService = _positionService;
        this.dynamicPosition = true;
        this.outsideClick = false;
        this._popover = cis
            .createLoader(_elementRef, _viewContainerRef, _renderer)
            .provide({ provide: PopoverConfig, useValue: _config });
        Object.assign(this, _config);
        this.onShown = this._popover.onShown;
        this.shown = this._popover.onShown;
        this.onHidden = this._popover.onHidden;
        this.hidden = this._popover.onHidden;
    }
    Object.defineProperty(PopoverDirective.prototype, "isOpen", {
        /**
         * Returns whether or not the popover is currently being shown
         */
        get: function () {
            return this._popover.isShown;
        },
        set: function (value) {
            if (value) {
                this.show();
            }
            else {
                this.hide();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    PopoverDirective.prototype.show = function () {
        if (this._popover.isShown) {
            return;
        }
        this._positionService.setOptions({
            modifiers: {
                flip: {
                    enabled: this.dynamicPosition,
                },
                preventOverflow: {
                    enabled: this.dynamicPosition,
                },
            },
        });
        this._popover
            .attach(PopoverContainerComponent)
            .to(this.container)
            .position({ attachment: this.placement })
            .show({
            content: this.mdbPopover,
            placement: this.placement,
            title: this.mdbPopoverHeader || this.popoverTitle,
            containerClass: this.containerClass ? this.containerClass : '',
            bodyClass: this.bodyClass ? this.bodyClass : '',
            headerClass: this.headerClass ? this.headerClass : '',
        });
        this.isOpen = true;
        if (!this.dynamicPosition) {
            this._positionService.calcPosition();
            this._positionService.deletePositionElement(this._popover._componentRef.location);
        }
    };
    /**
     * Closes an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    PopoverDirective.prototype.hide = function () {
        if (this.isOpen) {
            this._popover.hide();
            this.isOpen = false;
        }
    };
    /**
     * Toggles an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    PopoverDirective.prototype.toggle = function () {
        if (this.isOpen) {
            return this.hide();
        }
        this.show();
    };
    PopoverDirective.prototype.onclick = function (event) {
        if (this.triggers.toString().includes('focus')) {
            event.stopPropagation();
            this.show();
        }
    };
    PopoverDirective.prototype.onblur = function () {
        if (this.triggers.toString().includes('focus') && this.isOpen) {
            this.hide();
        }
    };
    // fix(popover): popover with outsideClick='true' will now close after clicking in document on iPad Safari
    PopoverDirective.prototype.onTouchStart = function (event) {
        if (this.outsideClick && !event.target.classList.contains('popover-body')) {
            this.hide();
        }
    };
    PopoverDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._popover.listen({
            triggers: this.triggers,
            outsideClick: this.outsideClick,
            show: function () { return _this.show(); },
        });
    };
    PopoverDirective.prototype.dispose = function () {
        this._popover.dispose();
    };
    PopoverDirective.prototype.ngOnDestroy = function () {
        this._popover.dispose();
    };
    PopoverDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: PopoverConfig },
        { type: ComponentLoaderFactory },
        { type: PositioningService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "containerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "bodyClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "headerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], PopoverDirective.prototype, "mdbPopover", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "mdbPopoverHeader", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "popoverTitle", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "placement", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "triggers", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], PopoverDirective.prototype, "container", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PopoverDirective.prototype, "isOpen", null);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], PopoverDirective.prototype, "dynamicPosition", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], PopoverDirective.prototype, "outsideClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PopoverDirective.prototype, "onShown", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PopoverDirective.prototype, "shown", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PopoverDirective.prototype, "onHidden", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], PopoverDirective.prototype, "hidden", void 0);
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PopoverDirective.prototype, "onclick", null);
    __decorate([
        HostListener('window:click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PopoverDirective.prototype, "onblur", null);
    __decorate([
        HostListener('document:touchstart', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], PopoverDirective.prototype, "onTouchStart", null);
    PopoverDirective = __decorate([ __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            ViewContainerRef,
            PopoverConfig,
            ComponentLoaderFactory,
            PositioningService])
    ], PopoverDirective);
PopoverDirective.ɵfac = function PopoverDirective_Factory(t) { return new (t || PopoverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.PopoverConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ComponentLoaderFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.PositioningService)); };
PopoverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PopoverDirective, selectors: [["", "mdbPopover", ""]], hostBindings: function PopoverDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function PopoverDirective_click_HostBindingHandler($event) { return ctx.onclick($event); })("click", function PopoverDirective_click_HostBindingHandler() { return ctx.onblur(); }, false, ɵngcc0.ɵɵresolveWindow)("touchstart", function PopoverDirective_touchstart_HostBindingHandler($event) { return ctx.onTouchStart($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { dynamicPosition: "dynamicPosition", outsideClick: "outsideClick", isOpen: "isOpen", containerClass: "containerClass", bodyClass: "bodyClass", headerClass: "headerClass", mdbPopover: "mdbPopover", mdbPopoverHeader: "mdbPopoverHeader", popoverTitle: "popoverTitle", placement: "placement", triggers: "triggers", container: "container" }, outputs: { onShown: "onShown", shown: "shown", onHidden: "onHidden", hidden: "hidden" }, exportAs: ["bs-mdbPopover"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PopoverDirective, [{
        type: Directive,
        args: [{ selector: '[mdbPopover]', exportAs: 'bs-mdbPopover' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.PopoverConfig }, { type: ɵngcc2.ComponentLoaderFactory }, { type: ɵngcc3.PositioningService }]; }, { dynamicPosition: [{
            type: Input
        }], outsideClick: [{
            type: Input
        }], onShown: [{
            type: Output
        }], shown: [{
            type: Output
        }], onHidden: [{
            type: Output
        }], hidden: [{
            type: Output
        }], isOpen: [{
            type: Input
        }], onclick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], onblur: [{
            type: HostListener,
            args: ['window:click']
        }], onTouchStart: [{
            type: HostListener,
            args: ['document:touchstart', ['$event']]
        }], containerClass: [{
            type: Input
        }], bodyClass: [{
            type: Input
        }], headerClass: [{
            type: Input
        }], mdbPopover: [{
            type: Input
        }], mdbPopoverHeader: [{
            type: Input
        }], popoverTitle: [{
            type: Input
        }], placement: [{
            type: Input
        }], triggers: [{
            type: Input
        }], container: [{
            type: Input
        }] }); })();
    return PopoverDirective;
}());
export { PopoverDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,