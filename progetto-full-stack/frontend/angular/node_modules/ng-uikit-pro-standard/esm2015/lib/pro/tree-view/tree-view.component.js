import { Component, Input, Output, EventEmitter, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, HostBinding, } from '@angular/core';
import { SPACE, ENTER } from '../../free/utils/keyboard-navigation';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../free/checkbox/checkbox.component';

function MdbTreeComponent_ng_template_0_li_1_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "span", 11);
    ɵngcc0.ɵɵelementStart(2, "i", 12);
    ɵngcc0.ɵɵlistener("keydown", function MdbTreeComponent_ng_template_0_li_1_div_2_Template_i_keydown_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const n_r7 = ɵngcc0.ɵɵnextContext().index; const idx_r4 = ɵngcc0.ɵɵnextContext().idx; const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.onKeydown($event, idx_r4 + "_" + n_r7); })("click", function MdbTreeComponent_ng_template_0_li_1_div_2_Template_i_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r18); const n_r7 = ɵngcc0.ɵɵnextContext().index; const idx_r4 = ɵngcc0.ɵɵnextContext().idx; const ctx_r20 = ɵngcc0.ɵɵnextContext(); return (ctx_r20.toggle[idx_r4 + "_" + n_r7] = !ctx_r20.toggle[idx_r4 + "_" + n_r7]); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const n_r7 = ɵngcc0.ɵɵnextContext().index;
    const idx_r4 = ɵngcc0.ɵɵnextContext().idx;
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r8.toggle[idx_r4 + "_" + n_r7] ? "mdb-tree-rotate-icon-open" : "mdb-tree-rotate-icon-closed");
} }
function MdbTreeComponent_ng_template_0_li_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 11);
    ɵngcc0.ɵɵelement(1, "i", 13);
    ɵngcc0.ɵɵelementEnd();
} }
function MdbTreeComponent_ng_template_0_li_1_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "mdb-checkbox", 15);
    ɵngcc0.ɵɵlistener("keydown", function MdbTreeComponent_ng_template_0_li_1_div_5_Template_mdb_checkbox_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r26 = ɵngcc0.ɵɵnextContext(); const node_r6 = ctx_r26.$implicit; const n_r7 = ctx_r26.index; const idx_r4 = ɵngcc0.ɵɵnextContext().idx; const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.onKeydownCheckbox($event, node_r6, idx_r4 + "_" + n_r7); })("click", function MdbTreeComponent_ng_template_0_li_1_div_5_Template_mdb_checkbox_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r30 = ɵngcc0.ɵɵnextContext(); const node_r6 = ctx_r30.$implicit; const n_r7 = ctx_r30.index; const idx_r4 = ɵngcc0.ɵɵnextContext().idx; const ctx_r29 = ɵngcc0.ɵɵnextContext(); ctx_r29.checkNodes(node_r6); return ctx_r29.updateNodesCheckedValues(node_r6, idx_r4 + "_" + n_r7); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r6 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("filledIn", true)("tabIndex", 1)("checked", node_r6[ctx_r11.checkboxesField]);
    ɵngcc0.ɵɵattribute("id", node_r6[ctx_r11.textField]);
} }
function MdbTreeComponent_ng_template_0_li_1_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "div", 16);
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = function (a0) { return { cursor: a0 }; };
function MdbTreeComponent_ng_template_0_li_1_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵlistener("click", function MdbTreeComponent_ng_template_0_li_1_div_7_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r34); const n_r7 = ɵngcc0.ɵɵnextContext().index; const idx_r4 = ɵngcc0.ɵɵnextContext().idx; const ctx_r33 = ɵngcc0.ɵɵnextContext(); return (ctx_r33.toggle[idx_r4 + "_" + n_r7] = !ctx_r33.toggle[idx_r4 + "_" + n_r7]); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r6 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(2, _c0, node_r6[ctx_r13.childrenField] && node_r6[ctx_r13.childrenField].length > 0 ? "pointer" : "default"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r6[ctx_r13.textField], " ");
} }
function MdbTreeComponent_ng_template_0_li_1_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r6 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r6[ctx_r14.textField], " ");
} }
function MdbTreeComponent_ng_template_0_li_1_div_9_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c1 = function (a0, a1) { return { $implicit: a0, idx: a1 }; };
function MdbTreeComponent_ng_template_0_li_1_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, MdbTreeComponent_ng_template_0_li_1_div_9_ng_container_1_Template, 1, 0, "ng-container", 19);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r40 = ɵngcc0.ɵɵnextContext();
    const node_r6 = ctx_r40.$implicit;
    const n_r7 = ctx_r40.index;
    const idx_r4 = ɵngcc0.ɵɵnextContext().idx;
    const ctx_r15 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c1, node_r6[ctx_r15.childrenField], idx_r4 + "_" + n_r7));
} }
function MdbTreeComponent_ng_template_0_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵtemplate(2, MdbTreeComponent_ng_template_0_li_1_div_2_Template, 3, 1, "div", 5);
    ɵngcc0.ɵɵtemplate(3, MdbTreeComponent_ng_template_0_li_1_ng_template_3_Template, 2, 0, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(5, MdbTreeComponent_ng_template_0_li_1_div_5_Template, 2, 4, "div", 7);
    ɵngcc0.ɵɵtemplate(6, MdbTreeComponent_ng_template_0_li_1_div_6_Template, 2, 0, "div", 8);
    ɵngcc0.ɵɵtemplate(7, MdbTreeComponent_ng_template_0_li_1_div_7_Template, 2, 4, "div", 9);
    ɵngcc0.ɵɵtemplate(8, MdbTreeComponent_ng_template_0_li_1_div_8_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, MdbTreeComponent_ng_template_0_li_1_div_9_Template, 2, 5, "div", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r6 = ctx.$implicit;
    const n_r7 = ctx.index;
    const _r9 = ɵngcc0.ɵɵreference(4);
    const idx_r4 = ɵngcc0.ɵɵnextContext().idx;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", node_r6[ctx_r5.childrenField] && node_r6[ctx_r5.childrenField].length > 0)("ngIfElse", _r9);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.checkboxes && node_r6[ctx_r5.checkboxesField] !== undefined);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.checkboxes && node_r6[ctx_r5.checkboxesField] === undefined);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.toggleOnTitleClick);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.toggleOnTitleClick);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", node_r6[ctx_r5.childrenField] && ctx_r5.toggle[idx_r4 + "_" + n_r7]);
} }
function MdbTreeComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 1);
    ɵngcc0.ɵɵtemplate(1, MdbTreeComponent_ng_template_0_li_1_Template, 10, 7, "li", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const nodeChildren_r3 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", nodeChildren_r3);
} }
function MdbTreeComponent_li_3_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r55 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "span", 11);
    ɵngcc0.ɵɵelementStart(2, "i", 12);
    ɵngcc0.ɵɵlistener("keydown", function MdbTreeComponent_li_3_div_2_Template_i_keydown_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r55); const i_r44 = ɵngcc0.ɵɵnextContext().index; const ctx_r53 = ɵngcc0.ɵɵnextContext(); return ctx_r53.onKeydown($event, i_r44); })("click", function MdbTreeComponent_li_3_div_2_Template_i_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r55); const i_r44 = ɵngcc0.ɵɵnextContext().index; const ctx_r56 = ɵngcc0.ɵɵnextContext(); return (ctx_r56.toggle[i_r44] = !ctx_r56.toggle[i_r44]); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r44 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r45 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r45.toggle[i_r44] ? "mdb-tree-rotate-icon-open" : "mdb-tree-rotate-icon-closed");
} }
function MdbTreeComponent_li_3_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 11);
    ɵngcc0.ɵɵelement(1, "i", 13);
    ɵngcc0.ɵɵelementEnd();
} }
function MdbTreeComponent_li_3_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r61 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "mdb-checkbox", 20);
    ɵngcc0.ɵɵlistener("keydown", function MdbTreeComponent_li_3_div_5_Template_mdb_checkbox_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r61); const ctx_r60 = ɵngcc0.ɵɵnextContext(); const node_r43 = ctx_r60.$implicit; const i_r44 = ctx_r60.index; const ctx_r59 = ɵngcc0.ɵɵnextContext(); return ctx_r59.onKeydownCheckbox($event, node_r43, i_r44); })("click", function MdbTreeComponent_li_3_div_5_Template_mdb_checkbox_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r61); const ctx_r63 = ɵngcc0.ɵɵnextContext(); const node_r43 = ctx_r63.$implicit; const i_r44 = ctx_r63.index; const ctx_r62 = ɵngcc0.ɵɵnextContext(); ctx_r62.checkNodes(node_r43); return ctx_r62.updateNodesCheckedValues(node_r43, i_r44); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r43 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r48 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("checked", node_r43[ctx_r48.checkboxesField])("filledIn", true)("tabIndex", 1);
    ɵngcc0.ɵɵattribute("id", node_r43[ctx_r48.textField]);
} }
function MdbTreeComponent_li_3_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "div", 16);
    ɵngcc0.ɵɵelementEnd();
} }
function MdbTreeComponent_li_3_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r66 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵlistener("click", function MdbTreeComponent_li_3_div_7_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r66); const i_r44 = ɵngcc0.ɵɵnextContext().index; const ctx_r65 = ɵngcc0.ɵɵnextContext(); return (ctx_r65.toggle[i_r44] = !ctx_r65.toggle[i_r44]); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r43 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r50 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(2, _c0, node_r43[ctx_r50.childrenField] && node_r43[ctx_r50.childrenField].length > 0 ? "pointer" : "default"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r43[ctx_r50.textField], " ");
} }
function MdbTreeComponent_li_3_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r43 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r51 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r43[ctx_r51.textField], " ");
} }
function MdbTreeComponent_li_3_div_9_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function MdbTreeComponent_li_3_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, MdbTreeComponent_li_3_div_9_ng_container_1_Template, 1, 0, "ng-container", 19);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r71 = ɵngcc0.ɵɵnextContext();
    const node_r43 = ctx_r71.$implicit;
    const i_r44 = ctx_r71.index;
    const ctx_r52 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c1, node_r43[ctx_r52.childrenField], i_r44));
} }
function MdbTreeComponent_li_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵtemplate(2, MdbTreeComponent_li_3_div_2_Template, 3, 1, "div", 5);
    ɵngcc0.ɵɵtemplate(3, MdbTreeComponent_li_3_ng_template_3_Template, 2, 0, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(5, MdbTreeComponent_li_3_div_5_Template, 2, 4, "div", 7);
    ɵngcc0.ɵɵtemplate(6, MdbTreeComponent_li_3_div_6_Template, 2, 0, "div", 8);
    ɵngcc0.ɵɵtemplate(7, MdbTreeComponent_li_3_div_7_Template, 2, 4, "div", 9);
    ɵngcc0.ɵɵtemplate(8, MdbTreeComponent_li_3_div_8_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, MdbTreeComponent_li_3_div_9_Template, 2, 5, "div", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r43 = ctx.$implicit;
    const i_r44 = ctx.index;
    const _r46 = ɵngcc0.ɵɵreference(4);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", node_r43[ctx_r2.childrenField] && node_r43[ctx_r2.childrenField].length > 0)("ngIfElse", _r46);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.checkboxes && node_r43[ctx_r2.checkboxesField] !== undefined);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.checkboxes && node_r43[ctx_r2.checkboxesField] === undefined);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.toggleOnTitleClick);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.toggleOnTitleClick);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", node_r43[ctx_r2.childrenField] && ctx_r2.toggle[i_r44]);
} }
export class MdbTreeComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this.checked = new EventEmitter();
        this.checkedKeys = new EventEmitter();
        this.nodesChanged = new EventEmitter();
        this.checkboxes = false;
        this.toggleOnTitleClick = false;
        this._expandAll = false;
        this.checkedValues = [];
        this.toggle = {};
    }
    set expandAll(value) {
        if (this.nodes && this.nodes.entries()) {
            this._expandAll = value;
            this.toggleExpandAll();
        }
    }
    ngOnInit() {
        if (this.nodes && this.nodes.entries()) {
            this._setInitialCheckedKeys();
        }
    }
    toggleExpandAll() {
        if (this._expandAll) {
            this.expandAllNodes();
        }
        else if (!this._expandAll) {
            this.closeAllNodes();
        }
    }
    expandAllNodes() {
        for (const [index, node] of this.nodes.entries()) {
            const idx = index;
            this.toggle[idx] = true;
            if (node[this.childrenField] && node[this.childrenField].length > 0) {
                this._expandAllChildren(node, idx);
            }
        }
    }
    closeAllNodes() {
        for (const [index, node] of this.nodes.entries()) {
            const idx = index;
            this.toggle[idx] = false;
            if (node[this.childrenField] && node[this.childrenField].length > 0) {
                this._closeAllChildren(node, idx);
            }
        }
    }
    _expandAllChildren(node, idx) {
        for (const [childIndex, childNode] of node[this.childrenField].entries()) {
            const childIdx = idx + '_' + childIndex;
            this.toggle[childIdx] = true;
            if (childNode[this.childrenField] && childNode[this.childrenField].length > 0) {
                this._expandAllChildren(childNode, childIdx);
            }
        }
    }
    _closeAllChildren(node, idx) {
        for (const [childIndex, childNode] of node[this.childrenField].entries()) {
            const childIdx = idx + '_' + childIndex;
            this.toggle[childIdx] = false;
            if (childNode[this.childrenField] && childNode[this.childrenField].length > 0) {
                this._closeAllChildren(childNode, childIdx);
            }
        }
    }
    _setInitialCheckedKeys() {
        for (const [index, node] of this.nodes.entries()) {
            if (node[this.checkboxesField]) {
                const idx = index;
                this.checkedValues.push(idx);
                if (node[this.childrenField] && node[this.childrenField].length > 0) {
                    this._hasInitialCheckedKeysChildren(node[this.childrenField], idx);
                }
            }
        }
    }
    _hasInitialCheckedKeysChildren(childrenNode, i) {
        for (const [childrenIdx, node] of childrenNode.entries()) {
            const idx = childrenIdx + '_' + i;
            if (node[this.checkboxesField]) {
                this.checkedValues.push(idx);
            }
            if (node[this.childrenField] && node[this.childrenField].length > 0) {
                this._hasInitialCheckedKeysChildren(node[this.childrenField], idx);
            }
        }
    }
    toggleByNode(i) {
        for (const [index, node] of this.nodes.entries()) {
            if (node[this.childrenField] && node[this.childrenField].length > 0) {
                const idx = index;
                const toggleIdx = i;
                if (idx === toggleIdx) {
                    this.toggle[idx] = !this.toggle[idx];
                    this._cdRef.markForCheck();
                }
                else {
                    this._childrenToggleByNode(node, idx, toggleIdx);
                }
            }
        }
    }
    _childrenToggleByNode(node, i, toggleIdx) {
        for (const [childIndex, childNode] of node[this.childrenField].entries()) {
            const nodeHasChildren = childNode[this.childrenField] && childNode[this.childrenField].length > 0;
            if (nodeHasChildren) {
                const idx = i + '_' + childIndex;
                if (idx === toggleIdx) {
                    this.toggle[idx] = !this.toggle[idx];
                    this._cdRef.markForCheck();
                }
                else {
                    this._childrenToggleByNode(childNode, idx, toggleIdx);
                }
            }
            else {
                return;
            }
        }
    }
    onKeydownCheckbox(e, node, i) {
        // tslint:disable-next-line: deprecation
        if (e.keyCode === SPACE || e.keyCode === ENTER) {
            e.preventDefault();
            this.checkNodes(node);
            this.updateNodesCheckedValues(node, i);
        }
    }
    onKeydown(e, i) {
        // tslint:disable-next-line: deprecation
        if (e.keyCode === SPACE || e.keyCode === ENTER) {
            e.preventDefault();
            this.toggle[i] = !this.toggle[i];
        }
    }
    checkNodes(node) {
        setTimeout(() => {
            node[this.checkboxesField] = !node[this.checkboxesField];
            this.checked.emit(node);
            this.nodesChanged.emit(this.nodes);
        }, 0);
        const nodeHasChildren = node[this.childrenField] && node[this.childrenField].length > 0;
        if (nodeHasChildren) {
            this._checkChildNodes(node[this.childrenField], !node[this.checkboxesField]);
        }
        this._cdRef.markForCheck();
    }
    _checkChildNodes(children, checked) {
        children.forEach((childNode) => {
            if (childNode[this.checkboxesField] !== undefined) {
                childNode[this.checkboxesField] = checked;
                const nodeHasChildren = childNode[this.childrenField] && childNode[this.childrenField].length > 0;
                if (nodeHasChildren) {
                    this._checkChildNodes(childNode[this.childrenField], checked);
                }
            }
        });
    }
    updateNodesCheckedValues(node, idx) {
        setTimeout(() => {
            if (node[this.checkboxesField] && !this.checkedValues.includes(idx)) {
                this.checkedValues.push(idx);
            }
            else if (!node[this.checkboxesField] && this.checkedValues.includes(idx)) {
                const removeIndex = this.checkedValues.findIndex(e => e === idx);
                if (removeIndex !== -1) {
                    this.checkedValues.splice(removeIndex, 1);
                }
            }
            const nodeHasChildren = node[this.childrenField] && node[this.childrenField].length > 0;
            if (nodeHasChildren) {
                this._updateChildNodesCheckedValues(node[this.childrenField], idx);
            }
            this.checkedKeys.emit(this.checkedValues);
        }, 0);
    }
    _updateChildNodesCheckedValues(childrenNode, childrenIdx) {
        for (const [index, node] of childrenNode.entries()) {
            const idx = childrenIdx + '_' + index;
            if (node[this.checkboxesField] && !this.checkedValues.includes(idx)) {
                this.checkedValues.push(idx);
            }
            else if (!node[this.checkboxesField] && this.checkedValues.includes(idx)) {
                const removeIndex = this.checkedValues.findIndex(e => e === idx);
                if (removeIndex !== -1) {
                    this.checkedValues.splice(removeIndex, 1);
                }
            }
            const nodeHasChildren = node[this.childrenField] && node[this.childrenField].length > 0;
            if (nodeHasChildren) {
                this._updateChildNodesCheckedValues(node[this.childrenField], idx);
            }
        }
    }
}
MdbTreeComponent.ɵfac = function MdbTreeComponent_Factory(t) { return new (t || MdbTreeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MdbTreeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MdbTreeComponent, selectors: [["mdb-tree"]], hostVars: 2, hostBindings: function MdbTreeComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mdb-tree", ctx.checked);
    } }, inputs: { checkboxes: "checkboxes", toggleOnTitleClick: "toggleOnTitleClick", expandAll: "expandAll", nodes: "nodes", textField: "textField", childrenField: "childrenField", checkboxesField: "checkboxesField" }, outputs: { checked: "checked", checkedKeys: "checkedKeys", nodesChanged: "nodesChanged" }, decls: 4, vars: 1, consts: [["tree", ""], [1, "mdb-tree-list"], ["class", "mdb-tree-list-node", 4, "ngFor", "ngForOf"], [1, "mdb-tree-list-node"], [1, "mdb-tree-container"], [4, "ngIf", "ngIfElse"], ["emptyIcon", ""], ["class", "mdb-tree-checkbox-container", 4, "ngIf"], [4, "ngIf"], ["class", "mdb-tree-text-field", 3, "ngStyle", "click", 4, "ngIf"], ["class", "mdb-tree-text-field mdb-tree-text-ellipsis", 4, "ngIf"], [1, "mdb-tree-icon-container"], ["tabindex", "1", "aria-hidden", "true", 1, "mdb-tree-indicator", 3, "ngClass", "keydown", "click"], ["aria-hidden", "true", 1, "mdb-tree-empty-icon", 2, "display", "block"], [1, "mdb-tree-checkbox-container"], [1, "checkbox-filled", 3, "filledIn", "tabIndex", "checked", "keydown", "click"], [1, "mdb-tree-checkbox-null-container"], [1, "mdb-tree-text-field", 3, "ngStyle", "click"], [1, "mdb-tree-text-field", "mdb-tree-text-ellipsis"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "checkbox-filled", 3, "checked", "filledIn", "tabIndex", "keydown", "click"]], template: function MdbTreeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, MdbTreeComponent_ng_template_0_Template, 2, 1, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(2, "ul", 1);
        ɵngcc0.ɵɵtemplate(3, MdbTreeComponent_li_3_Template, 10, 7, "li", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.nodes);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc2.CheckboxComponent, ɵngcc1.NgStyle, ɵngcc1.NgTemplateOutlet], styles: [".mdb-tree-list{list-style-type:none;margin:0;padding:0}.mdb-tree-list-node{list-style-type:none;margin:.8rem .8rem .8rem .95rem}.mdb-tree-container{display:flex;min-width:230px}.mdb-tree-icon-container{display:inline-block;height:auto;width:2rem}.mdb-tree-empty-icon{cursor:default}.mdb-tree-text-field{margin-top:.15rem;max-width:90%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mdb-tree-checkbox-null-container{min-width:2.2rem}.mdb-tree-indicator{cursor:pointer;display:inline-block;font-size:1.3rem;margin-right:0;margin-top:.025rem;position:relative;right:0;transform-origin:50% 79%}.mdb-tree-indicator:after{border-style:solid;border-width:0 3px 3px 0;content:\"\";display:block;font-size:1.3rem;margin-top:.15rem;padding:5px;transform:rotate(45deg)}.mdb-tree-indicator:focus{color:#4285f4;outline:none}.mdb-tree-rotate-icon-open{transform:rotate(0deg)}.mdb-tree-rotate-icon-closed{transform:rotate(270deg)}.mdb-tree-checkbox-container{margin-top:.25rem}.mdb-tree-checkbox-container mdb-checkbox.checkbox-filled [type=checkbox][class*=filled-in]:checked+label:after{background-color:#4285f4;border-color:#4285f4}"], encapsulation: 2, changeDetection: 0 });
MdbTreeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MdbTreeComponent.propDecorators = {
    checked: [{ type: HostBinding, args: ['class.mdb-tree',] }, { type: Output }],
    checkedKeys: [{ type: Output }],
    nodesChanged: [{ type: Output }],
    nodes: [{ type: Input }],
    textField: [{ type: Input }],
    childrenField: [{ type: Input }],
    checkboxesField: [{ type: Input }],
    expandAll: [{ type: Input }],
    checkboxes: [{ type: Input }],
    toggleOnTitleClick: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTreeComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'mdb-tree',
                template: "<!-- child nodes -->\n<ng-template #tree let-nodeChildren let-idx=\"idx\">\n  <ul class=\"mdb-tree-list\">\n    <li *ngFor=\"let node of nodeChildren; let n = index\" class=\"mdb-tree-list-node\">\n      <div class=\"mdb-tree-container\">\n        <div *ngIf=\"node[childrenField] && node[childrenField].length > 0; else emptyIcon\">\n          <span class=\"mdb-tree-icon-container\">\n            <i\n              tabindex=\"1\"\n              aria-hidden=\"true\"\n              [ngClass]=\"\n                toggle[idx + '_' + n] ? 'mdb-tree-rotate-icon-open' : 'mdb-tree-rotate-icon-closed'\n              \"\n              (keydown)=\"onKeydown($event, idx + '_' + n)\"\n              (click)=\"toggle[idx + '_' + n] = !toggle[idx + '_' + n]\"\n              class=\"mdb-tree-indicator \"\n            ></i>\n          </span>\n        </div>\n        <ng-template #emptyIcon\n          ><span class=\"mdb-tree-icon-container\"\n            ><i class=\"mdb-tree-empty-icon\" style=\"display: block\" aria-hidden=\"true\"></i\n          ></span>\n        </ng-template>\n        <div\n          class=\"mdb-tree-checkbox-container\"\n          *ngIf=\"checkboxes && node[checkboxesField] !== undefined\"\n        >\n          <mdb-checkbox\n            class=\"checkbox-filled\"\n            [filledIn]=\"true\"\n            [tabIndex]=\"1\"\n            [attr.id]=\"node[textField]\"\n            (keydown)=\"onKeydownCheckbox($event, node, idx + '_' + n)\"\n            (click)=\"checkNodes(node); updateNodesCheckedValues(node, idx + '_' + n)\"\n            [checked]=\"node[checkboxesField]\"\n          ></mdb-checkbox>\n        </div>\n        <div *ngIf=\"checkboxes && node[checkboxesField] === undefined\">\n          <div class=\"mdb-tree-checkbox-null-container\"></div>\n        </div>\n\n        <div\n          *ngIf=\"toggleOnTitleClick\"\n          class=\"mdb-tree-text-field\"\n          [ngStyle]=\"{\n            cursor: node[childrenField] && node[childrenField].length > 0 ? 'pointer' : 'default'\n          }\"\n          (click)=\"toggle[idx + '_' + n] = !toggle[idx + '_' + n]\"\n        >\n          {{ node[textField] }}\n        </div>\n\n        <div *ngIf=\"!toggleOnTitleClick\" class=\"mdb-tree-text-field mdb-tree-text-ellipsis\">\n          {{ node[textField] }}\n        </div>\n      </div>\n      <div *ngIf=\"node[childrenField] && toggle[idx + '_' + n]\">\n        <ng-container\n          *ngTemplateOutlet=\"tree; context: { $implicit: node[childrenField], idx: idx + '_' + n }\"\n        ></ng-container>\n      </div>\n    </li>\n  </ul>\n</ng-template>\n<!-- first nodes -->\n<ul class=\"mdb-tree-list\">\n  <li *ngFor=\"let node of nodes; let i = index\" class=\"mdb-tree-list-node\">\n    <div class=\"mdb-tree-container\">\n      <div *ngIf=\"node[childrenField] && node[childrenField].length > 0; else emptyIcon\">\n        <span class=\"mdb-tree-icon-container\">\n          <i\n            tabindex=\"1\"\n            aria-hidden=\"true\"\n            [ngClass]=\"toggle[i] ? 'mdb-tree-rotate-icon-open' : 'mdb-tree-rotate-icon-closed'\"\n            (keydown)=\"onKeydown($event, i)\"\n            (click)=\"toggle[i] = !toggle[i]\"\n            class=\"mdb-tree-indicator\"\n          ></i>\n        </span>\n      </div>\n      <ng-template #emptyIcon\n        ><span class=\"mdb-tree-icon-container\"\n          ><i class=\"mdb-tree-empty-icon\" style=\"display: block\" aria-hidden=\"true\"></i\n        ></span>\n      </ng-template>\n      <div\n        class=\"mdb-tree-checkbox-container\"\n        *ngIf=\"checkboxes && node[checkboxesField] !== undefined\"\n      >\n        <mdb-checkbox\n          class=\"checkbox-filled\"\n          [checked]=\"node[checkboxesField]\"\n          [filledIn]=\"true\"\n          [tabIndex]=\"1\"\n          [attr.id]=\"node[textField]\"\n          (keydown)=\"onKeydownCheckbox($event, node, i)\"\n          (click)=\"checkNodes(node); updateNodesCheckedValues(node, i)\"\n        ></mdb-checkbox>\n      </div>\n      <div *ngIf=\"checkboxes && node[checkboxesField] === undefined\">\n        <div class=\"mdb-tree-checkbox-null-container\"></div>\n      </div>\n\n      <div\n        *ngIf=\"toggleOnTitleClick\"\n        class=\"mdb-tree-text-field\"\n        [ngStyle]=\"{\n          cursor: node[childrenField] && node[childrenField].length > 0 ? 'pointer' : 'default'\n        }\"\n        (click)=\"toggle[i] = !toggle[i]\"\n      >\n        {{ node[textField] }}\n      </div>\n\n      <div *ngIf=\"!toggleOnTitleClick\" class=\"mdb-tree-text-field mdb-tree-text-ellipsis\">\n        {{ node[textField] }}\n      </div>\n    </div>\n    <div *ngIf=\"node[childrenField] && toggle[i]\">\n      <ng-container\n        *ngTemplateOutlet=\"tree; context: { $implicit: node[childrenField], idx: i }\"\n      ></ng-container>\n    </div>\n  </li>\n</ul>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mdb-tree-list{list-style-type:none;margin:0;padding:0}.mdb-tree-list-node{list-style-type:none;margin:.8rem .8rem .8rem .95rem}.mdb-tree-container{display:flex;min-width:230px}.mdb-tree-icon-container{display:inline-block;height:auto;width:2rem}.mdb-tree-empty-icon{cursor:default}.mdb-tree-text-field{margin-top:.15rem;max-width:90%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mdb-tree-checkbox-null-container{min-width:2.2rem}.mdb-tree-indicator{cursor:pointer;display:inline-block;font-size:1.3rem;margin-right:0;margin-top:.025rem;position:relative;right:0;transform-origin:50% 79%}.mdb-tree-indicator:after{border-style:solid;border-width:0 3px 3px 0;content:\"\";display:block;font-size:1.3rem;margin-top:.15rem;padding:5px;transform:rotate(45deg)}.mdb-tree-indicator:focus{color:#4285f4;outline:none}.mdb-tree-rotate-icon-open{transform:rotate(0deg)}.mdb-tree-rotate-icon-closed{transform:rotate(270deg)}.mdb-tree-checkbox-container{margin-top:.25rem}.mdb-tree-checkbox-container mdb-checkbox.checkbox-filled [type=checkbox][class*=filled-in]:checked+label:after{background-color:#4285f4;border-color:#4285f4}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { checked: [{
            type: HostBinding,
            args: ['class.mdb-tree']
        }, {
            type: Output
        }], checkedKeys: [{
            type: Output
        }], nodesChanged: [{
            type: Output
        }], checkboxes: [{
            type: Input
        }], toggleOnTitleClick: [{
            type: Input
        }], expandAll: [{
            type: Input
        }], nodes: [{
            type: Input
        }], textField: [{
            type: Input
        }], childrenField: [{
            type: Input
        }], checkboxesField: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,