import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ProgressBarComponent } from './progressbar.component';
import * as ɵngcc0 from '@angular/core';
export { ProgressBarComponent } from './progressbar.component';
export class MdProgressBarModule {
    static forRoot() {
        return {
            ngModule: MdProgressBarModule,
            providers: [],
        };
    }
}
MdProgressBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MdProgressBarModule });
MdProgressBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MdProgressBarModule_Factory(t) { return new (t || MdProgressBarModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdProgressBarModule, { declarations: function () { return [ProgressBarComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ProgressBarComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdProgressBarModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [ProgressBarComponent],
                declarations: [ProgressBarComponent]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXVpa2l0LXByby1zdGFuZGFyZC9zcmMvbGliL3Byby9wcm9ncmVzc2JhcnMvcHJvZ3Jlc3MtYmFycy1tb2R1bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztBQUUvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQU8vRCxNQUFNLE9BQU8sbUJBQW1CO0FBQy9CLElBQUMsTUFBTSxDQUFDLE9BQU87QUFBTSxRQUNsQixPQUFPO0FBQ1YsWUFBSyxRQUFRLEVBQUUsbUJBQW1CO0FBQ2xDLFlBQUssU0FBUyxFQUFFLEVBQUU7QUFDbEIsU0FBSSxDQUFDO0FBQ0wsSUFBQyxDQUFDO0FBQ0Y7aURBWkEsUUFBUSxTQUFDO0VBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLG1CQUN2QixPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxtQkFDL0IsWUFBWSxFQUFFLENBQUMsb0JBQW9CLENBQUMsZ0JBQ3JDOzs7Ozs7Ozs7O0FBVkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBWEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFByb2dyZXNzQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9wcm9ncmVzc2Jhci5jb21wb25lbnQnO1xuXG5leHBvcnQgeyBQcm9ncmVzc0JhckNvbXBvbmVudCB9IGZyb20gJy4vcHJvZ3Jlc3NiYXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGV4cG9ydHM6IFtQcm9ncmVzc0JhckNvbXBvbmVudF0sXG4gIGRlY2xhcmF0aW9uczogW1Byb2dyZXNzQmFyQ29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgTWRQcm9ncmVzc0Jhck1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TWRQcm9ncmVzc0Jhck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTWRQcm9ncmVzc0Jhck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW10sXG4gICAgfTtcbiAgfVxufVxuIl19