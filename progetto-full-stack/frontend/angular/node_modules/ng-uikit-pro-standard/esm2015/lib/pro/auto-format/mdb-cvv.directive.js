import { Directive, HostListener, HostBinding } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class MdbCvvDirective {
    constructor() {
        this.maxLength = '4';
    }
    onInput(event) {
        this.formatInput(event);
    }
    formatInput(event) {
        const input = event.target.value;
        const newValue = this.getFormattedValue(input);
        event.target.value = newValue;
    }
    getFormattedValue(value) {
        value = this.removeNonDigits(value);
        return value;
    }
    removeNonDigits(value) {
        return value.replace(/\D/g, '');
    }
}
MdbCvvDirective.ɵfac = function MdbCvvDirective_Factory(t) { return new (t || MdbCvvDirective)(); };
MdbCvvDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbCvvDirective, selectors: [["", "mdbCvv", ""]], hostVars: 1, hostBindings: function MdbCvvDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MdbCvvDirective_input_HostBindingHandler($event) { return ctx.onInput($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("maxLength", ctx.maxLength);
    } } });
MdbCvvDirective.propDecorators = {
    maxLength: [{ type: HostBinding, args: ['attr.maxLength',] }],
    onInput: [{ type: HostListener, args: ['input', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbCvvDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbCvv]'
            }]
    }], function () { return []; }, { maxLength: [{
            type: HostBinding,
            args: ['attr.maxLength']
        }], onInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWN2di5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXVpa2l0LXByby1zdGFuZGFyZC9zcmMvbGliL3Byby9hdXRvLWZvcm1hdC9tZGItY3Z2LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBS3JFLE1BQU0sT0FBTyxlQUFlO0FBRTVCLElBTEE7QUFDSSxRQUk2QixjQUFTLEdBQUcsR0FBRyxDQUFDO0FBRWpELElBbUJBLENBQUM7QUFDQSxJQW5CQyxPQUFPLENBQUMsS0FBVTtBQUNuQixRQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0IsSUFBQyxDQUFDO0FBRUgsSUFBRSxXQUFXLENBQUMsS0FBVTtBQUN2QixRQUFHLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3BDLFFBQUcsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xELFFBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQ2pDLElBQUMsQ0FBQztBQUVILElBQUUsaUJBQWlCLENBQUMsS0FBYTtBQUNoQyxRQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLFFBQUcsT0FBTyxLQUFLLENBQUM7QUFDaEIsSUFBQyxDQUFDO0FBRUgsSUFBRSxlQUFlLENBQUMsS0FBYTtBQUM5QixRQUFHLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkMsSUFBQyxDQUFDO0FBQ0Y7NkNBMUJBLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUU7Q0FBVSxnQkFDckI7Ozs7V0FDSztBQUFFO0FBRUksd0JBQVQsV0FBVyxTQUFDLGdCQUFnQjtBQUFRLHNCQUVwQyxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQzlCOzs7Ozs7Ozs7Ozs7O0FBVkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFIQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFxQkEsQUFBQSxBQWxCQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF6QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWRiQ3Z2XScsXG59KVxuZXhwb3J0IGNsYXNzIE1kYkN2dkRpcmVjdGl2ZSB7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLm1heExlbmd0aCcpIG1heExlbmd0aCA9ICc0JztcblxuICBASG9zdExpc3RlbmVyKCdpbnB1dCcsIFsnJGV2ZW50J10pXG4gIG9uSW5wdXQoZXZlbnQ6IGFueSkge1xuICAgIHRoaXMuZm9ybWF0SW5wdXQoZXZlbnQpO1xuICB9XG5cbiAgZm9ybWF0SW5wdXQoZXZlbnQ6IGFueSkge1xuICAgIGNvbnN0IGlucHV0ID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5nZXRGb3JtYXR0ZWRWYWx1ZShpbnB1dCk7XG4gICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gbmV3VmFsdWU7XG4gIH1cblxuICBnZXRGb3JtYXR0ZWRWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdmFsdWUgPSB0aGlzLnJlbW92ZU5vbkRpZ2l0cyh2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmVtb3ZlTm9uRGlnaXRzKHZhbHVlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvXFxEL2csICcnKTtcbiAgfVxufVxuIl19