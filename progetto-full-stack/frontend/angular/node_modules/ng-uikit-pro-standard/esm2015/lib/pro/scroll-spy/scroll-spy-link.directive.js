import { Directive, Input, HostListener, HostBinding, ChangeDetectorRef, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
export class ScrollSpyLinkDirective {
    constructor(cdRef, document) {
        this.cdRef = cdRef;
        this.document = document;
        this._scrollIntoView = true;
        this.active = false;
    }
    get scrollIntoView() { return this._scrollIntoView; }
    set scrollIntoView(value) {
        this._scrollIntoView = value;
    }
    get section() { return this._section; }
    set section(value) {
        if (value) {
            this._section = value;
        }
    }
    get id() {
        return this._id;
    }
    set id(newId) {
        if (newId) {
            this._id = newId;
        }
    }
    onClick() {
        if (this.section && this.scrollIntoView === true) {
            this.section.scrollIntoView();
        }
    }
    detectChanges() {
        this.cdRef.detectChanges();
    }
    assignSectionToId() {
        this.section = this.document.documentElement.querySelector(`#${this.id}`);
    }
    ngOnInit() {
        this.assignSectionToId();
    }
}
ScrollSpyLinkDirective.ɵfac = function ScrollSpyLinkDirective_Factory(t) { return new (t || ScrollSpyLinkDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
ScrollSpyLinkDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ScrollSpyLinkDirective, selectors: [["", "mdbScrollSpyLink", ""]], hostVars: 2, hostBindings: function ScrollSpyLinkDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ScrollSpyLinkDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.active);
    } }, inputs: { scrollIntoView: "scrollIntoView", id: ["mdbScrollSpyLink", "id"] } });
ScrollSpyLinkDirective.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ScrollSpyLinkDirective.propDecorators = {
    scrollIntoView: [{ type: Input }],
    id: [{ type: Input, args: ['mdbScrollSpyLink',] }],
    active: [{ type: HostBinding, args: ['class.active',] }],
    onClick: [{ type: HostListener, args: ['click', [],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollSpyLinkDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbScrollSpyLink]'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }], scrollIntoView: [{
            type: Input
        }], id: [{
            type: Input,
            args: ['mdbScrollSpyLink']
        }], onClick: [{
            type: HostListener,
            args: ['click', []]
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXNweS1saW5rLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctdWlraXQtcHJvLXN0YW5kYXJkL3NyYy9saWIvcHJvL3Njcm9sbC1zcHkvc2Nyb2xsLXNweS1saW5rLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFDTCxZQUFZLEVBQ1osV0FBVyxFQUNYLGlCQUFpQixFQUNqQixNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUszQyxNQUFNLE9BQU8sc0JBQXNCO0FBQUksSUFpQnJDLFlBQ1UsS0FBd0IsRUFDTixRQUFhO0FBQ3ZDLFFBRlEsVUFBSyxHQUFMLEtBQUssQ0FBbUI7QUFDcEMsUUFBOEIsYUFBUSxHQUFSLFFBQVEsQ0FBSztBQUMxQyxRQWRTLG9CQUFlLEdBQUcsSUFBSSxDQUFDO0FBRWpDLFFBeUJFLFdBQU0sR0FBRyxLQUFLLENBQUM7QUFFakIsSUFmSyxDQUFDO0FBRU4sSUFyQkUsSUFDSSxjQUFjLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztBQUN0RCxJQUFDLElBQUksY0FBYyxDQUFDLEtBQWM7QUFDbEMsUUFBRyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztBQUNoQyxJQUFDLENBQUM7QUFDRixJQUVDLElBQUksT0FBTyxLQUFLLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDeEMsSUFBQyxJQUFJLE9BQU8sQ0FBQyxLQUFrQjtBQUMvQixRQUFHLElBQUksS0FBSyxFQUFFO0FBQ2QsWUFBSyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUMzQixTQUFJO0FBQ0osSUFBQyxDQUFDO0FBQ0YsSUFRQyxJQUNJLEVBQUU7QUFBTSxRQUNWLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNuQixJQUFDLENBQUM7QUFDRixJQUFDLElBQUksRUFBRSxDQUFDLEtBQWE7QUFDckIsUUFBRyxJQUFJLEtBQUssRUFBRTtBQUNkLFlBQUssSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDdEIsU0FBSTtBQUNKLElBQUMsQ0FBQztBQUVILElBSUUsT0FBTztBQUNSLFFBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssSUFBSSxFQUFFO0FBQ3JELFlBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNuQyxTQUFJO0FBQ0osSUFBQyxDQUFDO0FBRUgsSUFBRSxhQUFhO0FBQ2QsUUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzlCLElBQUMsQ0FBQztBQUVILElBQUUsaUJBQWlCO0FBQ2xCLFFBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM3RSxJQUFDLENBQUM7QUFFSCxJQUFFLFFBQVE7QUFDVCxRQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzVCLElBQUMsQ0FBQztBQUNGO29EQXhEQSxTQUFTLFNBQUMsbUJBQ1QsUUFBUSxFQUFFLG9CQUFvQixlQUMvQjs7Ozs7eUZBQ0s7QUFBRTtBQUNQLFlBVEMsaUJBQWlCO0FBQ2hCLDRDQTBCRSxNQUFNLFNBQUMsUUFBUTtBQUFTO0FBQUk7QUFHVCw2QkFyQnJCLEtBQUs7QUFDTCxpQkFvQkEsS0FBSyxTQUFDLGtCQUFrQjtBQUNyQixxQkFTSCxXQUFXLFNBQUMsY0FBYztBQUN2QixzQkFFSCxZQUFZLFNBQUMsT0FBTyxFQUFFLEVBQUU7QUFDdEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWxEQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFpQkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQTJCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBYkEsQUFBQSxBQW5CQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQVNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQU1BLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF2REEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQVBBLEFBQUEsQUEyQkEsQUFBQSxBQUFBLEFBQUEsQUFsQkEsQUFBQSxBQXFCQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBPbkluaXQsXG4gIElucHV0LFxuICBIb3N0TGlzdGVuZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgSW5qZWN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWRiU2Nyb2xsU3B5TGlua10nXG59KVxuZXhwb3J0IGNsYXNzIFNjcm9sbFNweUxpbmtEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKVxuICBnZXQgc2Nyb2xsSW50b1ZpZXcoKSB7IHJldHVybiB0aGlzLl9zY3JvbGxJbnRvVmlldzsgfVxuICBzZXQgc2Nyb2xsSW50b1ZpZXcodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zY3JvbGxJbnRvVmlldyA9IHZhbHVlO1xuICB9XG4gIHByaXZhdGUgX3Njcm9sbEludG9WaWV3ID0gdHJ1ZTtcblxuICBnZXQgc2VjdGlvbigpIHsgcmV0dXJuIHRoaXMuX3NlY3Rpb247IH1cbiAgc2V0IHNlY3Rpb24odmFsdWU6IEhUTUxFbGVtZW50KSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLl9zZWN0aW9uID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgX3NlY3Rpb246IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIF9pZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueVxuICApIHt9XG5cbiAgQElucHV0KCdtZGJTY3JvbGxTcHlMaW5rJylcbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG4gIHNldCBpZChuZXdJZDogc3RyaW5nKSB7XG4gICAgaWYgKG5ld0lkKSB7XG4gICAgICB0aGlzLl9pZCA9IG5ld0lkO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYWN0aXZlJylcbiAgYWN0aXZlID0gZmFsc2U7XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbXSlcbiAgb25DbGljaygpIHtcbiAgICBpZiAodGhpcy5zZWN0aW9uICYmIHRoaXMuc2Nyb2xsSW50b1ZpZXcgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuc2VjdGlvbi5zY3JvbGxJbnRvVmlldygpO1xuICAgIH1cbiAgfVxuXG4gIGRldGVjdENoYW5nZXMoKSB7XG4gICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBhc3NpZ25TZWN0aW9uVG9JZCgpIHtcbiAgICB0aGlzLnNlY3Rpb24gPSB0aGlzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKGAjJHt0aGlzLmlkfWApO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5hc3NpZ25TZWN0aW9uVG9JZCgpO1xuICB9XG59XG4iXX0=