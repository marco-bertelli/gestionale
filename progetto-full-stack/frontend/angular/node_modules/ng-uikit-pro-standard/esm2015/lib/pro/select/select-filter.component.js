import { Component, ElementRef, ViewChild, forwardRef, HostListener, EventEmitter, Output, Input, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["input"];
export const MDB_SELECT_FILTER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => MdbSelectFilterComponent),
    multi: true,
};
export class MdbSelectFilterComponent {
    constructor(_el) {
        this._el = _el;
        this.placeholder = '';
        this.autocomplete = true;
        this.inputChange = new EventEmitter();
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    _handleInput(event) {
        const valueChanged = this.value !== event.target.value;
        if (valueChanged) {
            this._onChange(event.target.value);
            this.inputChange.emit(event.target.value);
            this.value = event.target.value;
        }
    }
    ngOnInit() { }
    focus() {
        this.input.nativeElement.focus();
    }
    /** Control value accessor methods */
    setDisabledState(isDisabled) {
        this._el.nativeElement.disabled = isDisabled;
    }
    writeValue(value) {
        Promise.resolve(null).then(() => {
            this._el.nativeElement.value = value;
        });
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
MdbSelectFilterComponent.ɵfac = function MdbSelectFilterComponent_Factory(t) { return new (t || MdbSelectFilterComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MdbSelectFilterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MdbSelectFilterComponent, selectors: [["mdb-select-filter"]], viewQuery: function MdbSelectFilterComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, hostBindings: function MdbSelectFilterComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function MdbSelectFilterComponent_input_HostBindingHandler($event) { return ctx._handleInput($event); });
    } }, inputs: { placeholder: "placeholder", autocomplete: "autocomplete" }, outputs: { inputChange: "inputChange" }, features: [ɵngcc0.ɵɵProvidersFeature([MDB_SELECT_FILTER_VALUE_ACCESSOR])], decls: 4, vars: 3, consts: [[1, "mdb-select-filter", "md-form", "px-2"], ["filter", ""], ["type", "text", 1, "mdb-select-filter-input", "search", "form-control", "w-100", "d-block", 3, "placeholder"], ["input", ""]], template: function MdbSelectFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵelement(2, "input", 2, 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵattribute("autocomplete", ctx.autocomplete)("role", "searchbox");
    } }, encapsulation: 2 });
MdbSelectFilterComponent.ctorParameters = () => [
    { type: ElementRef }
];
MdbSelectFilterComponent.propDecorators = {
    input: [{ type: ViewChild, args: ['input',] }],
    placeholder: [{ type: Input }],
    autocomplete: [{ type: Input }],
    inputChange: [{ type: Output }],
    _handleInput: [{ type: HostListener, args: ['input', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbSelectFilterComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-select-filter',
                template: "<div #filter class=\"mdb-select-filter md-form px-2\">\n  <input\n    #input\n    [placeholder]=\"placeholder\"\n    [attr.autocomplete]=\"autocomplete\"\n    [attr.role]=\"'searchbox'\"\n    type=\"text\"\n    class=\"mdb-select-filter-input search form-control w-100 d-block\"\n  />\n</div>\n",
                providers: [MDB_SELECT_FILTER_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { placeholder: [{
            type: Input
        }], autocomplete: [{
            type: Input
        }], inputChange: [{
            type: Output
        }], _handleInput: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], input: [{
            type: ViewChild,
            args: ['input']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXVpa2l0LXByby1zdGFuZGFyZC9zcmMvbGliL3Byby9zZWxlY3Qvc2VsZWN0LWZpbHRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxVQUFVLEVBQ1YsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEdBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFFbkQsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQVE7QUFDcEQsSUFBQyxPQUFPLEVBQUUsaUJBQWlCO0FBQzNCLElBQUMsa0RBQWtEO0FBQ25ELElBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztBQUN4RCxJQUFDLEtBQUssRUFBRSxJQUFJO0FBQ1osQ0FBQSxDQUFDO0FBT0YsTUFBTSxPQUFPLHdCQUF3QjtBQUFJLElBb0J2QyxZQUFvQixHQUFlO0FBQ3JDLFFBRHNCLFFBQUcsR0FBSCxHQUFHLENBQVk7QUFBRSxRQWhCNUIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7QUFDM0IsUUFBVSxpQkFBWSxHQUFHLElBQUksQ0FBQztBQUUvQixRQUFxQixnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0FBRTlFLFFBeUJFLGNBQVMsR0FBeUIsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO0FBRTdDLFFBQUUsZUFBVSxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztBQUV4QixJQWxCd0MsQ0FBQztBQUV6QyxJQVpFLFlBQVksQ0FBQyxLQUFVO0FBQ3hCLFFBQUcsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsTUFB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QUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXZEQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQXJCQSxBQUFBLEFBd0JBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBFbGVtZW50UmVmLFxuICBWaWV3Q2hpbGQsXG4gIGZvcndhcmRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5leHBvcnQgY29uc3QgTURCX1NFTEVDVF9GSUxURVJfVkFMVUVfQUNDRVNTT1I6IGFueSA9IHtcbiAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tdXNlLWJlZm9yZS1kZWNsYXJlXG4gIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1kYlNlbGVjdEZpbHRlckNvbXBvbmVudCksXG4gIG11bHRpOiB0cnVlLFxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWRiLXNlbGVjdC1maWx0ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc2VsZWN0LWZpbHRlci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW01EQl9TRUxFQ1RfRklMVEVSX1ZBTFVFX0FDQ0VTU09SXSxcbn0pXG5leHBvcnQgY2xhc3MgTWRiU2VsZWN0RmlsdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgdmFsdWU6IGFueTtcbiAgQFZpZXdDaGlsZCgnaW5wdXQnKSBpbnB1dDogRWxlbWVudFJlZjtcblxuICBASW5wdXQoKSBwbGFjZWhvbGRlciA9ICcnO1xuICBASW5wdXQoKSBhdXRvY29tcGxldGUgPSB0cnVlO1xuXG4gIEBPdXRwdXQoKSByZWFkb25seSBpbnB1dENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBASG9zdExpc3RlbmVyKCdpbnB1dCcsIFsnJGV2ZW50J10pXG4gIF9oYW5kbGVJbnB1dChldmVudDogYW55KSB7XG4gICAgY29uc3QgdmFsdWVDaGFuZ2VkID0gdGhpcy52YWx1ZSAhPT0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG4gICAgaWYgKHZhbHVlQ2hhbmdlZCkge1xuICAgICAgdGhpcy5fb25DaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgIHRoaXMuaW5wdXRDaGFuZ2UuZW1pdChldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgdGhpcy52YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZikge31cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cblxuICAvKiogQ29udHJvbCB2YWx1ZSBhY2Nlc3NvciBtZXRob2RzICovXG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZWwubmF0aXZlRWxlbWVudC5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICBfb25DaGFuZ2U6ICh2YWx1ZTogYW55KSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgX29uVG91Y2hlZCA9ICgpID0+IHt9O1xuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIFByb21pc2UucmVzb2x2ZShudWxsKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB7fSk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pIHtcbiAgICB0aGlzLl9vblRvdWNoZWQgPSBmbjtcbiAgfVxufVxuIl19