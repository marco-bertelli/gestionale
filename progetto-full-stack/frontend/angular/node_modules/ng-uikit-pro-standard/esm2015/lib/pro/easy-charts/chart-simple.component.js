import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './chart-smallpie.component';

const _c0 = function (a0, a1, a2) { return { "line-height": a0, "width": a1, "height": a2 }; };
function SimpleChartComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction3(2, _c0, ctx_r0.size + "px", ctx_r0.size + "px", ctx_r0.size + "px"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.customText);
} }
function SimpleChartComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.percent);
} }
export class SimpleChartComponent {
    constructor() {
        this.options = {
            barColor: null,
            trackColor: null,
            scaleColor: null,
            scaleLength: '',
            lineCap: null,
            lineWidth: null,
            trackWidth: null,
            size: null,
            rotate: null,
            duration: null,
            enableAnimation: null,
            animate: {
                duration: 1000,
                enabled: true,
            },
        };
    }
    ngOnInit() {
        this.options.barColor = '#' + this.barColor;
        this.options.trackColor = '#' + this.trackColor;
        this.options.scaleColor = '#' + this.scaleColor;
        this.options.scaleLength = this.scaleLength;
        this.options.lineCap = this.lineCap;
        this.options.lineWidth = this.lineWidth;
        this.options.trackWidth = this.trackWidth;
        this.options.size = this.size;
        this.options.rotate = this.rotate;
        this.options.animate.duration = this.animate.duration;
        this.options.animate.enabled = this.animate.enabled;
    }
}
SimpleChartComponent.ɵfac = function SimpleChartComponent_Factory(t) { return new (t || SimpleChartComponent)(); };
SimpleChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleChartComponent, selectors: [["mdb-simple-chart"]], inputs: { customText: "customText", percent: "percent", barColor: "barColor", trackColor: "trackColor", scaleColor: "scaleColor", scaleLength: "scaleLength", lineCap: "lineCap", lineWidth: "lineWidth", trackWidth: "trackWidth", size: "size", rotate: "rotate", animate: "animate" }, decls: 4, vars: 4, consts: [[1, "min-chart"], ["class", "chart-custom-text", 3, "ngStyle", 4, "ngIf"], ["class", "percent", 4, "ngIf"], [3, "percent", "options"], [1, "chart-custom-text", 3, "ngStyle"], [1, "percent"]], template: function SimpleChartComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵtemplate(1, SimpleChartComponent_span_1_Template, 2, 6, "span", 1);
        ɵngcc0.ɵɵtemplate(2, SimpleChartComponent_span_2_Template, 2, 1, "span", 2);
        ɵngcc0.ɵɵelement(3, "mdb-easy-pie-chart", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.customText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("percent", ctx.percent)("options", ctx.options);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.EasyPieChartComponent, ɵngcc1.NgStyle], styles: [".min-chart{display:inline-block;height:110px;margin-bottom:50px;margin-top:50px;position:relative;text-align:center;width:110px}.min-chart canvas{left:0;position:absolute;top:0}.min-chart .percent{display:inline-block;line-height:110px;z-index:2}.min-chart .percent:after{content:\"%\";font-size:.8rem;margin-left:.1em}.chart-custom-text{display:inline-block;overflow:hidden;z-index:2}"], encapsulation: 2, changeDetection: 0 });
SimpleChartComponent.ctorParameters = () => [];
SimpleChartComponent.propDecorators = {
    customText: [{ type: Input }],
    percent: [{ type: Input }],
    barColor: [{ type: Input }],
    trackColor: [{ type: Input }],
    scaleColor: [{ type: Input }],
    scaleLength: [{ type: Input }],
    lineCap: [{ type: Input }],
    lineWidth: [{ type: Input }],
    trackWidth: [{ type: Input }],
    size: [{ type: Input }],
    rotate: [{ type: Input }],
    animate: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleChartComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-simple-chart',
                template: "<span class=\"min-chart\">\n  <span \n  *ngIf=\"customText\"  \n  class=\"chart-custom-text\"\n  [ngStyle]=\"{\n  'line-height': size + 'px',\n  'width': size + 'px',\n  'height': size + 'px'}\">{{ customText }}</span>\n  <span \n  *ngIf=\"!customText\" \n  class=\"percent\">{{ percent }}</span>\n  <mdb-easy-pie-chart [percent]=\"percent\" [options]=\"options\"></mdb-easy-pie-chart>\n</span>",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".min-chart{display:inline-block;height:110px;margin-bottom:50px;margin-top:50px;position:relative;text-align:center;width:110px}.min-chart canvas{left:0;position:absolute;top:0}.min-chart .percent{display:inline-block;line-height:110px;z-index:2}.min-chart .percent:after{content:\"%\";font-size:.8rem;margin-left:.1em}.chart-custom-text{display:inline-block;overflow:hidden;z-index:2}"]
            }]
    }], function () { return []; }, { customText: [{
            type: Input
        }], percent: [{
            type: Input
        }], barColor: [{
            type: Input
        }], trackColor: [{
            type: Input
        }], scaleColor: [{
            type: Input
        }], scaleLength: [{
            type: Input
        }], lineCap: [{
            type: Input
        }], lineWidth: [{
            type: Input
        }], trackWidth: [{
            type: Input
        }], size: [{
            type: Input
        }], rotate: [{
            type: Input
        }], animate: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtc2ltcGxlLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctdWlraXQtcHJvLXN0YW5kYXJkL3NyYy9saWIvcHJvL2Vhc3ktY2hhcnRzL2NoYXJ0LXNpbXBsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBRUwsaUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVN2QixNQUFNLE9BQU8sb0JBQW9CO0FBQUksSUErQm5DO0FBQ0YsUUFuQlMsWUFBTyxHQUFRO0FBQ3ZCLFlBQUcsUUFBUSxFQUFFLElBQUk7QUFDakIsWUFBRyxVQUFVLEVBQUUsSUFBSTtBQUNuQixZQUFHLFVBQVUsRUFBRSxJQUFJO0FBQ25CLFlBQUcsV0FBVyxFQUFFLEVBQUU7QUFDbEIsWUFBRyxPQUFPLEVBQUUsSUFBSTtBQUNoQixZQUFHLFNBQVMsRUFBRSxJQUFJO0FBQ2xCLFlBQUcsVUFBVSxFQUFFLElBQUk7QUFDbkIsWUFBRyxJQUFJLEVBQUUsSUFBSTtBQUNiLFlBQUcsTUFBTSxFQUFFLElBQUk7QUFDZixZQUFHLFFBQVEsRUFBRSxJQUFJO0FBQ2pCLFlBQUcsZUFBZSxFQUFFLElBQUk7QUFDeEIsWUFBRyxPQUFPLEVBQUU7QUFDWixnQkFBSyxRQUFRLEVBQUUsSUFBSTtBQUNuQixnQkFBSyxPQUFPLEVBQUUsSUFBSTtBQUNsQixhQUFJO0FBQ0osU0FBRSxDQUFDO0FBRUosSUFBaUIsQ0FBQztBQUVsQixJQUFFLFFBQVE7QUFDVCxRQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQy9DLFFBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDbkQsUUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUNuRCxRQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDL0MsUUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3ZDLFFBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUMzQyxRQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDN0MsUUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2pDLFFBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNyQyxRQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUN6RCxRQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUN2RCxJQUFDLENBQUM7QUFDRjtrREFyREEsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRSxrQkFBa0I7a0JBQzVCLHNaQUE0QyxtQkFFNUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUksbUJBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzs7OztjQUNoRDs7Ozs7Ozs7eWdCQUNLO0FBQUU7QUFDTDtBQUNVLHlCQURWLEtBQUs7QUFBTSxzQkFDWCxLQUFLO0FBQU0sdUJBQ1gsS0FBSztBQUFNLHlCQUNYLEtBQUs7QUFBTSx5QkFDWCxLQUFLO0FBQU0sMEJBQ1gsS0FBSztBQUFNLHNCQUNYLEtBQUs7QUFBTSx3QkFDWCxLQUFLO0FBQU0seUJBQ1gsS0FBSztBQUFNLG1CQUNYLEtBQUs7QUFBTSxxQkFDWCxLQUFLO0FBQU0sc0JBQ1gsS0FBSztBQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTNCQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBU0EsQUFBQSxBQUFBLEFBQUEsQUErQkEsQUFsQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFwREEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21kYi1zaW1wbGUtY2hhcnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hhcnQtc2ltcGxlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZWFzeS1jaGFydHMtbW9kdWxlLnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFNpbXBsZUNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY3VzdG9tVGV4dDogc3RyaW5nO1xuICBASW5wdXQoKSBwZXJjZW50OiBudW1iZXI7XG4gIEBJbnB1dCgpIGJhckNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHRyYWNrQ29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgc2NhbGVDb2xvcjogc3RyaW5nO1xuICBASW5wdXQoKSBzY2FsZUxlbmd0aDogbnVtYmVyO1xuICBASW5wdXQoKSBsaW5lQ2FwOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGxpbmVXaWR0aDogbnVtYmVyO1xuICBASW5wdXQoKSB0cmFja1dpZHRoOiBudW1iZXI7XG4gIEBJbnB1dCgpIHNpemU6IG51bWJlcjtcbiAgQElucHV0KCkgcm90YXRlOiBudW1iZXI7XG4gIEBJbnB1dCgpIGFuaW1hdGU6IHsgZHVyYXRpb246IHN0cmluZzsgZW5hYmxlZDogYm9vbGVhbiB9O1xuICBwdWJsaWMgb3B0aW9uczogYW55ID0ge1xuICAgIGJhckNvbG9yOiBudWxsLFxuICAgIHRyYWNrQ29sb3I6IG51bGwsXG4gICAgc2NhbGVDb2xvcjogbnVsbCxcbiAgICBzY2FsZUxlbmd0aDogJycsXG4gICAgbGluZUNhcDogbnVsbCxcbiAgICBsaW5lV2lkdGg6IG51bGwsXG4gICAgdHJhY2tXaWR0aDogbnVsbCxcbiAgICBzaXplOiBudWxsLFxuICAgIHJvdGF0ZTogbnVsbCxcbiAgICBkdXJhdGlvbjogbnVsbCxcbiAgICBlbmFibGVBbmltYXRpb246IG51bGwsXG4gICAgYW5pbWF0ZToge1xuICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMub3B0aW9ucy5iYXJDb2xvciA9ICcjJyArIHRoaXMuYmFyQ29sb3I7XG4gICAgdGhpcy5vcHRpb25zLnRyYWNrQ29sb3IgPSAnIycgKyB0aGlzLnRyYWNrQ29sb3I7XG4gICAgdGhpcy5vcHRpb25zLnNjYWxlQ29sb3IgPSAnIycgKyB0aGlzLnNjYWxlQ29sb3I7XG4gICAgdGhpcy5vcHRpb25zLnNjYWxlTGVuZ3RoID0gdGhpcy5zY2FsZUxlbmd0aDtcbiAgICB0aGlzLm9wdGlvbnMubGluZUNhcCA9IHRoaXMubGluZUNhcDtcbiAgICB0aGlzLm9wdGlvbnMubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGg7XG4gICAgdGhpcy5vcHRpb25zLnRyYWNrV2lkdGggPSB0aGlzLnRyYWNrV2lkdGg7XG4gICAgdGhpcy5vcHRpb25zLnNpemUgPSB0aGlzLnNpemU7XG4gICAgdGhpcy5vcHRpb25zLnJvdGF0ZSA9IHRoaXMucm90YXRlO1xuICAgIHRoaXMub3B0aW9ucy5hbmltYXRlLmR1cmF0aW9uID0gdGhpcy5hbmltYXRlLmR1cmF0aW9uO1xuICAgIHRoaXMub3B0aW9ucy5hbmltYXRlLmVuYWJsZWQgPSB0aGlzLmFuaW1hdGUuZW5hYmxlZDtcbiAgfVxufVxuIl19