import { Directive, ElementRef, Renderer2, Input, HostListener } from '@angular/core';
import { BACKSPACE, DELETE } from '../../../free/utils/keyboard-navigation';
import * as ɵngcc0 from '@angular/core';
var KeyCode;
(function (KeyCode) {
    KeyCode[KeyCode["backspace"] = BACKSPACE] = "backspace";
    KeyCode[KeyCode["delete"] = DELETE] = "delete";
})(KeyCode || (KeyCode = {}));
export class InputAutoFillDirective {
    constructor(el, rndr) {
        this.el = el;
        this.rndr = rndr;
    }
    onKeyUp(evt) {
        // tslint:disable-next-line: deprecation
        if (!this.opts.enabled || evt.keyCode === KeyCode.backspace || evt.keyCode === KeyCode.delete) {
            return;
        }
        const val = this.getInputValue();
        const ews = this.endsWith(val, this.opts.separator);
        const parts = val.split(this.opts.separator);
        const idx = parts.length - 1;
        if (val.indexOf(this.opts.separator + this.opts.separator) !== -1 || idx > 2) {
            return;
        }
        if (!ews &&
            (val.length === this.getPartLength(0) ||
                val.length === this.getPartLength(0) + this.getPartLength(1) + this.opts.separator.length)) {
            this.setInputValue(val + this.opts.separator);
        }
        else if (ews &&
            parts[idx - 1].length < this.getPartLength(idx - 1) &&
            this.isNumber(parts[idx - 1]) &&
            (this.isDay(idx - 1) || this.isMonth(idx - 1))) {
            this.setInputValue(this.insertPos(val, val.length - 2, '0'));
        }
        else if (parts[idx].length < this.getPartLength(idx) &&
            this.isNumber(parts[idx]) &&
            ((Number(parts[idx]) > 3 && this.isDay(idx)) || (Number(parts[idx]) > 1 && this.isMonth(idx)))) {
            this.setInputValue(this.insertPos(val, val.length - 1, '0') + (idx < 2 ? this.opts.separator : ''));
        }
    }
    endsWith(val, suffix) {
        return val.indexOf(suffix, val.length - suffix.length) !== -1;
    }
    insertPos(str, idx, val) {
        return str.substr(0, idx) + val + str.substr(idx);
    }
    getPartLength(idx) {
        return this.opts.formatParts[idx].length;
    }
    isNumber(val) {
        return val.match(/[1-9]/) !== null;
    }
    isDay(idx) {
        return this.opts.formatParts[idx].indexOf('d') !== -1;
    }
    isMonth(idx) {
        return (this.opts.formatParts[idx].indexOf('m') !== -1 && this.opts.formatParts[idx].length === 2);
    }
    getInputValue() {
        return this.el.nativeElement.value;
    }
    setInputValue(val) {
        this.rndr.setProperty(this.el.nativeElement, 'value', val);
    }
}
InputAutoFillDirective.ɵfac = function InputAutoFillDirective_Factory(t) { return new (t || InputAutoFillDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
InputAutoFillDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InputAutoFillDirective, selectors: [["", "mdbInputAutoFill", ""]], hostBindings: function InputAutoFillDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function InputAutoFillDirective_keyup_HostBindingHandler($event) { return ctx.onKeyUp($event); });
    } }, inputs: { opts: "opts" } });
InputAutoFillDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
InputAutoFillDirective.propDecorators = {
    opts: [{ type: Input }],
    onKeyUp: [{ type: HostListener, args: ['keyup', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InputAutoFillDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbInputAutoFill]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { onKeyUp: [{
            type: HostListener,
            args: ['keyup', ['$event']]
        }], opts: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,