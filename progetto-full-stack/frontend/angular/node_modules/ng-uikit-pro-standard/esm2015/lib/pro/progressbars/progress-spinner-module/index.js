import { NgModule } from '@angular/core';
import { MdProgressSpinnerComponent, MdSpinnerComponent, MdProgressSpinnerCssMatStylerDirective, } from './progress-spinner.component';
import { ProgressSpinnerComponent } from '../progress-spinner.component';
import * as ɵngcc0 from '@angular/core';
class MdProgressSpinnerModule {
    static forRoot() {
        return {
            ngModule: MdProgressSpinnerModule,
            providers: [],
        };
    }
}
MdProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MdProgressSpinnerModule });
MdProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MdProgressSpinnerModule_Factory(t) { return new (t || MdProgressSpinnerModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdProgressSpinnerModule, { declarations: function () { return [MdProgressSpinnerComponent,
        MdSpinnerComponent,
        MdProgressSpinnerCssMatStylerDirective,
        ProgressSpinnerComponent]; }, exports: function () { return [MdProgressSpinnerComponent,
        MdSpinnerComponent,
        MdProgressSpinnerCssMatStylerDirective,
        ProgressSpinnerComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdProgressSpinnerModule, [{
        type: NgModule,
        args: [{
                exports: [
                    MdProgressSpinnerComponent,
                    MdSpinnerComponent,
                    MdProgressSpinnerCssMatStylerDirective,
                    ProgressSpinnerComponent,
                ],
                declarations: [
                    MdProgressSpinnerComponent,
                    MdSpinnerComponent,
                    MdProgressSpinnerCssMatStylerDirective,
                    ProgressSpinnerComponent,
                ]
            }]
    }], null, null); })();
export { MdProgressSpinnerModule };
export { MdProgressSpinnerCssMatStylerDirective, MdProgressSpinnerComponent, MdSpinnerComponent, } from './progress-spinner.component';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXVpa2l0LXByby1zdGFuZGFyZC9zcmMvbGliL3Byby9wcm9ncmVzc2JhcnMvcHJvZ3Jlc3Mtc3Bpbm5lci1tb2R1bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUNMLDBCQUEwQixFQUMxQixrQkFBa0IsRUFDbEIsc0NBQXNDLEdBQ3ZDLE1BQU0sOEJBQThCLENBQUM7QUFFdEMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7O0FBRXpFLE1BY00sdUJBQXVCO0FBQzVCLElBQUMsTUFBTSxDQUFDLE9BQU87QUFBTSxRQUNsQixPQUFPO0FBQ1YsWUFBSyxRQUFRLEVBQUUsdUJBQXVCO0FBQ3RDLFlBQUssU0FBUyxFQUFFLEVBQUU7QUFDbEIsU0FBSSxDQUFDO0FBQ0wsSUFBQyxDQUFDO0FBQ0Y7cURBckJBLFFBQVEsU0FBQyxtQkFDUjtLQUFPLEVBQUUsdUJBQ1AsMEJBQTBCLHVCQUMxQixrQkFBa0IsdUJBQ2xCLHNDQUFzQztrQkFDdEMsd0JBQXdCLG9CQUN6QixtQkFDRCxZQUFZLEVBQUUsdUJBQ1osMEJBQTBCLHVCQUMxQjtFQUFrQix1QkFDbEI7bUNBQXNDO1VBQ3RDLHdCQUF3QixvQkFDekIsZ0JBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNLO0FBU04sT0FBTyxFQUFFLHVCQUF1QixFQUFFLENBQUM7O0FBaENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFjQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBcEJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBVUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIE1kUHJvZ3Jlc3NTcGlubmVyQ29tcG9uZW50LFxuICBNZFNwaW5uZXJDb21wb25lbnQsXG4gIE1kUHJvZ3Jlc3NTcGlubmVyQ3NzTWF0U3R5bGVyRGlyZWN0aXZlLFxufSBmcm9tICcuL3Byb2dyZXNzLXNwaW5uZXIuY29tcG9uZW50JztcblxuaW1wb3J0IHsgUHJvZ3Jlc3NTcGlubmVyQ29tcG9uZW50IH0gZnJvbSAnLi4vcHJvZ3Jlc3Mtc3Bpbm5lci5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBleHBvcnRzOiBbXG4gICAgTWRQcm9ncmVzc1NwaW5uZXJDb21wb25lbnQsXG4gICAgTWRTcGlubmVyQ29tcG9uZW50LFxuICAgIE1kUHJvZ3Jlc3NTcGlubmVyQ3NzTWF0U3R5bGVyRGlyZWN0aXZlLFxuICAgIFByb2dyZXNzU3Bpbm5lckNvbXBvbmVudCxcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTWRQcm9ncmVzc1NwaW5uZXJDb21wb25lbnQsXG4gICAgTWRTcGlubmVyQ29tcG9uZW50LFxuICAgIE1kUHJvZ3Jlc3NTcGlubmVyQ3NzTWF0U3R5bGVyRGlyZWN0aXZlLFxuICAgIFByb2dyZXNzU3Bpbm5lckNvbXBvbmVudCxcbiAgXSxcbn0pXG5jbGFzcyBNZFByb2dyZXNzU3Bpbm5lck1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TWRQcm9ncmVzc1NwaW5uZXJNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE1kUHJvZ3Jlc3NTcGlubmVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXSxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCB7IE1kUHJvZ3Jlc3NTcGlubmVyTW9kdWxlIH07XG5leHBvcnQge1xuICBQcm9ncmVzc1NwaW5uZXJNb2RlLFxuICBNZFByb2dyZXNzU3Bpbm5lckNzc01hdFN0eWxlckRpcmVjdGl2ZSxcbiAgTWRQcm9ncmVzc1NwaW5uZXJDb21wb25lbnQsXG4gIE1kU3Bpbm5lckNvbXBvbmVudCxcbn0gZnJvbSAnLi9wcm9ncmVzcy1zcGlubmVyLmNvbXBvbmVudCc7XG4iXX0=