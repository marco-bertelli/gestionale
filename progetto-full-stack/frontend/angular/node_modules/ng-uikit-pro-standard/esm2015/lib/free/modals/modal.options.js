import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ModalOptions {
}
ModalOptions.ɵfac = function ModalOptions_Factory(t) { return new (t || ModalOptions)(); };
ModalOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ModalOptions, factory: ModalOptions.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModalOptions, [{
        type: Injectable
    }], null, null); })();
export class MDBModalRef {
    /**
     * Hides the modal
     */
    hide() { }
}
MDBModalRef.ɵfac = function MDBModalRef_Factory(t) { return new (t || MDBModalRef)(); };
MDBModalRef.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MDBModalRef, factory: MDBModalRef.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MDBModalRef, [{
        type: Injectable
    }], null, null); })();
const ɵ0 = {};
export const modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    containerClass: '',
    animated: true,
    scroll: false,
    data: ɵ0,
};
export const ClassName = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    SHOW: 'show',
};
export const Selector = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed',
};
export const TransitionDurations = {
    MODAL: 300,
    BACKDROP: 150,
};
export const DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc',
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwub3B0aW9ucy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctdWlraXQtcHJvLXN0YW5kYXJkL3NyYy9saWIvZnJlZS9tb2RhbHMvbW9kYWwub3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUczQyxNQUFNLE9BQU8sWUFBWTtBQUN4QjswQ0FGQSxVQUFVOzs7OzBCQUNSO0FBaUNILE1BQU0sT0FBTyxXQUFXO0FBQ3ZCLElBSUM7QUFDRDtBQUNHLE9BQUM7QUFDSixJQUFDLElBQUksS0FBVSxDQUFDO0FBQ2hCO3lDQVZBLFVBQVU7Ozs7MEJBQ1I7QUFBRSxXQXFCRyxFQUFFO0FBVlYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQWlCO0FBQ2hELElBQUMsUUFBUSxFQUFFLElBQUk7QUFDZixJQUFDLFFBQVEsRUFBRSxJQUFJO0FBQ2YsSUFBQyxLQUFLLEVBQUUsSUFBSTtBQUNaLElBQUMsSUFBSSxFQUFFLEtBQUs7QUFDWixJQUFDLG1CQUFtQixFQUFFLEtBQUs7QUFDM0IsSUFBQyxLQUFLLEVBQUUsRUFBRTtBQUNWLElBQUMsY0FBYyxFQUFFLEVBQUU7QUFDbkIsSUFBQyxRQUFRLEVBQUUsSUFBSTtBQUNmLElBQUMsTUFBTSxFQUFFLEtBQUs7QUFDZCxJQUFDLElBQUksSUFBSTtBQUNULENBQUEsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBUTtBQUM3QixJQUFDLGtCQUFrQixFQUFFLHlCQUF5QjtBQUM5QyxJQUFDLFFBQVEsRUFBRSxnQkFBZ0I7QUFDM0IsSUFBQyxJQUFJLEVBQUUsWUFBWTtBQUNuQixJQUFDLElBQUksRUFBRSxNQUFNO0FBQ2IsSUFBQyxFQUFFLEVBQUUsSUFBSTtBQUFHLElBQ1gsSUFBSSxFQUFFLE1BQU07QUFBRyxDQUNoQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFRO0FBQzVCLElBQUMsTUFBTSxFQUFFLGVBQWU7QUFDeEIsSUFBQyxXQUFXLEVBQUUsdUJBQXVCO0FBQ3JDLElBQUMsWUFBWSxFQUFFLHdCQUF3QjtBQUN2QyxJQUFDLGFBQWEsRUFBRSxvREFBb0Q7QUFDcEUsQ0FBQSxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQVE7QUFDdkMsSUFBQyxLQUFLLEVBQUUsR0FBRztBQUNYLElBQUMsUUFBUSxFQUFFLEdBQUc7QUFDZCxDQUFBLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUc7QUFDOUIsSUFBQyxRQUFRLEVBQUUsZ0JBQWdCO0FBQzNCLElBQUMsR0FBRyxFQUFFLEtBQUs7QUFDWCxDQUFBLENBQUM7O0FBcEZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQURBLEFBQUEsQUFrQ0EsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUVBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFUQSxBQUFBLEFBc0JBLEFBQUEsQUFWQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb2RhbE9wdGlvbnMge1xuICAvKipcbiAgICogIEluY2x1ZGVzIGEgbW9kYWwtYmFja2Ryb3AgZWxlbWVudC4gQWx0ZXJuYXRpdmVseSwgc3BlY2lmeSBzdGF0aWMgZm9yIGEgYmFja2Ryb3Agd2hpY2ggZG9lc24ndCBjbG9zZSB0aGUgbW9kYWwgb24gY2xpY2suXG4gICAqL1xuICBiYWNrZHJvcD86IGJvb2xlYW4gfCAnc3RhdGljJyB8IGFueTtcbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgbW9kYWwgd2hlbiBlc2NhcGUga2V5IGlzIHByZXNzZWQuXG4gICAqL1xuICBrZXlib2FyZD86IGJvb2xlYW47XG5cbiAgZm9jdXM/OiBib29sZWFuO1xuICAvKipcbiAgICogU2hvd3MgdGhlIG1vZGFsIHdoZW4gaW5pdGlhbGl6ZWQuXG4gICAqL1xuICBzaG93PzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIElnbm9yZSB0aGUgYmFja2Ryb3AgY2xpY2tcbiAgICovXG4gIGlnbm9yZUJhY2tkcm9wQ2xpY2s/OiBib29sZWFuO1xuICAvKipcbiAgICogQ3NzIGNsYXNzIGZvciBvcGVuZWQgbW9kYWxcbiAgICovXG4gIGNsYXNzPzogc3RyaW5nO1xuICAvKipcbiAgICogVG9nZ2xlIGFuaW1hdGlvblxuICAgKi9cbiAgY29udGFpbmVyQ2xhc3M/OiBzdHJpbmc7XG4gIGFuaW1hdGVkPzogYm9vbGVhbjtcbiAgc2Nyb2xsPzogYm9vbGVhbjtcbiAgZGF0YT86IE9iamVjdDtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1EQk1vZGFsUmVmIHtcbiAgLyoqXG4gICAqIFJlZmVyZW5jZSB0byBhIGNvbXBvbmVudCBpbnNpZGUgdGhlIG1vZGFsLiBOdWxsIGlmIG1vZGFsJ3MgYmVlbiBjcmVhdGVkIHdpdGggVGVtcGxhdGVSZWZcbiAgICovXG4gIGNvbnRlbnQ/OiBhbnkgfCBudWxsO1xuICAvKipcbiAgICogSGlkZXMgdGhlIG1vZGFsXG4gICAqL1xuICBoaWRlKCk6IHZvaWQge31cbn1cblxuZXhwb3J0IGNvbnN0IG1vZGFsQ29uZmlnRGVmYXVsdHM6IE1vZGFsT3B0aW9ucyA9IHtcbiAgYmFja2Ryb3A6IHRydWUsXG4gIGtleWJvYXJkOiB0cnVlLFxuICBmb2N1czogdHJ1ZSxcbiAgc2hvdzogZmFsc2UsXG4gIGlnbm9yZUJhY2tkcm9wQ2xpY2s6IGZhbHNlLFxuICBjbGFzczogJycsXG4gIGNvbnRhaW5lckNsYXNzOiAnJyxcbiAgYW5pbWF0ZWQ6IHRydWUsXG4gIHNjcm9sbDogZmFsc2UsXG4gIGRhdGE6IHt9LFxufTtcblxuZXhwb3J0IGNvbnN0IENsYXNzTmFtZTogYW55ID0ge1xuICBTQ1JPTExCQVJfTUVBU1VSRVI6ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZScsXG4gIEJBQ0tEUk9QOiAnbW9kYWwtYmFja2Ryb3AnLFxuICBPUEVOOiAnbW9kYWwtb3BlbicsXG4gIEZBREU6ICdmYWRlJyxcbiAgSU46ICdpbicsIC8vIGJzM1xuICBTSE9XOiAnc2hvdycsIC8vIGJzNFxufTtcblxuZXhwb3J0IGNvbnN0IFNlbGVjdG9yOiBhbnkgPSB7XG4gIERJQUxPRzogJy5tb2RhbC1kaWFsb2cnLFxuICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxcbiAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcbiAgRklYRURfQ09OVEVOVDogJy5uYXZiYXItZml4ZWQtdG9wLCAubmF2YmFyLWZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkJyxcbn07XG5cbmV4cG9ydCBjb25zdCBUcmFuc2l0aW9uRHVyYXRpb25zOiBhbnkgPSB7XG4gIE1PREFMOiAzMDAsXG4gIEJBQ0tEUk9QOiAxNTAsXG59O1xuXG5leHBvcnQgY29uc3QgRElTTUlTU19SRUFTT05TID0ge1xuICBCQUNLUkRPUDogJ2JhY2tkcm9wLWNsaWNrJyxcbiAgRVNDOiAnZXNjJyxcbn07XG4iXX0=